<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Sitoi</title>
  
  
  <link href="https://sitoi.cn/atom.xml" rel="self"/>
  
  <link href="https://sitoi.cn/"/>
  <updated>2020-08-19T05:45:51.882Z</updated>
  <id>https://sitoi.cn/</id>
  
  <author>
    <name>Sitoi</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Selenium ChromeDriver 设置代理 和 设置认证代理</title>
    <link href="https://sitoi.cn/posts/34819.html"/>
    <id>https://sitoi.cn/posts/34819.html</id>
    <published>2020-08-19T05:27:38.000Z</published>
    <updated>2020-08-19T05:45:51.882Z</updated>
    
    <content type="html"><![CDATA[<div class="note info">            <p><a href="/posts/14489.html">Selenium &amp; ChromeDriver 全平台安装教程（Mac、Windows、Linux）</a></p>          </div><h2 id="Selenium-ChromeDriver-代理使用，无密码或已设置白名单-IP"><a href="#Selenium-ChromeDriver-代理使用，无密码或已设置白名单-IP" class="headerlink" title="Selenium + ChromeDriver 代理使用，无密码或已设置白名单 IP"></a>Selenium + ChromeDriver 代理使用，无密码或已设置白名单 IP</h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line">chromeOptions = webdriver.ChromeOptions()</span><br><span class="line">chromeOptions.add_argument(<span class="string">"--proxy-server=http://127.0.0.1:7890"</span>)</span><br><span class="line">browser = webdriver.Chrome(options=chromeOptions)</span><br><span class="line">browser.get(<span class="string">"https://httpbin.org/get?show_env=1"</span>)</span><br><span class="line">browser.get_screenshot_as_file(<span class="string">"httpbin.png"</span>)</span><br><span class="line">browser.close()</span><br></pre></td></tr></tbody></table></figure><blockquote><p>注: <code>--proxy-server=http://host:port</code> 等号两边不能有空格</p></blockquote><h2 id="Selenium-ChromeDriver-代理使用，支持-Http、Https-账号密码"><a href="#Selenium-ChromeDriver-代理使用，支持-Http、Https-账号密码" class="headerlink" title="Selenium + ChromeDriver 代理使用，支持 Http、Https 账号密码"></a>Selenium + ChromeDriver 代理使用，支持 Http、Https 账号密码</h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_proxyauth_extension</span>(<span class="params">proxy_host, proxy_port, proxy_username, proxy_password, scheme=<span class="string">"http"</span>, plugin_path=None</span>):</span></span><br><span class="line">    <span class="string">"""Proxy Auth Extension</span></span><br><span class="line"><span class="string">    args:</span></span><br><span class="line"><span class="string">        proxy_host (str): domain or ip address, ie proxy.domain.com</span></span><br><span class="line"><span class="string">        proxy_port (int): port</span></span><br><span class="line"><span class="string">        proxy_username (str): auth username</span></span><br><span class="line"><span class="string">        proxy_password (str): auth password</span></span><br><span class="line"><span class="string">    kwargs:</span></span><br><span class="line"><span class="string">        scheme (str): proxy scheme, default http</span></span><br><span class="line"><span class="string">        plugin_path (str): absolute path of the extension</span></span><br><span class="line"><span class="string">    return str -&gt; plugin_path</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">import</span> string</span><br><span class="line">    <span class="keyword">import</span> zipfile</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> plugin_path <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        plugin_path = <span class="string">r"C:\Users\shitao\IIoTProjects\htmlcrawler\vimm_chrome_proxyauth_plugin.zip"</span></span><br><span class="line">    manifest_json = <span class="string">"""</span></span><br><span class="line"><span class="string">    {</span></span><br><span class="line"><span class="string">        "version": "1.0.0",</span></span><br><span class="line"><span class="string">        "manifest_version": 2,</span></span><br><span class="line"><span class="string">        "name": "Chrome Proxy",</span></span><br><span class="line"><span class="string">        "permissions": [</span></span><br><span class="line"><span class="string">            "proxy",</span></span><br><span class="line"><span class="string">            "tabs",</span></span><br><span class="line"><span class="string">            "unlimitedStorage",</span></span><br><span class="line"><span class="string">            "storage",</span></span><br><span class="line"><span class="string">            "&lt;all_urls&gt;",</span></span><br><span class="line"><span class="string">            "webRequest",</span></span><br><span class="line"><span class="string">            "webRequestBlocking"</span></span><br><span class="line"><span class="string">        ],</span></span><br><span class="line"><span class="string">        "background": {</span></span><br><span class="line"><span class="string">            "scripts": ["background.js"]</span></span><br><span class="line"><span class="string">        },</span></span><br><span class="line"><span class="string">        "minimum_chrome_version":"22.0.0"</span></span><br><span class="line"><span class="string">    }</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    background_js = string.Template(</span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        var config = {</span></span><br><span class="line"><span class="string">                mode: "fixed_servers",</span></span><br><span class="line"><span class="string">                rules: {</span></span><br><span class="line"><span class="string">                  singleProxy: {</span></span><br><span class="line"><span class="string">                    scheme: "${scheme}",</span></span><br><span class="line"><span class="string">                    host: "${host}",</span></span><br><span class="line"><span class="string">                    port: parseInt(${port})</span></span><br><span class="line"><span class="string">                  },</span></span><br><span class="line"><span class="string">                  bypassList: ["foobar.com"]</span></span><br><span class="line"><span class="string">                }</span></span><br><span class="line"><span class="string">              };</span></span><br><span class="line"><span class="string">        chrome.proxy.settings.set({value: config, scope: "regular"}, function() {});</span></span><br><span class="line"><span class="string">        function callbackFn(details) {</span></span><br><span class="line"><span class="string">            return {</span></span><br><span class="line"><span class="string">                authCredentials: {</span></span><br><span class="line"><span class="string">                    username: "${username}",</span></span><br><span class="line"><span class="string">                    password: "${password}"</span></span><br><span class="line"><span class="string">                }</span></span><br><span class="line"><span class="string">            };</span></span><br><span class="line"><span class="string">        }</span></span><br><span class="line"><span class="string">        chrome.webRequest.onAuthRequired.addListener(</span></span><br><span class="line"><span class="string">                    callbackFn,</span></span><br><span class="line"><span class="string">                    {urls: ["&lt;all_urls&gt;"]},</span></span><br><span class="line"><span class="string">                    ['blocking']</span></span><br><span class="line"><span class="string">        );</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">    ).substitute(host=proxy_host, port=proxy_port, username=proxy_username, password=proxy_password, scheme=scheme)</span><br><span class="line">    <span class="keyword">with</span> zipfile.ZipFile(plugin_path, <span class="string">"w"</span>) <span class="keyword">as</span> zp:</span><br><span class="line">        zp.writestr(<span class="string">"manifest.json"</span>, manifest_json)</span><br><span class="line">        zp.writestr(<span class="string">"background.js"</span>, background_js)</span><br><span class="line">    <span class="keyword">return</span> plugin_path</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">proxyauth_plugin_path = create_proxyauth_extension(</span><br><span class="line">    proxy_host=<span class="string">"127.0.0.1"</span>,</span><br><span class="line">    proxy_port=<span class="number">7890</span>,</span><br><span class="line">    proxy_username=<span class="literal">None</span>,</span><br><span class="line">    proxy_password=<span class="literal">None</span></span><br><span class="line">)</span><br><span class="line">options = webdriver.ChromeOptions()</span><br><span class="line">options.add_argument(<span class="string">"--start-maximized"</span>)</span><br><span class="line">options.add_extension(proxyauth_plugin_path)</span><br><span class="line">browser = webdriver.Chrome(options=options)</span><br><span class="line">browser.get(<span class="string">"https://httpbin.org/get?show_env=1"</span>)</span><br><span class="line">browser.get_screenshot_as_file(<span class="string">"httpbin.png"</span>)</span><br><span class="line">browser.close()</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    
      
      
    <summary type="html">&lt;div class=&quot;note info&quot;&gt;
            &lt;p&gt;&lt;a href=&quot;/posts/14489.html&quot;&gt;Selenium &amp;amp; ChromeDriver 全平台安装教程（Mac、Windows、Linux）&lt;/a&gt;&lt;/p&gt;
          </summary>
      
    
    
    
    <category term="爬虫" scheme="https://sitoi.cn/categories/%E7%88%AC%E8%99%AB/"/>
    
    
    <category term="Selenium" scheme="https://sitoi.cn/tags/Selenium/"/>
    
    <category term="ChromeDriver" scheme="https://sitoi.cn/tags/ChromeDriver/"/>
    
    <category term="Proxy" scheme="https://sitoi.cn/tags/Proxy/"/>
    
  </entry>
  
  <entry>
    <title>【Python3 爬虫 js 逆向】今日头条 as、cp、_signature 参数</title>
    <link href="https://sitoi.cn/posts/11194.html"/>
    <id>https://sitoi.cn/posts/11194.html</id>
    <published>2020-07-17T02:58:50.000Z</published>
    <updated>2020-08-19T05:45:51.882Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前情提要"><a href="#前情提要" class="headerlink" title="前情提要"></a>前情提要</h2><div class="note danger">            <p>爬虫具有时效性，此篇文章代码不一定长期有效，但是解决方案通用。</p>          </div><div class="note info">            <p>版本信息：2020-07-17</p>          </div><p>今日头条 <code>web</code> 版的请求主要参数是：<code>as</code>、<code>cp</code>、<code>_signature</code>。</p><ul><li><code>as</code>、<code>cp</code> 比较简单，直接使用 <code>js</code> 源码，或者用 <code>python</code> 编译都可以</li><li><code>_signature</code> 比较复杂</li></ul><h2 id="URL-分析"><a href="#URL-分析" class="headerlink" title="URL 分析"></a>URL 分析</h2><p>随便打开今日头条网页版一个界面，示例这里打开的是 <a href="https://www.toutiao.com/ch/news_hot/">热点分栏</a> 地址：<a href="https://www.toutiao.com/ch/news_hot/">https://www.toutiao.com/ch/news_hot/</a></p><p>我们向下滑动页面，不断加载出新的内容</p><p>按 <code>F12</code> 打开开发者工具，选择 <code>Network</code> 中的 <code>XHR</code> 标签，继续下滑头条网页，观察网页请求链接</p><p>以下为三个示例链接，我们分析一下：</p><figure class="highlight text"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">https://www.toutiao.com/api/pc/feed/?category=news_hot&amp;utm_source=toutiao&amp;widen=1&amp;max_behot_time=0&amp;max_behot_time_tmp=0&amp;tadrequire=true&amp;as=A1E51F21B0A055D&amp;cp=5F10201525DD4E1&amp;_signature=_02B4Z6wo00f01jcKhsgAAIBAdPSMZ6-fGcI3D4JAANLfaIBd69iVqrqwt-Kzkp68yjCiTBebZn4bKtxcot5cz26TAvNJxqWymSmizGkrEL3-TkzTvjaW14sJJpUdGO-qtIjt.n.qWnE26C8g79</span><br><span class="line">https://www.toutiao.com/api/pc/feed/?category=news_hot&amp;utm_source=toutiao&amp;widen=1&amp;max_behot_time=1594880609&amp;max_behot_time_tmp=1594880609&amp;tadrequire=true&amp;as=A1F58F71E04057E&amp;cp=5F1030A557BEAE1&amp;_signature=_02B4Z6wo00901tH42wgAAIBAkgbRpdhpFFbR.d-AAOt8c3CZDocehB19PuHUmDrMDvCRZp9PXbVULneN4NWmDbAaPPGPWLtRA9--LfxHyF7itVXaG6r5K8bMdDlZeFZqFmVD3ExhcFH9u52b84</span><br><span class="line">https://www.toutiao.com/api/pc/feed/?category=news_hot&amp;utm_source=toutiao&amp;widen=1&amp;max_behot_time=1594869246&amp;max_behot_time_tmp=1594869246&amp;tadrequire=true&amp;as=A1B5EF51300180F&amp;cp=5F10A138508FDE1&amp;_signature=_02B4Z6wo00501-pBU5QAAIBBqb9ZOOz-JLfqRFcAAKWKddCx4Y7Ps7qRC.B89m1IPx7kVtIM9Dy4i2lN8gSXryJypKZG7gVFrub3gVeiJxy8SjWeeg8O1c4-OQN2YJLbXyVanlfiHvufxjHi59</span><br></pre></td></tr></tbody></table></figure><p>经过比较发现关键变量有：<code>max_behot_time</code>、<code>as</code>、<code>cp</code>、_<code>signature</code>，接下来我们就对这四个变量进行分析。</p><h2 id="max-behot-time-分析"><a href="#max-behot-time-分析" class="headerlink" title="max_behot_time 分析"></a>max_behot_time 分析</h2><p><code>max_behot_time</code> 的数值看似是时间戳，但是比较发现，并不是访问链接时的真实时间戳。</p><p>推断是由特定函数生成。</p><p>我们观察一下网页请求返回的 <code>json</code> 数据。发现除了返回的新闻内容之外，还有一个 <code>next</code>，包含 <code>max_behot_time</code> 的值。</p><p><img src="https://cdn.jsdelivr.net/gh/Sitoi/cdn/img/toutiao/max_behot_time.png" alt="max_behot_time"></p><p>通过比较发现，这个 <code>next</code> 中 <code>max_behot_time</code> 的值，正是页面下滑时，下一个请求 <code>url</code> 中 <code>max_behot_time</code>。</p><p>由于头条没有明确的页码，于是判断由 <code>max_behot_time</code> 的数值充当 <code>页码</code>。由于 <code>next</code> 的值可以直接获取，我们就不必分析其生成函数了。</p><h2 id="as、cp-分析"><a href="#as、cp-分析" class="headerlink" title="as、cp 分析"></a>as、cp 分析</h2><p>按 <code>F12</code> 打开开发者工具，选择 <code>Network</code> 按 <code>Ctrl + F</code> 进入全局搜索，搜索 <code>as</code> 。</p><p>因为词太短，我们发现了上百条数据。想找 <code>as</code> 的生成函数犹如大海捞针。</p><p><img src="https://cdn.jsdelivr.net/gh/Sitoi/cdn/img/toutiao/as.png" alt="as"></p><p>换个思路，我们可以查一下 <code>max_behot_time</code>，在关键函数周围观察一下有没有 <code>as</code>、<code>cp</code> 的生成函数。</p><p>按 <code>F12</code> 打开开发者工具，选择 <code>Network</code> 按 <code>Ctrl + F</code> 进入全局搜索，搜索 <code>max_behot_time</code>。只有一条函数，格式化代码后观察：</p><p><img src="https://cdn.jsdelivr.net/gh/Sitoi/cdn/img/toutiao/findas.png" alt="as"></p><p>我们不必看 <code>max_behot_time</code>，正好它下方有 <code>as</code>、<code>cp</code> 的函数。为了判断是不是我们要的值，我们在函数结尾处打断点，刷新网页，查看 <code>as</code>、<code>cp</code> 的数值。</p><p><img src="https://cdn.jsdelivr.net/gh/Sitoi/cdn/img/toutiao/getHoney.png" alt="getHoney"></p><p>正是我们需要的 as、cp 的值，再观察函数，由 e 函数生成，即上图画红圈部分。关键函数为 <code>ascp.getHoney</code> ，我们把鼠标放在 <code>ascp.getHoney</code> 上跳转到相关函数。</p><p><img src="https://cdn.jsdelivr.net/gh/Sitoi/cdn/img/toutiao/ascpmd5.png" alt="ascpmd5"></p><p>这里就是 <code>as</code>、<code>cp</code> 的计算函数了。 <code>i = md5(t)</code> 使用的是 md5 加密，感兴趣的朋友可以深入研究一下。我们可以直接将 js 代码转换为 <code>python</code> 代码，方便调用。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_honey</span>():</span></span><br><span class="line">    t = int(time.time())</span><br><span class="line">    e = hex(t).upper()[<span class="number">2</span>:]</span><br><span class="line">    md = hashlib.md5()</span><br><span class="line">    md.update(str(t).encode(<span class="string">'utf-8'</span>))</span><br><span class="line">    i = str(md.hexdigest()).upper()</span><br><span class="line">    <span class="keyword">if</span> len(e) != <span class="number">8</span>:</span><br><span class="line">        <span class="keyword">return</span> {<span class="string">'as'</span>: <span class="string">"479BB4B7254C150"</span>, <span class="string">'cp'</span>: <span class="string">"7E0AC8874BB0985"</span>}</span><br><span class="line">    s = r = <span class="string">''</span></span><br><span class="line">    <span class="keyword">for</span> k <span class="keyword">in</span> range(<span class="number">0</span>, <span class="number">5</span>):</span><br><span class="line">        s = s + i[:<span class="number">5</span>][k] + e[k]</span><br><span class="line">        r = r + e[k+<span class="number">3</span>] + i[<span class="number">-5</span>:][k]</span><br><span class="line">    <span class="keyword">return</span> {<span class="string">'as'</span>: <span class="string">"A1"</span> + s + e[<span class="number">-3</span>:], <span class="string">'cp'</span>: e[:<span class="number">3</span>] + r + <span class="string">"E1"</span>}</span><br></pre></td></tr></tbody></table></figure><p>到这里我们就获取到了 <code>as</code>、<code>cp</code> 的值了。</p><h2 id="signature-分析"><a href="#signature-分析" class="headerlink" title="_signature 分析"></a>_signature 分析</h2><p>按 <code>F12</code> 打开开发者工具，选择 <code>Network</code> 按 <code>Ctrl + F</code> 进入全局搜索，搜索 <code>_signature</code>。</p><p>我们看到两条结果。两条都看一下：第一条是构造函数，第二条只是调用了值。我们分析第一条。</p><p><img src="https://cdn.jsdelivr.net/gh/Sitoi/cdn/img/toutiao/signature.png" alt="signature"></p><p>在关键函数结尾行打断点，刷新页面。等待页面解析完成后，鼠标放在 <code>_signature</code> 上，看到了我们想要的值。仔细观察，<code>_signature</code> 的值由 <code>tacSign</code> 函数生成。</p><p><img src="https://cdn.jsdelivr.net/gh/Sitoi/cdn/img/toutiao/tacsign.png" alt="tacsign"></p><p>鼠标放在 <code>tacSign</code> 上，点击上方的 <code>f tacSign(e,t)</code> 跳转到相关函数。见下图</p><p><img src="https://cdn.jsdelivr.net/gh/Sitoi/cdn/img/toutiao/tacsign_func.png" alt="tacsign_func"></p><p>把上一个函数打的断点取消！然后在 <code>tacSign</code> 函数结尾行打断点，点击下图蓝色箭头 <code>F8</code> ，刷新界面。</p><p><img src="https://cdn.jsdelivr.net/gh/Sitoi/cdn/img/toutiao/f8.png" alt="f8"></p><p>可以看到 <code>i</code> 是我们想要的值，由 <code>window.byted_acrawler.sign(o)</code> 生成，参数 <code>o</code> 为访问链接。</p><div class="note info">            <p>正常流程为先获取 <code>as</code>、<code>cp</code> 值，然后构造链接作为参数 <code>o</code> 调用 <code>window.byted_acrawler.sign</code> 得到 _<code>signature</code></p>          </div><p>鼠标放在 <code>window.byted_acrawler.sign</code> 上，点击弹出的 <code>f e()</code>，跳转到目标函数。</p><p><img src="https://cdn.jsdelivr.net/gh/Sitoi/cdn/img/toutiao/arguments.png" alt="arguments"></p><p>跳转到这里，看到这个千万别蒙蔽，这只是一个超级大的函数而已，大概 500 行。</p><p>我们不必完全看懂，把整个 js 文件考出来即可。</p><p>自己拷贝就好，我这里不贴完整代码了，近 500 行，只放一下开头和结尾</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> _typeof = <span class="string">"function"</span> == <span class="keyword">typeof</span> <span class="built_in">Symbol</span> &amp;&amp; <span class="string">"symbol"</span> == <span class="keyword">typeof</span> <span class="built_in">Symbol</span>.iterator ? <span class="function"><span class="keyword">function</span>(<span class="params">f</span>) </span>{</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">typeof</span> f</span><br><span class="line">}</span><br><span class="line">: <span class="function"><span class="keyword">function</span>(<span class="params">f</span>) </span>{</span><br><span class="line">    <span class="keyword">return</span> f &amp;&amp; <span class="string">"function"</span> == <span class="keyword">typeof</span> <span class="built_in">Symbol</span> &amp;&amp; f.constructor === <span class="built_in">Symbol</span> &amp;&amp; f !== <span class="built_in">Symbol</span>.prototype ? <span class="string">"symbol"</span> : <span class="keyword">typeof</span> f</span><br><span class="line">}</span><br><span class="line">;</span><br><span class="line">TAC = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>{</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">f, a, b, d, c, r</span>) </span>{</span><br><span class="line">        ...</span><br><span class="line">    }</span><br><span class="line">}(),</span><br><span class="line">TAC(<span class="string">"484e4f4a4......"</span>, []);</span><br></pre></td></tr></tbody></table></figure><p>我们把上述代码保存为单独的文件，比如 <code>sign.js</code></p><p>在结尾加上两行代码测试一下输出：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sign = <span class="built_in">window</span>.byted_acrawler.sign({<span class="attr">url</span>:<span class="string">"https://www.toutiao.com/api/pc/feed/?category=news_hot&amp;utm_source=toutiao&amp;widen=1&amp;max_behot_time=1594869246&amp;max_behot_time_tmp=1594869246&amp;tadrequire=true&amp;as=A1B5EF51300180F&amp;cp=5F10A138508FDE1"</span>});</span><br><span class="line"><span class="built_in">console</span>.log(sign);</span><br></pre></td></tr></tbody></table></figure><p>我是在 <code>Pycharm</code> 中安装了 <code>node.js</code> 插件，所以可以在 <code>Pycharm</code> 中直接运行。</p><h2 id="js-运行报错"><a href="#js-运行报错" class="headerlink" title="js 运行报错"></a>js 运行报错</h2><h3 id="window-is-not-defined"><a href="#window-is-not-defined" class="headerlink" title="window is not defined"></a>window is not defined</h3><p><strong>错误信息</strong></p><p>运行 js，报错信息如下：</p><p><img src="https://cdn.jsdelivr.net/gh/Sitoi/cdn/img/toutiao/windowisnotdefined.png" alt="window is not defined"></p><p><strong>解决方案</strong></p><p>在开头添加一下 <code>window</code></p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span> = <span class="built_in">global</span>;</span><br></pre></td></tr></tbody></table></figure><h3 id="Cannot-read-property-‘href’-of-undefined"><a href="#Cannot-read-property-‘href’-of-undefined" class="headerlink" title="Cannot read property ‘href’ of undefined"></a>Cannot read property ‘href’ of undefined</h3><p><strong>错误信息</strong></p><p>运行 js，报错信息如下：</p><p><img src="https://cdn.jsdelivr.net/gh/Sitoi/cdn/img/toutiao/hrefofundefined.png" alt="href of undefined"></p><p><strong>解决方案</strong></p><p>用<code>jsdom</code> 模拟环境</p><p>安装好 <code>node.js</code> 后，在命令行模式下使用 <code>npm install jsdom</code> 安装。</p><p>安装好后，写一个最简单的界面，然后添加头条的 <code>href</code>。</p><p>那么头条的 <code>href</code> 在哪里呢？我们打开头条页面，按 <code>F12</code> 打开开发者工具,选择 <code>Console</code>，输入 <code>window.location</code> 后回车，可见下图：</p><p><img src="https://cdn.jsdelivr.net/gh/Sitoi/cdn/img/toutiao/window.location.png" alt="window.location"></p><p>我们在 <code>window.location</code> 中添加 <code>href</code> 即可，为了更安全，我们把 <code>location</code> 中其他参数也添加进去。</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> jsdom = <span class="built_in">require</span>(<span class="string">"jsdom"</span>);</span><br><span class="line"><span class="keyword">const</span> { JSDOM } = jsdom;</span><br><span class="line"><span class="keyword">const</span> dom = <span class="keyword">new</span> JSDOM(<span class="string">`&lt;!DOCTYPE html&gt;&lt;p&gt;Hello world&lt;/p&gt;`</span>);</span><br><span class="line"><span class="built_in">window</span> = <span class="built_in">global</span>;</span><br><span class="line"><span class="keyword">var</span> <span class="built_in">document</span> = dom.window.document;</span><br><span class="line"><span class="keyword">var</span> params = {</span><br><span class="line">    location:{</span><br><span class="line">        hash: <span class="string">""</span>,</span><br><span class="line">        host: <span class="string">"www.toutiao.com"</span>,</span><br><span class="line">        hostname: <span class="string">"www.toutiao.com"</span>,</span><br><span class="line">        href: <span class="string">"https://www.toutiao.com"</span>,</span><br><span class="line">        origin: <span class="string">"https://www.toutiao.com"</span>,</span><br><span class="line">        pathname: <span class="string">"/"</span>,</span><br><span class="line">        port: <span class="string">""</span>,</span><br><span class="line">        protocol: <span class="string">"https:"</span>,</span><br><span class="line">        search: <span class="string">""</span>,</span><br><span class="line">    },</span><br><span class="line">};</span><br><span class="line"><span class="built_in">Object</span>.assign(<span class="built_in">window</span>,params);</span><br><span class="line"><span class="built_in">window</span>.document = <span class="built_in">document</span>;</span><br><span class="line"><span class="comment">// ----------这里是复制的近 500 行代码 ----------</span></span><br><span class="line"><span class="keyword">var</span> _typeof = <span class="string">"function"</span> == <span class="keyword">typeof</span> <span class="built_in">Symbol</span> &amp;&amp; <span class="string">"symbol"</span> == <span class="keyword">typeof</span> <span class="built_in">Symbol</span>.iterator ? <span class="function"><span class="keyword">function</span>(<span class="params">f</span>) </span>{</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">typeof</span> f</span><br><span class="line">}</span><br><span class="line">: <span class="function"><span class="keyword">function</span>(<span class="params">f</span>) </span>{</span><br><span class="line">    <span class="keyword">return</span> f &amp;&amp; <span class="string">"function"</span> == <span class="keyword">typeof</span> <span class="built_in">Symbol</span> &amp;&amp; f.constructor === <span class="built_in">Symbol</span> &amp;&amp; f !== <span class="built_in">Symbol</span>.prototype ? <span class="string">"symbol"</span> : <span class="keyword">typeof</span> f</span><br><span class="line">}</span><br><span class="line">;</span><br><span class="line">TAC = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>{</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">f, a, b, d, c, r</span>) </span>{</span><br><span class="line">        ...</span><br><span class="line">    }</span><br><span class="line">}(),</span><br><span class="line">TAC(<span class="string">"484e4f4a4......"</span>, []);</span><br><span class="line"><span class="comment">// ----------------------------------------</span></span><br><span class="line"></span><br><span class="line">sign = <span class="built_in">window</span>.byted_acrawler.sign({<span class="attr">url</span>:<span class="string">"https://www.toutiao.com/api/pc/feed/?category=news_hot&amp;utm_source=toutiao&amp;widen=1&amp;max_behot_time=1594869246&amp;max_behot_time_tmp=1594869246&amp;tadrequire=true&amp;as=A1B5EF51300180F&amp;cp=5F10A138508FDE1"</span>});</span><br><span class="line"><span class="built_in">console</span>.log(sign);</span><br></pre></td></tr></tbody></table></figure><h3 id="Cannot-read-property-‘userAgent’-of-undefined"><a href="#Cannot-read-property-‘userAgent’-of-undefined" class="headerlink" title="Cannot read property ‘userAgent’ of undefined"></a>Cannot read property ‘userAgent’ of undefined</h3><p><strong>错误信息</strong></p><p>运行 js，报错信息如下：</p><p><img src="https://cdn.jsdelivr.net/gh/Sitoi/cdn/img/toutiao/userAgentofundefined.png" alt="userAgent of undefined"></p><p><strong>解决方案</strong></p><p>打开头条页面，按 <code>F12</code> 打开开发者工具，选择 <code>Console</code>，输入 <code>window.navigator</code> 后回车，可见下图：</p><p><img src="https://cdn.jsdelivr.net/gh/Sitoi/cdn/img/toutiao/window.navigator.png" alt="window.navigator"></p><p>在 <code>window.navigator </code>中添加 <code>userAgent</code> 即可，为了更安全，把 <code>navigator</code> 中其他参数也添加进去</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> jsdom = <span class="built_in">require</span>(<span class="string">"jsdom"</span>);</span><br><span class="line"><span class="keyword">const</span> { JSDOM } = jsdom;</span><br><span class="line"><span class="keyword">const</span> dom = <span class="keyword">new</span> JSDOM(<span class="string">`&lt;!DOCTYPE html&gt;&lt;p&gt;Hello world&lt;/p&gt;`</span>);</span><br><span class="line"><span class="built_in">window</span> = <span class="built_in">global</span>;</span><br><span class="line"><span class="keyword">var</span> <span class="built_in">document</span> = dom.window.document;</span><br><span class="line"><span class="keyword">var</span> params = {</span><br><span class="line">    location:{</span><br><span class="line">        hash: <span class="string">""</span>,</span><br><span class="line">        host: <span class="string">"www.toutiao.com"</span>,</span><br><span class="line">        hostname: <span class="string">"www.toutiao.com"</span>,</span><br><span class="line">        href: <span class="string">"https://www.toutiao.com"</span>,</span><br><span class="line">        origin: <span class="string">"https://www.toutiao.com"</span>,</span><br><span class="line">        pathname: <span class="string">"/"</span>,</span><br><span class="line">        port: <span class="string">""</span>,</span><br><span class="line">        protocol: <span class="string">"https:"</span>,</span><br><span class="line">        search: <span class="string">""</span>,</span><br><span class="line">    },</span><br><span class="line">    navigator:{</span><br><span class="line">        appCodeName: <span class="string">"Mozilla"</span>,</span><br><span class="line">        appName: <span class="string">"Netscape"</span>,</span><br><span class="line">        appVersion: <span class="string">"5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.116 Safari/537.36"</span>,</span><br><span class="line">        cookieEnabled: <span class="literal">true</span>,</span><br><span class="line">        deviceMemory: <span class="number">8</span>,</span><br><span class="line">        doNotTrack: <span class="literal">null</span>,</span><br><span class="line">        hardwareConcurrency: <span class="number">4</span>,</span><br><span class="line">        language: <span class="string">"zh-CN"</span>,</span><br><span class="line">        languages: [<span class="string">"zh-CN"</span>, <span class="string">"zh"</span>],</span><br><span class="line">        maxTouchPoints: <span class="number">0</span>,</span><br><span class="line">        onLine: <span class="literal">true</span>,</span><br><span class="line">        platform: <span class="string">"Win32"</span>,</span><br><span class="line">        product: <span class="string">"Gecko"</span>,</span><br><span class="line">        productSub: <span class="string">"20030107"</span>,</span><br><span class="line">        userAgent: <span class="string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.116 Safari/537.36"</span>,</span><br><span class="line">        vendor: <span class="string">"Google Inc."</span>,</span><br><span class="line">        vendorSub: <span class="string">""</span>,</span><br><span class="line">    },</span><br><span class="line">};</span><br><span class="line"><span class="built_in">Object</span>.assign(<span class="built_in">window</span>,params);</span><br><span class="line"><span class="built_in">window</span>.document = <span class="built_in">document</span>;</span><br><span class="line"><span class="comment">// ----------这里是复制的近 500 行代码 ----------</span></span><br><span class="line"><span class="keyword">var</span> _typeof = <span class="string">"function"</span> == <span class="keyword">typeof</span> <span class="built_in">Symbol</span> &amp;&amp; <span class="string">"symbol"</span> == <span class="keyword">typeof</span> <span class="built_in">Symbol</span>.iterator ? <span class="function"><span class="keyword">function</span>(<span class="params">f</span>) </span>{</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">typeof</span> f</span><br><span class="line">}</span><br><span class="line">: <span class="function"><span class="keyword">function</span>(<span class="params">f</span>) </span>{</span><br><span class="line">    <span class="keyword">return</span> f &amp;&amp; <span class="string">"function"</span> == <span class="keyword">typeof</span> <span class="built_in">Symbol</span> &amp;&amp; f.constructor === <span class="built_in">Symbol</span> &amp;&amp; f !== <span class="built_in">Symbol</span>.prototype ? <span class="string">"symbol"</span> : <span class="keyword">typeof</span> f</span><br><span class="line">}</span><br><span class="line">;</span><br><span class="line">TAC = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>{</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">f, a, b, d, c, r</span>) </span>{</span><br><span class="line">        ...</span><br><span class="line">    }</span><br><span class="line">}(),</span><br><span class="line">TAC(<span class="string">"484e4f4a4......"</span>, []);</span><br><span class="line"><span class="comment">// ----------------------------------------</span></span><br><span class="line"></span><br><span class="line">sign = <span class="built_in">window</span>.byted_acrawler.sign({<span class="attr">url</span>:<span class="string">"https://www.toutiao.com/api/pc/feed/?category=news_hot&amp;utm_source=toutiao&amp;widen=1&amp;max_behot_time=1594869246&amp;max_behot_time_tmp=1594869246&amp;tadrequire=true&amp;as=A1B5EF51300180F&amp;cp=5F10A138508FDE1"</span>});</span><br><span class="line"><span class="built_in">console</span>.log(sign);</span><br></pre></td></tr></tbody></table></figure><p>运行一下，成功输出结果如下：</p><figure class="highlight text"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">_02B4Z6wo00f0122Q2eAAAIBAkOB99iCRDv9tkt1AAIR91a</span><br></pre></td></tr></tbody></table></figure><p>但是，这只是 <code>_signature</code> 的一部分。是不是遗漏了什么？</p><p>再全局搜索 <code>window.byted_acrawler</code>，在网页源码中发现有一段 <code>js</code> 生成的代码：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.byted_acrawler &amp;&amp; <span class="built_in">window</span>.byted_acrawler.init({</span><br><span class="line">    aid: <span class="number">24</span>,</span><br><span class="line">    dfp: <span class="literal">true</span>,</span><br><span class="line">    intercept: <span class="literal">true</span>, <span class="comment">// 开启拦截器后，所有符合下面列表条件的 url 都会自动加上 _signature 参数</span></span><br><span class="line">    <span class="comment">// SDK 会拦截所有使用 XMLHTTPRequest 发送的请求，包括第三方库发出的，所以请严格设置 enablePathList</span></span><br><span class="line">    enablePathList: [</span><br><span class="line">      <span class="string">'/c/ugc/video/publish/'</span></span><br><span class="line">    ],</span><br><span class="line">    urlRewriteRules: [</span><br><span class="line">      [<span class="string">'/c/ugc/video/publish/'</span>, <span class="string">'https://cdn.jsdelivr.net/gh/Sitoi/cdn/img/toutiao/c/ugc/video/publish/'</span>]</span><br><span class="line">    ]</span><br><span class="line">  }</span><br><span class="line">)</span><br></pre></td></tr></tbody></table></figure><p>把上述代码 <code>sdk</code> 拦截去掉，然后插入 <code>sign.js</code> 中运行一下：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> jsdom = <span class="built_in">require</span>(<span class="string">"jsdom"</span>);</span><br><span class="line"><span class="keyword">const</span> { JSDOM } = jsdom;</span><br><span class="line"><span class="keyword">const</span> dom = <span class="keyword">new</span> JSDOM(<span class="string">`&lt;!DOCTYPE html&gt;&lt;p&gt;Hello world&lt;/p&gt;`</span>);</span><br><span class="line"><span class="built_in">window</span> = <span class="built_in">global</span>;</span><br><span class="line"><span class="keyword">var</span> <span class="built_in">document</span> = dom.window.document;</span><br><span class="line"><span class="keyword">var</span> params = {</span><br><span class="line">    location:{</span><br><span class="line">        hash: <span class="string">""</span>,</span><br><span class="line">        host: <span class="string">"www.toutiao.com"</span>,</span><br><span class="line">        hostname: <span class="string">"www.toutiao.com"</span>,</span><br><span class="line">        href: <span class="string">"https://www.toutiao.com"</span>,</span><br><span class="line">        origin: <span class="string">"https://www.toutiao.com"</span>,</span><br><span class="line">        pathname: <span class="string">"/"</span>,</span><br><span class="line">        port: <span class="string">""</span>,</span><br><span class="line">        protocol: <span class="string">"https:"</span>,</span><br><span class="line">        search: <span class="string">""</span>,</span><br><span class="line">    },</span><br><span class="line">    navigator:{</span><br><span class="line">        appCodeName: <span class="string">"Mozilla"</span>,</span><br><span class="line">        appName: <span class="string">"Netscape"</span>,</span><br><span class="line">        appVersion: <span class="string">"5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.116 Safari/537.36"</span>,</span><br><span class="line">        cookieEnabled: <span class="literal">true</span>,</span><br><span class="line">        deviceMemory: <span class="number">8</span>,</span><br><span class="line">        doNotTrack: <span class="literal">null</span>,</span><br><span class="line">        hardwareConcurrency: <span class="number">4</span>,</span><br><span class="line">        language: <span class="string">"zh-CN"</span>,</span><br><span class="line">        languages: [<span class="string">"zh-CN"</span>, <span class="string">"zh"</span>],</span><br><span class="line">        maxTouchPoints: <span class="number">0</span>,</span><br><span class="line">        onLine: <span class="literal">true</span>,</span><br><span class="line">        platform: <span class="string">"Win32"</span>,</span><br><span class="line">        product: <span class="string">"Gecko"</span>,</span><br><span class="line">        productSub: <span class="string">"20030107"</span>,</span><br><span class="line">        userAgent: <span class="string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.116 Safari/537.36"</span>,</span><br><span class="line">        vendor: <span class="string">"Google Inc."</span>,</span><br><span class="line">        vendorSub: <span class="string">""</span>,</span><br><span class="line">    },</span><br><span class="line">};</span><br><span class="line"><span class="built_in">Object</span>.assign(<span class="built_in">window</span>,params);</span><br><span class="line"><span class="built_in">window</span>.document = <span class="built_in">document</span>;</span><br><span class="line"><span class="comment">// ----------这里是复制的近 500 行代码 ----------</span></span><br><span class="line"><span class="keyword">var</span> _typeof = <span class="string">"function"</span> == <span class="keyword">typeof</span> <span class="built_in">Symbol</span> &amp;&amp; <span class="string">"symbol"</span> == <span class="keyword">typeof</span> <span class="built_in">Symbol</span>.iterator ? <span class="function"><span class="keyword">function</span>(<span class="params">f</span>) </span>{</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">typeof</span> f</span><br><span class="line">}</span><br><span class="line">: <span class="function"><span class="keyword">function</span>(<span class="params">f</span>) </span>{</span><br><span class="line">    <span class="keyword">return</span> f &amp;&amp; <span class="string">"function"</span> == <span class="keyword">typeof</span> <span class="built_in">Symbol</span> &amp;&amp; f.constructor === <span class="built_in">Symbol</span> &amp;&amp; f !== <span class="built_in">Symbol</span>.prototype ? <span class="string">"symbol"</span> : <span class="keyword">typeof</span> f</span><br><span class="line">}</span><br><span class="line">;</span><br><span class="line">TAC = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>{</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">f, a, b, d, c, r</span>) </span>{</span><br><span class="line">        ...</span><br><span class="line">    }</span><br><span class="line">}(),</span><br><span class="line">TAC(<span class="string">"484e4f4a4......"</span>, []);</span><br><span class="line"><span class="comment">// ----------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">window</span>.byted_acrawler &amp;&amp; <span class="built_in">window</span>.byted_acrawler.init({</span><br><span class="line">    aid: <span class="number">24</span>,</span><br><span class="line">    dfp: <span class="literal">true</span>,</span><br><span class="line">})</span><br><span class="line"></span><br><span class="line">sign = <span class="built_in">window</span>.byted_acrawler.sign({<span class="attr">url</span>:<span class="string">"https://www.toutiao.com/api/pc/feed/?category=news_hot&amp;utm_source=toutiao&amp;widen=1&amp;max_behot_time=1594869246&amp;max_behot_time_tmp=1594869246&amp;tadrequire=true&amp;as=A1B5EF51300180F&amp;cp=5F10A138508FDE1"</span>});</span><br><span class="line"><span class="built_in">console</span>.log(sign);</span><br></pre></td></tr></tbody></table></figure><h3 id="Cannot-read-property-‘width’-of-undefined"><a href="#Cannot-read-property-‘width’-of-undefined" class="headerlink" title="Cannot read property ‘width’ of undefined"></a>Cannot read property ‘width’ of undefined</h3><p><strong>错误信息</strong></p><p>运行 js，报错信息如下：</p><p><img src="https://cdn.jsdelivr.net/gh/Sitoi/cdn/img/toutiao/widthofundefined.png" alt="width of undefined"></p><p><strong>解决方案</strong></p><p>打开头条页面，按 <code>F12</code> 打开开发者工具，选择 <code>Console</code>，输入 <code>window.screen</code> 后回车，可见下图：</p><p><img src="https://cdn.jsdelivr.net/gh/Sitoi/cdn/img/toutiao/window.screen.png" alt="window.screen"></p><p>在 <code>window.screen</code> 中添加 <code>width</code> 即可，为了更安全，把 <code>screen</code> 中其他参数也添加进去。</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> jsdom = <span class="built_in">require</span>(<span class="string">"jsdom"</span>);</span><br><span class="line"><span class="keyword">const</span> { JSDOM } = jsdom;</span><br><span class="line"><span class="keyword">const</span> dom = <span class="keyword">new</span> JSDOM(<span class="string">`&lt;!DOCTYPE html&gt;&lt;p&gt;Hello world&lt;/p&gt;`</span>);</span><br><span class="line"><span class="built_in">window</span> = <span class="built_in">global</span>;</span><br><span class="line"><span class="keyword">var</span> <span class="built_in">document</span> = dom.window.document;</span><br><span class="line"><span class="keyword">var</span> params = {</span><br><span class="line">    location:{</span><br><span class="line">        hash: <span class="string">""</span>,</span><br><span class="line">        host: <span class="string">"www.toutiao.com"</span>,</span><br><span class="line">        hostname: <span class="string">"www.toutiao.com"</span>,</span><br><span class="line">        href: <span class="string">"https://www.toutiao.com"</span>,</span><br><span class="line">        origin: <span class="string">"https://www.toutiao.com"</span>,</span><br><span class="line">        pathname: <span class="string">"/"</span>,</span><br><span class="line">        port: <span class="string">""</span>,</span><br><span class="line">        protocol: <span class="string">"https:"</span>,</span><br><span class="line">        search: <span class="string">""</span>,</span><br><span class="line">    },</span><br><span class="line">    navigator:{</span><br><span class="line">        appCodeName: <span class="string">"Mozilla"</span>,</span><br><span class="line">        appName: <span class="string">"Netscape"</span>,</span><br><span class="line">        appVersion: <span class="string">"5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.116 Safari/537.36"</span>,</span><br><span class="line">        cookieEnabled: <span class="literal">true</span>,</span><br><span class="line">        deviceMemory: <span class="number">8</span>,</span><br><span class="line">        doNotTrack: <span class="literal">null</span>,</span><br><span class="line">        hardwareConcurrency: <span class="number">4</span>,</span><br><span class="line">        language: <span class="string">"zh-CN"</span>,</span><br><span class="line">        languages: [<span class="string">"zh-CN"</span>, <span class="string">"zh"</span>],</span><br><span class="line">        maxTouchPoints: <span class="number">0</span>,</span><br><span class="line">        onLine: <span class="literal">true</span>,</span><br><span class="line">        platform: <span class="string">"Win32"</span>,</span><br><span class="line">        product: <span class="string">"Gecko"</span>,</span><br><span class="line">        productSub: <span class="string">"20030107"</span>,</span><br><span class="line">        userAgent: <span class="string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.116 Safari/537.36"</span>,</span><br><span class="line">        vendor: <span class="string">"Google Inc."</span>,</span><br><span class="line">        vendorSub: <span class="string">""</span>,</span><br><span class="line">    },</span><br><span class="line">    <span class="string">"screen"</span>:{</span><br><span class="line">        availHeight: <span class="number">1040</span>,</span><br><span class="line">        availLeft: <span class="number">0</span>,</span><br><span class="line">        availTop: <span class="number">0</span>,</span><br><span class="line">        availWidth: <span class="number">1920</span>,</span><br><span class="line">        colorDepth: <span class="number">24</span>,</span><br><span class="line">        height: <span class="number">1080</span>,</span><br><span class="line">        pixelDepth: <span class="number">24</span>,</span><br><span class="line">        width: <span class="number">1920</span>,</span><br><span class="line">    }</span><br><span class="line">};</span><br><span class="line"><span class="built_in">Object</span>.assign(<span class="built_in">window</span>,params);</span><br><span class="line"><span class="built_in">window</span>.document = <span class="built_in">document</span>;</span><br><span class="line"><span class="comment">// ----------这里是复制的近 500 行代码 ----------</span></span><br><span class="line"><span class="keyword">var</span> _typeof = <span class="string">"function"</span> == <span class="keyword">typeof</span> <span class="built_in">Symbol</span> &amp;&amp; <span class="string">"symbol"</span> == <span class="keyword">typeof</span> <span class="built_in">Symbol</span>.iterator ? <span class="function"><span class="keyword">function</span>(<span class="params">f</span>) </span>{</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">typeof</span> f</span><br><span class="line">}</span><br><span class="line">: <span class="function"><span class="keyword">function</span>(<span class="params">f</span>) </span>{</span><br><span class="line">    <span class="keyword">return</span> f &amp;&amp; <span class="string">"function"</span> == <span class="keyword">typeof</span> <span class="built_in">Symbol</span> &amp;&amp; f.constructor === <span class="built_in">Symbol</span> &amp;&amp; f !== <span class="built_in">Symbol</span>.prototype ? <span class="string">"symbol"</span> : <span class="keyword">typeof</span> f</span><br><span class="line">}</span><br><span class="line">;</span><br><span class="line">TAC = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>{</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">f, a, b, d, c, r</span>) </span>{</span><br><span class="line">        ...</span><br><span class="line">    }</span><br><span class="line">}(),</span><br><span class="line">TAC(<span class="string">"484e4f4a4......"</span>, []);</span><br><span class="line"><span class="comment">// ----------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">window</span>.byted_acrawler &amp;&amp; <span class="built_in">window</span>.byted_acrawler.init({</span><br><span class="line">    aid: <span class="number">24</span>,</span><br><span class="line">    dfp: <span class="literal">true</span>,</span><br><span class="line">})</span><br><span class="line"></span><br><span class="line">sign = <span class="built_in">window</span>.byted_acrawler.sign({<span class="attr">url</span>:<span class="string">"https://www.toutiao.com/api/pc/feed/?category=news_hot&amp;utm_source=toutiao&amp;widen=1&amp;max_behot_time=1594869246&amp;max_behot_time_tmp=1594869246&amp;tadrequire=true&amp;as=A1B5EF51300180F&amp;cp=5F10A138508FDE1"</span>});</span><br><span class="line"><span class="built_in">console</span>.log(sign);</span><br></pre></td></tr></tbody></table></figure><p>再运行一下，没有报错了。返回值如下：</p><figure class="highlight text"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">_02B4Z6wo00f01erPHLwAAIBCF7-4qJivPAXqzRgAACWl0b</span><br></pre></td></tr></tbody></table></figure><h3 id="signature-长度不一致"><a href="#signature-长度不一致" class="headerlink" title="_signature 长度不一致"></a>_signature 长度不一致</h3><p>多方调查发现：是真实网页是带 <code>cookie</code> 访问的，我们的模拟环境没有 <code>cookie</code></p><p><strong>解决方案</strong></p><p>在模拟环境中添加 <code>cookie</code></p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> jsdom = <span class="built_in">require</span>(<span class="string">"jsdom"</span>);</span><br><span class="line"><span class="keyword">const</span> { JSDOM } = jsdom;</span><br><span class="line"><span class="keyword">const</span> dom = <span class="keyword">new</span> JSDOM(<span class="string">`&lt;!DOCTYPE html&gt;&lt;p&gt;Hello world&lt;/p&gt;`</span>);</span><br><span class="line"><span class="built_in">window</span> = <span class="built_in">global</span>;</span><br><span class="line"><span class="keyword">var</span> <span class="built_in">document</span> = dom.window.document;</span><br><span class="line"><span class="keyword">var</span> params = {</span><br><span class="line">    location:{</span><br><span class="line">        hash: <span class="string">""</span>,</span><br><span class="line">        host: <span class="string">"www.toutiao.com"</span>,</span><br><span class="line">        hostname: <span class="string">"www.toutiao.com"</span>,</span><br><span class="line">        href: <span class="string">"https://www.toutiao.com"</span>,</span><br><span class="line">        origin: <span class="string">"https://www.toutiao.com"</span>,</span><br><span class="line">        pathname: <span class="string">"/"</span>,</span><br><span class="line">        port: <span class="string">""</span>,</span><br><span class="line">        protocol: <span class="string">"https:"</span>,</span><br><span class="line">        search: <span class="string">""</span>,</span><br><span class="line">    },</span><br><span class="line">    navigator:{</span><br><span class="line">        appCodeName: <span class="string">"Mozilla"</span>,</span><br><span class="line">        appName: <span class="string">"Netscape"</span>,</span><br><span class="line">        appVersion: <span class="string">"5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.116 Safari/537.36"</span>,</span><br><span class="line">        cookieEnabled: <span class="literal">true</span>,</span><br><span class="line">        deviceMemory: <span class="number">8</span>,</span><br><span class="line">        doNotTrack: <span class="literal">null</span>,</span><br><span class="line">        hardwareConcurrency: <span class="number">4</span>,</span><br><span class="line">        language: <span class="string">"zh-CN"</span>,</span><br><span class="line">        languages: [<span class="string">"zh-CN"</span>, <span class="string">"zh"</span>],</span><br><span class="line">        maxTouchPoints: <span class="number">0</span>,</span><br><span class="line">        onLine: <span class="literal">true</span>,</span><br><span class="line">        platform: <span class="string">"Win32"</span>,</span><br><span class="line">        product: <span class="string">"Gecko"</span>,</span><br><span class="line">        productSub: <span class="string">"20030107"</span>,</span><br><span class="line">        userAgent: <span class="string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.116 Safari/537.36"</span>,</span><br><span class="line">        vendor: <span class="string">"Google Inc."</span>,</span><br><span class="line">        vendorSub: <span class="string">""</span>,</span><br><span class="line">    },</span><br><span class="line">    <span class="string">"screen"</span>:{</span><br><span class="line">        availHeight: <span class="number">1040</span>,</span><br><span class="line">        availLeft: <span class="number">0</span>,</span><br><span class="line">        availTop: <span class="number">0</span>,</span><br><span class="line">        availWidth: <span class="number">1920</span>,</span><br><span class="line">        colorDepth: <span class="number">24</span>,</span><br><span class="line">        height: <span class="number">1080</span>,</span><br><span class="line">        pixelDepth: <span class="number">24</span>,</span><br><span class="line">        width: <span class="number">1920</span>,</span><br><span class="line">    }</span><br><span class="line">};</span><br><span class="line"><span class="built_in">Object</span>.assign(<span class="built_in">window</span>,params);</span><br><span class="line"><span class="built_in">window</span>.document = <span class="built_in">document</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setCookie</span>(<span class="params">name, value, seconds</span>) </span>{</span><br><span class="line">    seconds = seconds || <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">var</span> expires = <span class="string">""</span>;</span><br><span class="line">    <span class="keyword">if</span> (seconds != <span class="number">0</span> ) {</span><br><span class="line">    <span class="keyword">var</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">    date.setTime(date.getTime()+(seconds*<span class="number">1000</span>));</span><br><span class="line">    expires = <span class="string">"; expires="</span>+date.toGMTString();</span><br><span class="line">    }</span><br><span class="line">    <span class="built_in">document</span>.cookie = name+<span class="string">"="</span>+<span class="built_in">escape</span>(value)+expires+<span class="string">"; path=/"</span>;</span><br><span class="line">}</span><br><span class="line"><span class="comment">// 把自己浏览器的真实 cookie 复制过来即可</span></span><br><span class="line">cookies = <span class="string">"s_v_web_id=xxxxxxxxxxxxxxxxxxxxxxxxxx"</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> cookie <span class="keyword">of</span> cookies.split(<span class="string">";"</span>)){</span><br><span class="line">    tmp = cookie.split(<span class="string">"="</span>);</span><br><span class="line">    setCookie(tmp[<span class="number">0</span>],tmp[<span class="number">1</span>],<span class="number">1800</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// ----------这里是复制的近 500 行代码 ----------</span></span><br><span class="line"><span class="keyword">var</span> _typeof = <span class="string">"function"</span> == <span class="keyword">typeof</span> <span class="built_in">Symbol</span> &amp;&amp; <span class="string">"symbol"</span> == <span class="keyword">typeof</span> <span class="built_in">Symbol</span>.iterator ? <span class="function"><span class="keyword">function</span>(<span class="params">f</span>) </span>{</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">typeof</span> f</span><br><span class="line">}</span><br><span class="line">: <span class="function"><span class="keyword">function</span>(<span class="params">f</span>) </span>{</span><br><span class="line">    <span class="keyword">return</span> f &amp;&amp; <span class="string">"function"</span> == <span class="keyword">typeof</span> <span class="built_in">Symbol</span> &amp;&amp; f.constructor === <span class="built_in">Symbol</span> &amp;&amp; f !== <span class="built_in">Symbol</span>.prototype ? <span class="string">"symbol"</span> : <span class="keyword">typeof</span> f</span><br><span class="line">}</span><br><span class="line">;</span><br><span class="line">TAC = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>{</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">f, a, b, d, c, r</span>) </span>{</span><br><span class="line">        ...</span><br><span class="line">    }</span><br><span class="line">}(),</span><br><span class="line">TAC(<span class="string">"484e4f4a4......"</span>, []);</span><br><span class="line"><span class="comment">// ----------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">window</span>.byted_acrawler &amp;&amp; <span class="built_in">window</span>.byted_acrawler.init({</span><br><span class="line">    aid: <span class="number">24</span>,</span><br><span class="line">    dfp: <span class="literal">true</span>,</span><br><span class="line">})</span><br><span class="line"></span><br><span class="line">sign = <span class="built_in">window</span>.byted_acrawler.sign({<span class="attr">url</span>:<span class="string">"https://www.toutiao.com/api/pc/feed/?category=news_hot&amp;utm_source=toutiao&amp;widen=1&amp;max_behot_time=1594869246&amp;max_behot_time_tmp=1594869246&amp;tadrequire=true&amp;as=A1B5EF51300180F&amp;cp=5F10A138508FDE1"</span>});</span><br><span class="line"><span class="built_in">console</span>.log(sign);</span><br></pre></td></tr></tbody></table></figure><p>运行一下，终于！得到了完整的 <code>_signature</code> 值:</p><figure class="highlight text"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">_02B4Z6wo00f01jc-omQAAIBByk4GctL5ZYo3PKbAANLr40OHsHg8RRe1BK03uca1smyI5DA3wElBPDGI.KcAotMiY1IOIhstbtN3bZIM9xRX0NzP.PoYAaq0JjXmU5cIgLSE03L.57r1BQkJe6</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前情提要&quot;&gt;&lt;a href=&quot;#前情提要&quot; class=&quot;headerlink&quot; title=&quot;前情提要&quot;&gt;&lt;/a&gt;前情提要&lt;/h2&gt;&lt;div class=&quot;note danger&quot;&gt;
            &lt;p&gt;爬虫具有时效性，此篇文章代码不一定长期有效，但是</summary>
      
    
    
    
    <category term="爬虫" scheme="https://sitoi.cn/categories/%E7%88%AC%E8%99%AB/"/>
    
    <category term="js 逆向" scheme="https://sitoi.cn/categories/%E7%88%AC%E8%99%AB/js-%E9%80%86%E5%90%91/"/>
    
    
    <category term="js 逆向" scheme="https://sitoi.cn/tags/js-%E9%80%86%E5%90%91/"/>
    
    <category term="今日头条" scheme="https://sitoi.cn/tags/%E4%BB%8A%E6%97%A5%E5%A4%B4%E6%9D%A1/"/>
    
  </entry>
  
  <entry>
    <title>MongoEngine 常用语法汇总</title>
    <link href="https://sitoi.cn/posts/24744.html"/>
    <id>https://sitoi.cn/posts/24744.html</id>
    <published>2020-06-13T14:54:17.000Z</published>
    <updated>2020-08-19T05:45:51.882Z</updated>
    
    <content type="html"><![CDATA[<h2 id="MongoEngine-查询"><a href="#MongoEngine-查询" class="headerlink" title="MongoEngine 查询"></a>MongoEngine 查询</h2><h3 id="过滤查询"><a href="#过滤查询" class="headerlink" title="过滤查询"></a>过滤查询</h3><p>可以通过调用 <code>QuerySet</code> 对象的关键字参数来对数据查询进行过滤，关键字查询中的键和你想要查询的 <code>Document</code> 中的字段一致：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">users = User.objects(name=<span class="string">'sitoi'</span>)</span><br></pre></td></tr></tbody></table></figure><p>对于内嵌document的字段可以使用 <code>__</code> 来代替对象属性访问语法中的 . 进行访问：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pages = Page.objects(author__country=<span class="string">'chine'</span>)</span><br></pre></td></tr></tbody></table></figure><h3 id="查询操作符"><a href="#查询操作符" class="headerlink" title="查询操作符"></a>查询操作符</h3><p>在查询中也可以使用操作符，只要将其加在关键字的双下划线 <code>__</code> 之后即可：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">young_users = Users.objects(age__lte=<span class="number">18</span>)</span><br></pre></td></tr></tbody></table></figure><p>可用的运算符如下：</p><table><thead><tr><th align="center">符号</th><th align="center">含义</th></tr></thead><tbody><tr><td align="center">ne</td><td align="center">不等于 <code>≠</code></td></tr><tr><td align="center">lt</td><td align="center">小于 <code>&lt;</code></td></tr><tr><td align="center">lte</td><td align="center">小于等于 <code>≤</code></td></tr><tr><td align="center">gt</td><td align="center">大于 <code>&gt;</code></td></tr><tr><td align="center">gte</td><td align="center">大于等于 <code>≥</code></td></tr><tr><td align="center">not</td><td align="center">否定一个标准的检查，需要用在其他操作符之前(e.g. <code>Q(age__not__mod=5)</code>)</td></tr><tr><td align="center">in</td><td align="center">值在 <code>list</code> 中</td></tr><tr><td align="center">nin</td><td align="center">值不在 <code>list</code> 中</td></tr><tr><td align="center">mod</td><td align="center"><code>value % x == y</code>, 其中 <code>x</code> 和 <code>y</code> 为给定的值</td></tr><tr><td align="center">all</td><td align="center"><code>list</code> 里面所有的值</td></tr><tr><td align="center">size</td><td align="center">数组的大小</td></tr><tr><td align="center">exists</td><td align="center">存在这个值</td></tr></tbody></table><h3 id="字符串查询"><a href="#字符串查询" class="headerlink" title="字符串查询"></a>字符串查询</h3><p>以下操作符可以快捷的进行<code>正则查询</code>：</p><table><thead><tr><th align="center">符号</th><th align="center">含义</th></tr></thead><tbody><tr><td align="center">exact</td><td align="center">字符串型字段完全匹配这个值</td></tr><tr><td align="center">iexact</td><td align="center">字符串型字段完全匹配这个值（大小写敏感）</td></tr><tr><td align="center">contains</td><td align="center">字符串字段包含这个值</td></tr><tr><td align="center">icontains</td><td align="center">字符串字段包含这个值（大小写敏感）</td></tr><tr><td align="center">startswith</td><td align="center">字符串字段由这个值开头</td></tr><tr><td align="center">istartswith</td><td align="center">字符串字段由这个值开头（大小写敏感）</td></tr><tr><td align="center">endswith</td><td align="center">字符串字段由这个值结尾</td></tr><tr><td align="center">iendswith</td><td align="center">字符串字段由这个值结尾（大小写敏感）</td></tr><tr><td align="center">match</td><td align="center">执行 <code>$elemMatch</code> 操作，所以你可以使用一个数组中的 <code>document</code> 实例</td></tr></tbody></table><h3 id="列表查询"><a href="#列表查询" class="headerlink" title="列表查询"></a>列表查询</h3><p>对于大多数字段，这种语法会查询出那些字段与给出的值相匹配的 <code>document</code>，但是当一个字段引用 <code>ListField</code> 的时候，而只会提供一条数据，那么包含这条数据的就会被匹配上：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Page</span>(<span class="params">Document</span>):</span></span><br><span class="line">    tags = ListField(StringField())</span><br><span class="line"></span><br><span class="line">Page.objects(tags=<span class="string">'coding'</span>)</span><br></pre></td></tr></tbody></table></figure><h3 id="原始查询"><a href="#原始查询" class="headerlink" title="原始查询"></a>原始查询</h3><p>你可以通过 <code>__raw__</code> 参数来使用一个原始的 <code>PyMongo</code> 语句来进行查询，这样可以进行原始的完整查询：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Page.objects(__raw__={<span class="string">'tags'</span>: <span class="string">'coding'</span>})</span><br></pre></td></tr></tbody></table></figure><h3 id="限制和跳过结果"><a href="#限制和跳过结果" class="headerlink" title="限制和跳过结果"></a>限制和跳过结果</h3><p>就像传统的 <code>ORM</code> 一样，你有时候需要限制返回的结果的数量，或者需要跳过一定数量的结果。<code>QuerySet</code> 里面可以使用 <code>limit()</code> 和 <code>skip()</code> 这两个方法来实现，但是更推荐使用数组切割的语法：</p><h4 id="限制前-5-个"><a href="#限制前-5-个" class="headerlink" title="限制前 5 个"></a>限制前 5 个</h4><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">users = User.objects[:<span class="number">5</span>]</span><br></pre></td></tr></tbody></table></figure><h4 id="跳过前5个"><a href="#跳过前5个" class="headerlink" title="跳过前5个"></a>跳过前5个</h4><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">users = User.objects[<span class="number">5</span>:]</span><br></pre></td></tr></tbody></table></figure><h4 id="取-10-到-15-个"><a href="#取-10-到-15-个" class="headerlink" title="取 10 到 15 个"></a>取 10 到 15 个</h4><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">users = User.objects[<span class="number">10</span>:<span class="number">15</span>]</span><br></pre></td></tr></tbody></table></figure><p>你可以指定让查询返回一个结果。如果这个条在数据库中不存在，那么会引发 <code>IndexError</code> 错误 。使用 <code>first()</code> 方法在数据不存在的时候会返回 <code>None</code>：</p><h3 id="默认-Document-查询"><a href="#默认-Document-查询" class="headerlink" title="默认 Document 查询"></a>默认 Document 查询</h3><p>默认情况下，<code>Document</code> 的 <code>objects</code> 属性返回一个一个 <code>QuerySet</code> 对象，它并没有进行任何筛选和过滤，它返回的是所有的数据对象。这一点可以通过给一个 <code>document</code> 定义一个方法来修改 一个 <code>queryset</code> 。这个方法需要两参数 <code>__doc_cls</code> 和 <code>queryset</code> 。第一个参数是定义这个方法的 <code>Document</code> 类名（从这个意义上来说，这个方法像是一个 <code>classmethod()</code> 而不是一般的方法），第二个参数是初始化的 <code>queryset</code>。这个方法需要使用 <code>queryset_manager()</code> 来装饰来它，使得它被认可。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BlogPost</span>(<span class="params">Document</span>):</span></span><br><span class="line">    title = StringField()</span><br><span class="line">    date = DateTimeField()</span><br><span class="line"></span><br><span class="line"><span class="meta">    @queryset_manager</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">objects</span>(<span class="params">doc_cls, queryset</span>):</span></span><br><span class="line">        <span class="keyword">return</span> queryset.order_by(<span class="string">'-date'</span>)</span><br></pre></td></tr></tbody></table></figure><p>你不用调用 <code>objects</code> 方法，你可以自定义更多的管理方法，例如：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BlogPost</span>(<span class="params">Document</span>):</span></span><br><span class="line">    title = StringField()</span><br><span class="line">    published = BooleanField()</span><br><span class="line"></span><br><span class="line"><span class="meta">    @queryset_manager</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">live_posts</span>(<span class="params">doc_cls, queryset</span>):</span></span><br><span class="line">        <span class="keyword">return</span> queryset.filter(published=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">BlogPost(title=<span class="string">'test1'</span>, published=<span class="literal">False</span>).save()</span><br><span class="line">BlogPost(title=<span class="string">'test2'</span>, published=<span class="literal">True</span>).save()</span><br><span class="line"><span class="keyword">assert</span> len(BlogPost.objects) == <span class="number">2</span></span><br><span class="line"><span class="keyword">assert</span> len(BlogPost.live_posts()) == <span class="number">1</span></span><br></pre></td></tr></tbody></table></figure><h3 id="自定义-QuerySets"><a href="#自定义-QuerySets" class="headerlink" title="自定义 QuerySets"></a>自定义 QuerySets</h3><p>当你想自己定义一些方法来过滤 <code>document</code> 的时候，继承 <code>QuerySet</code> 类对你来说就是个好的方法。为了在 <code>document</code> 里面使用一个自定义的 <code>QuerySet</code> 类，你可以在 document 里的 meta 字典里设置 <code>queryset_class</code> 的值来实现它。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AwesomerQuerySet</span>(<span class="params">QuerySet</span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_awesome</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.filter(awesome=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Page</span>(<span class="params">Document</span>):</span></span><br><span class="line">    meta = {<span class="string">'queryset_class'</span>: AwesomerQuerySet}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Page.objects.get_awesome()</span><br></pre></td></tr></tbody></table></figure><h3 id="Aggregation-聚合"><a href="#Aggregation-聚合" class="headerlink" title="Aggregation 聚合"></a>Aggregation 聚合</h3><p>MongoDB 提供了开箱即用的聚合方法，但没有 <code>RDBMS</code> 提供的那样多。<code>MongoEngine</code> 提供了一个包装过的内置的方法，同时自身提供了一些方法，它实现了在数据库服务上执行的 <code>Javascript</code> 代码的功能。</p><h5 id="结果计数"><a href="#结果计数" class="headerlink" title="结果计数"></a>结果计数</h5><p>就像限制和跳过结果一样， <code>QuerySet</code> 对象提供了用来计数的方法 - <code>count()</code>，不过还有一个更 <code>Pythonic</code> 的方法来实现：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">num_users = len(User.objects)</span><br></pre></td></tr></tbody></table></figure><h5 id="更多功能"><a href="#更多功能" class="headerlink" title="更多功能"></a>更多功能</h5><p>当你想为 <code>document</code> 的特定的字段的数量计数的时候，可以使用 <code>sum()</code>：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yearly_expense = Employee.objects.sum(<span class="string">'salary'</span>)</span><br></pre></td></tr></tbody></table></figure><p>当你想求某个字段的平均值的时候，可以使用 <code>average()</code>：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mean_age = User.objects.average(<span class="string">'age'</span>)</span><br></pre></td></tr></tbody></table></figure><p>MongoEngine 提供了一个方法来获取一个在集合里 <code>item</code> 的频率 - <code>item_frequencies()</code>。下面一个例子可以生成 <code>tag-clouds</code>：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Article</span>(<span class="params">Document</span>):</span></span><br><span class="line">    tag = ListField(StringField())</span><br><span class="line"></span><br><span class="line">tag_freqs = Article.objects.item_frequencies(<span class="string">'tag'</span>, normalize=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> operator <span class="keyword">import</span> itemgetter</span><br><span class="line">top_tags = sorted(tag_freqs.items(), key=itemgetter(<span class="number">1</span>), reverse=<span class="literal">True</span>)[:<span class="number">10</span>]</span><br></pre></td></tr></tbody></table></figure><h3 id="高级查询"><a href="#高级查询" class="headerlink" title="高级查询"></a>高级查询</h3><p>有时候使用关键字参数返回的 <code>QuerySet</code> 不能完全满足你的查询需要。例如有时候你需要将约束条件进行 <code>and</code>，<code>or</code> 的操作。你可以使用 <code>MongoEngine</code> 提供的 <code>Q</code> 类来实现，一个 <code>Q</code> 类代表了一个查询的一部分，里面的参数设置与你查询 <code>document</code> 的时候相同。建立一个复杂查询的时候，你需要用 <code>&amp;</code> 或 <code>|</code> 操作符将 <code>Q</code> 对象连结起来。例如：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> mongoengine.queryset.visitor <span class="keyword">import</span> Q</span><br><span class="line"></span><br><span class="line">Post.objects(Q(published=<span class="literal">True</span>) | Q(publish_date__lte=datetime.now()))</span><br><span class="line"></span><br><span class="line">Post.objects((Q(featured=<span class="literal">True</span>) &amp; Q(hits__gte=<span class="number">1000</span>)) | Q(hits__gte=<span class="number">5000</span>))</span><br></pre></td></tr></tbody></table></figure><h3 id="Atomic-updates（原子更新）"><a href="#Atomic-updates（原子更新）" class="headerlink" title="Atomic updates（原子更新）"></a>Atomic updates（原子更新）</h3><p>MongoDB 文档 可以通过 <code>QuerySet</code> 上的 <code>update_one()</code>、<code>update()</code>、<code>modify()</code> 方法自动更新。下面几种操作符可以被用到这几种方法上：</p><table><thead><tr><th align="center">符号</th><th align="center">含义</th></tr></thead><tbody><tr><td align="center">set</td><td align="center">设置成一个指定的值</td></tr><tr><td align="center">unset</td><td align="center">删除一个指定的值</td></tr><tr><td align="center">inc</td><td align="center">将值加上一个给定的数</td></tr><tr><td align="center">dec</td><td align="center">将值减去一个给定的数</td></tr><tr><td align="center">push</td><td align="center">在 <code>list</code> 中添加一个值</td></tr><tr><td align="center">push_all</td><td align="center">在 <code>list</code> 中添加一个值</td></tr><tr><td align="center">pop</td><td align="center">移除list 的第一项或最后一项（根据 <code>pop__&lt;field&gt;=val</code> 中 <code>val</code> 的值决定删除第一项还是最后一项，一般情况下，<code>val</code> 为负则删除第一项，为正则删除最后一项，参见：<a href="https://docs.mongodb.com/manual/reference/operator/update/pop/">mongodb $pop</a></td></tr><tr><td align="center">pull</td><td align="center">从 <code>list</code> 里面移除一个值</td></tr><tr><td align="center">pull_all</td><td align="center">从 <code>list</code> 里面移除个值</td></tr><tr><td align="center">add_to_set</td><td align="center">当要添加的值不在 <code>list</code> 中时，添加这个值</td></tr></tbody></table><p>原子更新的语法类似于查询语法，区别在于修饰操作符位于字段之前，而不是之后：</p><p>给文档中的 <code>page_views</code> 字段上加一个给定的数字</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">post = BlogPost(title=<span class="string">'Test'</span>, page_views=<span class="number">0</span>, tags=[<span class="string">'database'</span>])</span><br><span class="line">post.save()</span><br><span class="line">BlogPost.objects(id=post.id).update_one(inc__page_views=<span class="number">1</span>)</span><br><span class="line">post.reload()  <span class="comment"># the document has been changed, so we need to reload it</span></span><br><span class="line">post.page_views</span><br></pre></td></tr></tbody></table></figure><p>运行输出结果：</p><figure class="highlight text"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1</span><br></pre></td></tr></tbody></table></figure><p>将文档中的 <code>title</code> 更新为 <code>Example Post</code></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">BlogPost.objects(id=post.id).update_one(set__title=<span class="string">'Example Post'</span>)</span><br><span class="line">post.reload()</span><br><span class="line">post.title</span><br></pre></td></tr></tbody></table></figure><p>运行输出结果：</p><figure class="highlight text"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">'Example Post'</span><br></pre></td></tr></tbody></table></figure><p>往文档中 <code>tags</code> 的列表中添加一个值</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">BlogPost.objects(id=post.id).update_one(push__tags=<span class="string">'nosql'</span>)</span><br><span class="line">post.reload()</span><br><span class="line">post.tags</span><br></pre></td></tr></tbody></table></figure><p>运行输出结果：</p><figure class="highlight text"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">['database', 'nosql']</span><br></pre></td></tr></tbody></table></figure><p>如果没有修饰操作符，则默认为 <code>$set</code>：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">BlogPost.objects(id=post.id).update(title=<span class="string">'Example Post'</span>)</span><br><span class="line">BlogPost.objects(id=post.id).update(set__title=<span class="string">'Example Post'</span>)</span><br></pre></td></tr></tbody></table></figure><h3 id="服务器端-JavaScript-执行"><a href="#服务器端-JavaScript-执行" class="headerlink" title="服务器端 JavaScript 执行"></a>服务器端 JavaScript 执行</h3><p>可以写 <code>Javascript</code> 函数，然后发送到服务器来执行。它返回结果是 <code>Javascript</code> 函数的返回值。这个功能是通过 <code>QuerySet()</code> 对象的 <code>exec_js()</code> 方法实现。传递一个包含一个 <code>Javascript</code> 函数的字符串作为第一个参数。</p><p>其余位置的参数的名字字段将作为您的 <code>Javascript</code> 函数的参数传递过去。</p><p>在 <code>JavaScript</code> 函数范围中，一些变量可用：</p><ul><li><p><code>collection</code> – 对应使用的 <code>Document</code> 类的集合的名称</p></li><li><p><code>query</code> – 一个 <code>QuerySet</code> 对象</p></li><li><p><code>options</code> – 一个对象，它包含要传递给 <code>exec_js()</code> 函数的一些参数</p></li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sum_field</span>(<span class="params">document, field_name, include_negatives=True</span>):</span></span><br><span class="line">    code = <span class="string">"""</span></span><br><span class="line"><span class="string">    function(sumField) {</span></span><br><span class="line"><span class="string">        var total = 0.0;</span></span><br><span class="line"><span class="string">        db[collection].find(query).forEach(function(doc) {</span></span><br><span class="line"><span class="string">            var val = doc[sumField];</span></span><br><span class="line"><span class="string">            if (val &gt;= 0.0 || options.includeNegatives) {</span></span><br><span class="line"><span class="string">                total += val;</span></span><br><span class="line"><span class="string">            }</span></span><br><span class="line"><span class="string">        });</span></span><br><span class="line"><span class="string">        return total;</span></span><br><span class="line"><span class="string">    }</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    options = {<span class="string">'includeNegatives'</span>: include_negatives}</span><br><span class="line">    <span class="keyword">return</span> document.objects.exec_js(code, field_name, **options)</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;MongoEngine-查询&quot;&gt;&lt;a href=&quot;#MongoEngine-查询&quot; class=&quot;headerlink&quot; title=&quot;MongoEngine 查询&quot;&gt;&lt;/a&gt;MongoEngine 查询&lt;/h2&gt;&lt;h3 id=&quot;过滤查询&quot;&gt;&lt;a href=&quot;#过</summary>
      
    
    
    
    <category term="数据库" scheme="https://sitoi.cn/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
    <category term="NoSQL" scheme="https://sitoi.cn/tags/NoSQL/"/>
    
    <category term="PyMongo" scheme="https://sitoi.cn/tags/PyMongo/"/>
    
    <category term="MongoEngine" scheme="https://sitoi.cn/tags/MongoEngine/"/>
    
    <category term="CRUD" scheme="https://sitoi.cn/tags/CRUD/"/>
    
    <category term="Python" scheme="https://sitoi.cn/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>PyMongo 常用语法汇总</title>
    <link href="https://sitoi.cn/posts/37062.html"/>
    <id>https://sitoi.cn/posts/37062.html</id>
    <published>2020-06-10T14:53:42.000Z</published>
    <updated>2020-08-19T05:45:51.882Z</updated>
    
    <content type="html"><![CDATA[<h2 id="建立基本连接"><a href="#建立基本连接" class="headerlink" title="建立基本连接"></a>建立基本连接</h2><p>首先我们需要建立一个连接，连接 MongoDB 时，我们需要使用 PyMongo 库中的 MongoClient 来建立连接，默认连接的地址是 <code>mongodb://localhost:27017</code></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pymongo <span class="keyword">import</span> MongoClient</span><br><span class="line"></span><br><span class="line">clinet = MongoClient(<span class="string">"mongodb://localhost:27017"</span>)</span><br><span class="line">db = clinet[<span class="string">"demo"</span>]</span><br><span class="line">col = db[<span class="string">"demo"</span>]</span><br></pre></td></tr></tbody></table></figure><p>首先通过上面的代码创建 数据库对象和集合对象。</p><ul><li>数据库连接实例 <code>MongoClient</code> </li><li>数据库实例 <code>demo</code></li><li>集合实例 <code>demo</code></li></ul><h2 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h2><h3 id="查看数据库信息"><a href="#查看数据库信息" class="headerlink" title="查看数据库信息"></a>查看数据库信息</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">server_info = clinet.server_info()</span><br></pre></td></tr></tbody></table></figure><p>输出信息：</p><figure class="highlight json"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">{</span><br><span class="line">    <span class="attr">"version"</span>:<span class="string">"4.2.6"</span>,</span><br><span class="line">    <span class="attr">"gitVersion"</span>:<span class="string">"20364840b8f1af16917e4c23c1b5f5efd8b352f8"</span>,</span><br><span class="line">    <span class="attr">"modules"</span>:[</span><br><span class="line"></span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">"allocator"</span>:<span class="string">"tcmalloc"</span>,</span><br><span class="line">    <span class="attr">"javascriptEngine"</span>:<span class="string">"mozjs"</span>,</span><br><span class="line">    <span class="attr">"sysInfo"</span>:<span class="string">"deprecated"</span>,</span><br><span class="line">    <span class="attr">"versionArray"</span>:[</span><br><span class="line">        <span class="number">4</span>,</span><br><span class="line">        <span class="number">2</span>,</span><br><span class="line">        <span class="number">6</span>,</span><br><span class="line">        <span class="number">0</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">"openssl"</span>:{</span><br><span class="line">        <span class="attr">"running"</span>:<span class="string">"OpenSSL 1.1.1  11 Sep 2018"</span>,</span><br><span class="line">        <span class="attr">"compiled"</span>:<span class="string">"OpenSSL 1.1.1  11 Sep 2018"</span></span><br><span class="line">    },</span><br><span class="line">    <span class="attr">"buildEnvironment"</span>:{</span><br><span class="line">        <span class="attr">"distmod"</span>:<span class="string">"ubuntu1804"</span>,</span><br><span class="line">        <span class="attr">"distarch"</span>:<span class="string">"x86_64"</span>,</span><br><span class="line">        <span class="attr">"cc"</span>:<span class="string">"/opt/mongodbtoolchain/v3/bin/gcc: gcc (GCC) 8.2.0"</span>,</span><br><span class="line">        <span class="attr">"ccflags"</span>:<span class="string">"-fno-omit-frame-pointer -fno-strict-aliasing -ggdb -pthread -Wall -Wsign-compare -Wno-unknown-pragmas -Winvalid-pch -Werror -O2 -Wno-unused-local-typedefs -Wno-unused-function -Wno-deprecated-declarations -Wno-unused-const-variable -Wno-unused-but-set-variable -Wno-missing-braces -fstack-protector-strong -fno-builtin-memcmp"</span>,</span><br><span class="line">        <span class="attr">"cxx"</span>:<span class="string">"/opt/mongodbtoolchain/v3/bin/g++: g++ (GCC) 8.2.0"</span>,</span><br><span class="line">        <span class="attr">"cxxflags"</span>:<span class="string">"-Woverloaded-virtual -Wno-maybe-uninitialized -fsized-deallocation -std=c++17"</span>,</span><br><span class="line">        <span class="attr">"linkflags"</span>:<span class="string">"-pthread -Wl,-z,now -rdynamic -Wl,--fatal-warnings -fstack-protector-strong -fuse-ld=gold -Wl,--build-id -Wl,--hash-style=gnu -Wl,-z,noexecstack -Wl,--warn-execstack -Wl,-z,relro"</span>,</span><br><span class="line">        <span class="attr">"target_arch"</span>:<span class="string">"x86_64"</span>,</span><br><span class="line">        <span class="attr">"target_os"</span>:<span class="string">"linux"</span></span><br><span class="line">    },</span><br><span class="line">    <span class="attr">"bits"</span>:<span class="number">64</span>,</span><br><span class="line">    <span class="attr">"debug"</span>:<span class="literal">false</span>,</span><br><span class="line">    <span class="attr">"maxBsonObjectSize"</span>:<span class="number">16777216</span>,</span><br><span class="line">    <span class="attr">"storageEngines"</span>:[</span><br><span class="line">        <span class="string">"biggie"</span>,</span><br><span class="line">        <span class="string">"devnull"</span>,</span><br><span class="line">        <span class="string">"ephemeralForTest"</span>,</span><br><span class="line">        <span class="string">"wiredTiger"</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">"ok"</span>:<span class="number">1</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="显示当前数据库服务器上的数据库名"><a href="#显示当前数据库服务器上的数据库名" class="headerlink" title="显示当前数据库服务器上的数据库名"></a>显示当前数据库服务器上的数据库名</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">database_names = clinet.list_database_names()</span><br></pre></td></tr></tbody></table></figure><p>输出信息：</p><figure class="highlight text"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">['admin', 'config', 'demo', 'local']</span><br></pre></td></tr></tbody></table></figure><blockquote><p>如果没有 <code>demo</code> 数据库是因为在没有插入数据的情况下是不会被创建的，只有第一次插入数据，会自动的创建数据库以及对应的集合。</p></blockquote><h3 id="显示当前数据库上的全部集合名"><a href="#显示当前数据库上的全部集合名" class="headerlink" title="显示当前数据库上的全部集合名"></a>显示当前数据库上的全部集合名</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">collection_names = db.list_collection_names()</span><br></pre></td></tr></tbody></table></figure><p>输出信息：</p><figure class="highlight text"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">['demo']</span><br></pre></td></tr></tbody></table></figure><h2 id="插入文档"><a href="#插入文档" class="headerlink" title="插入文档"></a>插入文档</h2><h3 id="插入一个文档"><a href="#插入一个文档" class="headerlink" title="插入一个文档"></a>插入一个文档</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">demo = {</span><br><span class="line">    <span class="string">"author"</span>: <span class="string">"Sitoi"</span>,</span><br><span class="line">    <span class="string">"age"</span>: <span class="number">22</span>,</span><br><span class="line">    <span class="string">"title"</span>: <span class="string">"Sitoi-blog"</span>,</span><br><span class="line">    <span class="string">"tags"</span>: [<span class="string">"man"</span>, <span class="string">"spider"</span>]</span><br><span class="line">}</span><br><span class="line">demo_id = col.insert_one(demo).inserted_id</span><br></pre></td></tr></tbody></table></figure><p>输出信息：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">5</span>ee3806bb6c75d29c94aa9fc</span><br></pre></td></tr></tbody></table></figure><h3 id="插入多个文档"><a href="#插入多个文档" class="headerlink" title="插入多个文档"></a>插入多个文档</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">demos = [</span><br><span class="line">    {<span class="string">"author"</span>: <span class="string">"blog"</span>, <span class="string">"age"</span>: <span class="number">18</span>, <span class="string">"title"</span>: <span class="string">"blog"</span>, <span class="string">"text"</span>: <span class="string">"Sitoi Blog"</span>},</span><br><span class="line">    {<span class="string">"author"</span>: <span class="string">"bash"</span>, <span class="string">"age"</span>: <span class="number">30</span>, <span class="string">"title"</span>: <span class="string">"bash"</span>, <span class="string">"text"</span>: <span class="string">"Sitoi Blog"</span>},</span><br><span class="line">    {<span class="string">"author"</span>: <span class="string">"python"</span>, <span class="string">"age"</span>: <span class="number">50</span>, <span class="string">"title"</span>: <span class="string">"language"</span>, <span class="string">"text"</span>: <span class="string">"Sitoi Blog"</span>},</span><br><span class="line">    {<span class="string">"author"</span>: <span class="string">"mongodb"</span>, <span class="string">"age"</span>: <span class="number">80</span>, <span class="string">"title"</span>: <span class="string">"NoSQL"</span>, <span class="string">"text"</span>: <span class="string">"Sitoi Blog"</span>},</span><br><span class="line">    {<span class="string">"author"</span>: <span class="string">"pymongo"</span>, <span class="string">"age"</span>: <span class="number">97</span>, <span class="string">"title"</span>: <span class="string">"Python for MongoDB"</span>, <span class="string">"text"</span>: <span class="string">"Sitoi Blog"</span>},</span><br><span class="line">]</span><br><span class="line">demo_ids = col.insert_many(demos).inserted_ids</span><br></pre></td></tr></tbody></table></figure><p>输出信息：</p><figure class="highlight text"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[ObjectId('5ee3806bb6c75d29c94aa9fd'), ObjectId('5ee3806bb6c75d29c94aa9fe'), ObjectId('5ee3806bb6c75d29c94aa9ff'), ObjectId('5ee3806bb6c75d29c94aaa00'), ObjectId('5ee3806bb6c75d29c94aaa01')]</span><br></pre></td></tr></tbody></table></figure><h2 id="查询文档"><a href="#查询文档" class="headerlink" title="查询文档"></a>查询文档</h2><h3 id="查询单个文档"><a href="#查询单个文档" class="headerlink" title="查询单个文档"></a>查询单个文档</h3><p>返回查询的<code>第一条</code>，<code>find_one</code> 里面可以填写<code>查询条件</code></p><p>参数说明：</p><ul><li><code>filter</code>：查询条件</li><li><code>projection</code>：映射条件</li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">query = {}</span><br><span class="line">projection = <span class="literal">None</span></span><br><span class="line">result = col.find_one(filter=query, projection=projection)</span><br></pre></td></tr></tbody></table></figure><p>查询结果：</p><figure class="highlight text"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">{'_id': ObjectId('5ee3806bb6c75d29c94aa9fc'), 'author': 'Sitoi', 'age': 22, 'title': 'Sitoi-blog', 'tags': ['man', 'spider']}</span><br></pre></td></tr></tbody></table></figure><h3 id="查询多个文档"><a href="#查询多个文档" class="headerlink" title="查询多个文档"></a>查询多个文档</h3><p>返回一个对象,<code>find</code> 里面可以填写 <code>查询条件</code></p><ul><li><code>filter</code>：查询条件</li><li><code>projection</code>：映射条件</li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">query = {}</span><br><span class="line">projection = <span class="literal">None</span></span><br><span class="line">result = col.find(filter=query, projection=projection)</span><br></pre></td></tr></tbody></table></figure><p>查询结果：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;pymongo.cursor.Cursor object at 0x7f695ed56c88&gt;</span><br></pre></td></tr></tbody></table></figure><blockquote><p>通过<code>For</code>循环</p></blockquote><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">results = col.find()</span><br><span class="line"><span class="keyword">for</span> result <span class="keyword">in</span> results:</span><br><span class="line">    print(result)</span><br></pre></td></tr></tbody></table></figure><p>遍历结果：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">{<span class="string">'_id'</span>: ObjectId(<span class="string">'5ee3806bb6c75d29c94aa9fc'</span>), <span class="string">'author'</span>: <span class="string">'Sitoi'</span>, <span class="string">'age'</span>: <span class="number">22</span>, <span class="string">'title'</span>: <span class="string">'Sitoi-blog'</span>, <span class="string">'tags'</span>: [<span class="string">'man'</span>, <span class="string">'spider'</span>]}</span><br><span class="line">{<span class="string">'_id'</span>: ObjectId(<span class="string">'5ee3806bb6c75d29c94aa9fd'</span>), <span class="string">'author'</span>: <span class="string">'blog'</span>, <span class="string">'age'</span>: <span class="number">18</span>, <span class="string">'title'</span>: <span class="string">'blog'</span>, <span class="string">'text'</span>: <span class="string">'Sitoi Blog'</span>}</span><br><span class="line">{<span class="string">'_id'</span>: ObjectId(<span class="string">'5ee3806bb6c75d29c94aa9fe'</span>), <span class="string">'author'</span>: <span class="string">'bash'</span>, <span class="string">'age'</span>: <span class="number">30</span>, <span class="string">'title'</span>: <span class="string">'bash'</span>, <span class="string">'text'</span>: <span class="string">'Sitoi Blog'</span>}</span><br><span class="line">{<span class="string">'_id'</span>: ObjectId(<span class="string">'5ee3806bb6c75d29c94aa9ff'</span>), <span class="string">'author'</span>: <span class="string">'python'</span>, <span class="string">'age'</span>: <span class="number">50</span>, <span class="string">'title'</span>: <span class="string">'language'</span>, <span class="string">'text'</span>: <span class="string">'Sitoi Blog'</span>}</span><br><span class="line">{<span class="string">'_id'</span>: ObjectId(<span class="string">'5ee3806bb6c75d29c94aaa00'</span>), <span class="string">'author'</span>: <span class="string">'mongodb'</span>, <span class="string">'age'</span>: <span class="number">80</span>, <span class="string">'title'</span>: <span class="string">'NoSQL'</span>, <span class="string">'text'</span>: <span class="string">'Sitoi Blog'</span>}</span><br><span class="line">{<span class="string">'_id'</span>: ObjectId(<span class="string">'5ee3806bb6c75d29c94aaa01'</span>), <span class="string">'author'</span>: <span class="string">'pymongo'</span>, <span class="string">'age'</span>: <span class="number">97</span>, <span class="string">'title'</span>: <span class="string">'Python for MongoDB'</span>, <span class="string">'text'</span>: <span class="string">'Sitoi Blog'</span>}</span><br></pre></td></tr></tbody></table></figure><h3 id="指定返回哪些字段"><a href="#指定返回哪些字段" class="headerlink" title="指定返回哪些字段"></a>指定返回哪些字段</h3><p>通过 <code>projection</code> 参数控制返回的结果包含哪些字段</p><h4 id="示例一：所有字段"><a href="#示例一：所有字段" class="headerlink" title="示例一：所有字段"></a>示例一：所有字段</h4><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">results = col.find()</span><br></pre></td></tr></tbody></table></figure><p>查询结果：</p><figure class="highlight text"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">{'_id': ObjectId('5ee3806bb6c75d29c94aa9fc'), 'author': 'Sitoi', 'age': 22, 'title': 'Sitoi-blog', 'tags': ['man', 'spider']}</span><br><span class="line">{'_id': ObjectId('5ee3806bb6c75d29c94aa9fd'), 'author': 'blog', 'age': 18, 'title': 'blog', 'text': 'Sitoi Blog'}</span><br><span class="line">{'_id': ObjectId('5ee3806bb6c75d29c94aa9fe'), 'author': 'bash', 'age': 30, 'title': 'bash', 'text': 'Sitoi Blog'}</span><br><span class="line">{'_id': ObjectId('5ee3806bb6c75d29c94aa9ff'), 'author': 'python', 'age': 50, 'title': 'language', 'text': 'Sitoi Blog'}</span><br><span class="line">{'_id': ObjectId('5ee3806bb6c75d29c94aaa00'), 'author': 'mongodb', 'age': 80, 'title': 'NoSQL', 'text': 'Sitoi Blog'}</span><br><span class="line">{'_id': ObjectId('5ee3806bb6c75d29c94aaa01'), 'author': 'pymongo', 'age': 97, 'title': 'Python for MongoDB', 'text': 'Sitoi Blog'}</span><br></pre></td></tr></tbody></table></figure><h4 id="示例二：用字典指定要显示的哪几个字段"><a href="#示例二：用字典指定要显示的哪几个字段" class="headerlink" title="示例二：用字典指定要显示的哪几个字段"></a>示例二：用字典指定要显示的哪几个字段</h4><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">query = {}</span><br><span class="line">projection = {<span class="string">"_id"</span>: <span class="literal">True</span>, <span class="string">"author"</span>: <span class="literal">True</span>}</span><br><span class="line">results = col.find(filter=query, projection=projection)</span><br></pre></td></tr></tbody></table></figure><p>查询结果：</p><figure class="highlight text"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">{'_id': ObjectId('5ee3806bb6c75d29c94aa9fc'), 'author': 'Sitoi'}</span><br><span class="line">{'_id': ObjectId('5ee3806bb6c75d29c94aa9fd'), 'author': 'blog'}</span><br><span class="line">{'_id': ObjectId('5ee3806bb6c75d29c94aa9fe'), 'author': 'bash'}</span><br><span class="line">{'_id': ObjectId('5ee3806bb6c75d29c94aa9ff'), 'author': 'python'}</span><br><span class="line">{'_id': ObjectId('5ee3806bb6c75d29c94aaa00'), 'author': 'mongodb'}</span><br><span class="line">{'_id': ObjectId('5ee3806bb6c75d29c94aaa01'), 'author': 'pymongo'}</span><br></pre></td></tr></tbody></table></figure><h4 id="示例三：用字典指定去掉哪些字段"><a href="#示例三：用字典指定去掉哪些字段" class="headerlink" title="示例三：用字典指定去掉哪些字段"></a>示例三：用字典指定去掉哪些字段</h4><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">query = {}</span><br><span class="line">projection = {<span class="string">"_id"</span>: <span class="literal">False</span>, <span class="string">"author"</span>: <span class="literal">False</span>}</span><br><span class="line">results = col.find(query, projection=projection)</span><br></pre></td></tr></tbody></table></figure><p>查询结果：</p><figure class="highlight text"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">{'age': 22, 'title': 'Sitoi-blog', 'tags': ['man', 'spider']}</span><br><span class="line">{'age': 18, 'title': 'blog', 'text': 'Sitoi Blog'}</span><br><span class="line">{'age': 30, 'title': 'bash', 'text': 'Sitoi Blog'}</span><br><span class="line">{'age': 50, 'title': 'language', 'text': 'Sitoi Blog'}</span><br><span class="line">{'age': 80, 'title': 'NoSQL', 'text': 'Sitoi Blog'}</span><br><span class="line">{'age': 97, 'title': 'Python for MongoDB', 'text': 'Sitoi Blog'}</span><br></pre></td></tr></tbody></table></figure><h4 id="示例四：用列表指定要显示哪几个字段"><a href="#示例四：用列表指定要显示哪几个字段" class="headerlink" title="示例四：用列表指定要显示哪几个字段"></a>示例四：用列表指定要显示哪几个字段</h4><blockquote><p><code>_id</code> 不指定为 <code>False</code> 则必定返回</p></blockquote><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">query = {}</span><br><span class="line">projection = [<span class="string">"author"</span>, <span class="string">"title"</span>]</span><br><span class="line">results = col.find(filter=query, projection=projection)</span><br></pre></td></tr></tbody></table></figure><p>查询结果：</p><figure class="highlight text"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">{'_id': ObjectId('5ee3806bb6c75d29c94aa9fc'), 'author': 'Sitoi', 'title': 'Sitoi-blog'}</span><br><span class="line">{'_id': ObjectId('5ee3806bb6c75d29c94aa9fd'), 'author': 'blog', 'title': 'blog'}</span><br><span class="line">{'_id': ObjectId('5ee3806bb6c75d29c94aa9fe'), 'author': 'bash', 'title': 'bash'}</span><br><span class="line">{'_id': ObjectId('5ee3806bb6c75d29c94aa9ff'), 'author': 'python', 'title': 'language'}</span><br><span class="line">{'_id': ObjectId('5ee3806bb6c75d29c94aaa00'), 'author': 'mongodb', 'title': 'NoSQL'}</span><br><span class="line">{'_id': ObjectId('5ee3806bb6c75d29c94aaa01'), 'author': 'pymongo', 'title': 'Python for MongoDB'}</span><br></pre></td></tr></tbody></table></figure><h3 id="指定查询条件"><a href="#指定查询条件" class="headerlink" title="指定查询条件"></a>指定查询条件</h3><table><thead><tr><th align="center">符号</th><th align="center">含义</th><th align="center">示例</th></tr></thead><tbody><tr><td align="center">$lt</td><td align="center">小于</td><td align="center">{‘age’: {‘$lt’: 18}}</td></tr><tr><td align="center">$gt</td><td align="center">大于</td><td align="center">{‘age’: {‘$gt’: 18}}</td></tr><tr><td align="center">$lte</td><td align="center">小于等于</td><td align="center">{‘age’: {‘$lte’: 18}}</td></tr><tr><td align="center">$gte</td><td align="center">大于等于</td><td align="center">{‘age’: {‘$gte’: 18}}</td></tr><tr><td align="center">$ne</td><td align="center">不等于</td><td align="center">{‘age’: {‘$ne’: 18}}</td></tr><tr><td align="center">$in</td><td align="center">在范围内</td><td align="center">{‘age’: {‘$in’: [18, 22]}}</td></tr><tr><td align="center">$nin</td><td align="center">不在范围内</td><td align="center">{‘age’: {‘$nin’: [18, 22]}}</td></tr><tr><td align="center">$all</td><td align="center">条件内所有值</td><td align="center">{‘age’: {‘$all’: [18, 22]}}</td></tr></tbody></table><h4 id="示例：指定范围，大于等于，小于等于"><a href="#示例：指定范围，大于等于，小于等于" class="headerlink" title="示例：指定范围，大于等于，小于等于"></a>示例：指定范围，大于等于，小于等于</h4><blockquote><p>10 &lt;= 年龄 &lt;= 30 </p></blockquote><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">query = {<span class="string">"age"</span>: {<span class="string">"$gte"</span>: <span class="number">10</span>, <span class="string">"$lte"</span>: <span class="number">30</span>}}</span><br><span class="line">projection = <span class="literal">None</span></span><br><span class="line">results = col.find(filter=query, projection=projection)</span><br></pre></td></tr></tbody></table></figure><p>查询结果：</p><figure class="highlight text"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">{'_id': ObjectId('5ee3806bb6c75d29c94aa9fc'), 'author': 'Sitoi', 'age': 22, 'title': 'Sitoi-blog', 'tags': ['man', 'spider']}</span><br><span class="line">{'_id': ObjectId('5ee3806bb6c75d29c94aa9fd'), 'author': 'blog', 'age': 18, 'title': 'blog', 'text': 'Sitoi Blog'}</span><br><span class="line">{'_id': ObjectId('5ee3806bb6c75d29c94aa9fe'), 'author': 'bash', 'age': 30, 'title': 'bash', 'text': 'Sitoi Blog'}</span><br></pre></td></tr></tbody></table></figure><h3 id="并列查询"><a href="#并列查询" class="headerlink" title="并列查询"></a>并列查询</h3><h4 id="示例一：不同字段，并列条件"><a href="#示例一：不同字段，并列条件" class="headerlink" title="示例一：不同字段，并列条件"></a>示例一：不同字段，并列条件</h4><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">query = {<span class="string">"author"</span>: <span class="string">"Sitoi"</span>, <span class="string">"age"</span>: <span class="number">22</span>}</span><br><span class="line">projection = <span class="literal">None</span></span><br><span class="line">results = col.find(filter=query, projection=projection)</span><br></pre></td></tr></tbody></table></figure><p>查询结果：</p><figure class="highlight text"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">{'_id': ObjectId('5ee3806bb6c75d29c94aa9fc'), 'author': 'Sitoi', 'age': 22, 'title': 'Sitoi-blog', 'tags': ['man', 'spider']}</span><br></pre></td></tr></tbody></table></figure><h4 id="示例二：相同字段，并列条件"><a href="#示例二：相同字段，并列条件" class="headerlink" title="示例二：相同字段，并列条件"></a>示例二：相同字段，并列条件</h4><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 错误：</span></span><br><span class="line">query = {<span class="string">"age"</span>: {<span class="string">"$gt"</span>: <span class="number">10</span>}, <span class="string">"age"</span>: {<span class="string">"$lt"</span>: <span class="number">20</span>}}</span><br><span class="line"><span class="comment"># 正确：</span></span><br><span class="line">query = {<span class="string">"age"</span>: {<span class="string">"$gte"</span>: <span class="number">10</span>, <span class="string">"$lte"</span>: <span class="number">20</span>}}</span><br><span class="line">projection = <span class="literal">None</span></span><br><span class="line">results = col.find(filter=query, projection=projection)</span><br></pre></td></tr></tbody></table></figure><p>查询结果：</p><figure class="highlight text"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">{'_id': ObjectId('5ee3806bb6c75d29c94aa9fd'), 'author': 'blog', 'age': 18, 'title': 'blog', 'text': 'Sitoi Blog'}</span><br></pre></td></tr></tbody></table></figure><h3 id="或条件查询"><a href="#或条件查询" class="headerlink" title="或条件查询"></a>或条件查询</h3><h4 id="示例一：不同字段，或条件"><a href="#示例一：不同字段，或条件" class="headerlink" title="示例一：不同字段，或条件"></a>示例一：不同字段，或条件</h4><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">query = {<span class="string">"$or"</span>: [{<span class="string">"age"</span>: <span class="number">22</span>}, {<span class="string">"author"</span>: <span class="string">"blog"</span>}]}</span><br><span class="line">projection = <span class="literal">None</span></span><br><span class="line">results = col.find(filter=query, projection=projection)</span><br></pre></td></tr></tbody></table></figure><p>查询结果：</p><figure class="highlight text"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">{'_id': ObjectId('5ee3806bb6c75d29c94aa9fc'), 'author': 'Sitoi', 'age': 22, 'title': 'Sitoi-blog', 'tags': ['man', 'spider']}</span><br><span class="line">{'_id': ObjectId('5ee3806bb6c75d29c94aa9fd'), 'author': 'blog', 'age': 18, 'title': 'blog', 'text': 'Sitoi Blog'}</span><br></pre></td></tr></tbody></table></figure><h4 id="示例二：相同字段，或条件"><a href="#示例二：相同字段，或条件" class="headerlink" title="示例二：相同字段，或条件"></a>示例二：相同字段，或条件</h4><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">query = {<span class="string">"$or"</span>: [{<span class="string">"age"</span>: <span class="number">22</span>}, {<span class="string">"age"</span>: <span class="number">18</span>}]}</span><br><span class="line">projection = <span class="literal">None</span></span><br><span class="line">results = col.find(filter=query, projection=projection)</span><br></pre></td></tr></tbody></table></figure><p>查询结果：</p><figure class="highlight text"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">{'_id': ObjectId('5ee3806bb6c75d29c94aa9fc'), 'author': 'Sitoi', 'age': 22, 'title': 'Sitoi-blog', 'tags': ['man', 'spider']}</span><br><span class="line">{'_id': ObjectId('5ee3806bb6c75d29c94aa9fd'), 'author': 'blog', 'age': 18, 'title': 'blog', 'text': 'Sitoi Blog'}</span><br></pre></td></tr></tbody></table></figure><h3 id="字段是否存在"><a href="#字段是否存在" class="headerlink" title="字段是否存在"></a>字段是否存在</h3><h4 id="示例一：字段不存在"><a href="#示例一：字段不存在" class="headerlink" title="示例一：字段不存在"></a>示例一：字段不存在</h4><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">query = {<span class="string">"text"</span>: <span class="literal">None</span>}</span><br><span class="line">projection = <span class="literal">None</span></span><br><span class="line">results = col.find(filter=query, projection=projection)</span><br></pre></td></tr></tbody></table></figure><p>查询结果：</p><figure class="highlight text"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">{'_id': ObjectId('5ee3806bb6c75d29c94aa9fc'), 'author': 'Sitoi', 'age': 22, 'title': 'Sitoi-blog', 'tags': ['man', 'spider']}</span><br></pre></td></tr></tbody></table></figure><h4 id="示例二：字段存在"><a href="#示例二：字段存在" class="headerlink" title="示例二：字段存在"></a>示例二：字段存在</h4><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">query = {<span class="string">"text"</span>: {<span class="string">"$ne"</span>: <span class="literal">None</span>}}</span><br><span class="line">projection = <span class="literal">None</span></span><br><span class="line">results = col.find(filter=query, projection=projection)</span><br></pre></td></tr></tbody></table></figure><p>查询结果：</p><figure class="highlight text"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">{'_id': ObjectId('5ee3806bb6c75d29c94aa9fd'), 'author': 'blog', 'age': 18, 'title': 'blog', 'text': 'Sitoi Blog'}</span><br><span class="line">{'_id': ObjectId('5ee3806bb6c75d29c94aa9fe'), 'author': 'bash', 'age': 30, 'title': 'bash', 'text': 'Sitoi Blog'}</span><br><span class="line">{'_id': ObjectId('5ee3806bb6c75d29c94aa9ff'), 'author': 'python', 'age': 50, 'title': 'language', 'text': 'Sitoi Blog'}</span><br><span class="line">{'_id': ObjectId('5ee3806bb6c75d29c94aaa00'), 'author': 'mongodb', 'age': 80, 'title': 'NoSQL', 'text': 'Sitoi Blog'}</span><br><span class="line">{'_id': ObjectId('5ee3806bb6c75d29c94aaa01'), 'author': 'pymongo', 'age': 97, 'title': 'Python for MongoDB', 'text': 'Sitoi Blog'}</span><br></pre></td></tr></tbody></table></figure><h3 id="正则查询"><a href="#正则查询" class="headerlink" title="正则查询"></a>正则查询</h3><p>这里使用 <code>$regex</code> 来指定正则匹配，<code>^S.*</code> 代表以 <code>S</code> 开头的正则表达式。<br>这里将一些功能符号再归类为下表。</p><table><thead><tr><th align="center">符号</th><th align="center">含义</th><th align="center">示例</th><th align="center">示例含义</th></tr></thead><tbody><tr><td align="center">$regex</td><td align="center">匹配正则表达式</td><td align="center"><code>{'author': {'$regex': '^S.*'}}</code></td><td align="center"><code>author</code> 以 <code>S</code> 开头</td></tr><tr><td align="center">$exists</td><td align="center">属性是否存在</td><td align="center"><code>{'author': {'$exists': True}}</code></td><td align="center"><code>author</code> 属性存在</td></tr><tr><td align="center">$type</td><td align="center">类型判断</td><td align="center"><code>{'age': {'$type': 'int'}}</code></td><td align="center"><code>age</code> 的类型为 <code>int</code></td></tr><tr><td align="center">$mod</td><td align="center">数字模操作</td><td align="center"><code>{'age': {'$mod': [5, 0]}}</code></td><td align="center">年龄模 <code>5</code> 余 <code>0</code></td></tr><tr><td align="center">$text</td><td align="center">文本查询</td><td align="center"><code>{'$text': {'$search': 'Sitoi'}}</code></td><td align="center">text 类型的属性中包含 <code>Sitoi</code> 字符串</td></tr><tr><td align="center">$where</td><td align="center">高级条件查询</td><td align="center"><code>{'$where': 'obj.fans_count == obj.follows_count'}</code></td><td align="center">自身粉丝数等于关注数</td></tr></tbody></table><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">query = {<span class="string">"name"</span>: {<span class="string">"$regex"</span>: <span class="string">"^M.*"</span>}}</span><br><span class="line">projection = {}</span><br><span class="line">result = col.find(filter=query, projection=projection)</span><br></pre></td></tr></tbody></table></figure><p>查询结果：</p><figure class="highlight text"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">{'_id': ObjectId('5ee3806bb6c75d29c94aa9fc'), 'author': 'Sitoi', 'age': 22, 'title': 'Sitoi-blog', 'tags': ['man', 'spider']}</span><br></pre></td></tr></tbody></table></figure><h3 id="计数"><a href="#计数" class="headerlink" title="计数"></a>计数</h3><p>根据查询条件计数</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">query = {}</span><br><span class="line">count = col.count_documents(filter=query)</span><br></pre></td></tr></tbody></table></figure><p>文档条数：</p><figure class="highlight text"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">6</span><br></pre></td></tr></tbody></table></figure><h3 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h3><p>用 <code>List</code> 嵌套 <code>tuple</code> 的方式即可：[(<code>字段名1</code>，<code>排序方式1</code>),(<code>字段名2</code>，<code>排序方式2</code>)]</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">result = col.find().sort([(<span class="string">"author"</span>, <span class="number">1</span>), (<span class="string">"title"</span>, <span class="number">1</span>)])</span><br></pre></td></tr></tbody></table></figure><p>排序结果：</p><figure class="highlight text"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">{'_id': ObjectId('5ee3806bb6c75d29c94aa9fc'), 'author': 'Sitoi', 'age': 22, 'title': 'Sitoi-blog', 'tags': ['man', 'spider']}</span><br><span class="line">{'_id': ObjectId('5ee3806bb6c75d29c94aa9fe'), 'author': 'bash', 'age': 30, 'title': 'bash', 'text': 'Sitoi Blog'}</span><br><span class="line">{'_id': ObjectId('5ee3806bb6c75d29c94aa9fd'), 'author': 'blog', 'age': 18, 'title': 'blog', 'text': 'Sitoi Blog'}</span><br><span class="line">{'_id': ObjectId('5ee3806bb6c75d29c94aaa00'), 'author': 'mongodb', 'age': 80, 'title': 'NoSQL', 'text': 'Sitoi Blog'}</span><br><span class="line">{'_id': ObjectId('5ee3806bb6c75d29c94aaa01'), 'author': 'pymongo', 'age': 97, 'title': 'Python for MongoDB', 'text': 'Sitoi Blog'}</span><br><span class="line">{'_id': ObjectId('5ee3806bb6c75d29c94aa9ff'), 'author': 'python', 'age': 50, 'title': 'language', 'text': 'Sitoi Blog'}</span><br></pre></td></tr></tbody></table></figure><h3 id="跳过"><a href="#跳过" class="headerlink" title="跳过"></a>跳过</h3><p>跳过一个</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">result = col.find().skip(<span class="number">1</span>)</span><br></pre></td></tr></tbody></table></figure><p>查询结果：</p><figure class="highlight text"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">{'_id': ObjectId('5ee3806bb6c75d29c94aa9fd'), 'author': 'blog', 'age': 18, 'title': 'blog', 'text': 'Sitoi Blog'}</span><br><span class="line">{'_id': ObjectId('5ee3806bb6c75d29c94aa9fe'), 'author': 'bash', 'age': 30, 'title': 'bash', 'text': 'Sitoi Blog'}</span><br><span class="line">{'_id': ObjectId('5ee3806bb6c75d29c94aa9ff'), 'author': 'python', 'age': 50, 'title': 'language', 'text': 'Sitoi Blog'}</span><br><span class="line">{'_id': ObjectId('5ee3806bb6c75d29c94aaa00'), 'author': 'mongodb', 'age': 80, 'title': 'NoSQL', 'text': 'Sitoi Blog'}</span><br><span class="line">{'_id': ObjectId('5ee3806bb6c75d29c94aaa01'), 'author': 'pymongo', 'age': 97, 'title': 'Python for MongoDB', 'text': 'Sitoi Blog'}</span><br></pre></td></tr></tbody></table></figure><h3 id="限制"><a href="#限制" class="headerlink" title="限制"></a>限制</h3><p>限制最多返回多少个</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">result = col.find().limit(<span class="number">1</span>)</span><br></pre></td></tr></tbody></table></figure><p>查询结果：</p><figure class="highlight text"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">{'_id': ObjectId('5ee3806bb6c75d29c94aa9fc'), 'author': 'Sitoi', 'age': 22, 'title': 'Sitoi-blog', 'tags': ['man', 'spider']}</span><br></pre></td></tr></tbody></table></figure><h2 id="更新文档"><a href="#更新文档" class="headerlink" title="更新文档"></a>更新文档</h2><h3 id="更新单个文档"><a href="#更新单个文档" class="headerlink" title="更新单个文档"></a>更新单个文档</h3><p><code>update_one</code> 只更新第一个文档。</p><p>参数说明：</p><ul><li><code>filter</code>：需要更新的数据的查询条件</li><li><code>update</code>：包含更新的方式，以及更新的内容</li><li><code>upsert</code>：不存在是否插入，更新的数据</li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">query = {<span class="string">"age"</span>: <span class="number">18</span>}</span><br><span class="line">update = {<span class="string">"$set"</span>: {<span class="string">"age"</span>: <span class="number">20</span>}}</span><br><span class="line">modified_count = col.update_one(filter=query, update=update, upsert=<span class="literal">False</span>).modified_count</span><br></pre></td></tr></tbody></table></figure><p>更新条数：</p><figure class="highlight text"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1</span><br></pre></td></tr></tbody></table></figure><h3 id="更新多个文档"><a href="#更新多个文档" class="headerlink" title="更新多个文档"></a>更新多个文档</h3><blockquote><p>使用方法和 <code>update_one</code> 一致</p></blockquote><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">query = {<span class="string">"text"</span>: <span class="string">"Sitoi Blog"</span>}</span><br><span class="line">update = {<span class="string">"$set"</span>: {<span class="string">"text"</span>: <span class="string">"Sitoi PyMongo"</span>}}</span><br><span class="line">modified_count = col.update_many(filter=query, update=update, upsert=<span class="literal">False</span>).modified_count</span><br></pre></td></tr></tbody></table></figure><p>更新条数：</p><figure class="highlight text"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">5</span><br></pre></td></tr></tbody></table></figure><h2 id="删除文档"><a href="#删除文档" class="headerlink" title="删除文档"></a>删除文档</h2><h3 id="删除单个文档"><a href="#删除单个文档" class="headerlink" title="删除单个文档"></a>删除单个文档</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">query = {<span class="string">"author"</span>: <span class="string">"Sitoi"</span>}</span><br><span class="line">result = col.delete_one(filter=query).deleted_count</span><br></pre></td></tr></tbody></table></figure><p>删除条数：</p><figure class="highlight text"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1</span><br></pre></td></tr></tbody></table></figure><h3 id="删除多个文档"><a href="#删除多个文档" class="headerlink" title="删除多个文档"></a>删除多个文档</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">query = {}</span><br><span class="line">results = col.delete_many(filter=query).deleted_count</span><br></pre></td></tr></tbody></table></figure><p>删除条数：</p><figure class="highlight text"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">5</span><br></pre></td></tr></tbody></table></figure><h2 id="附录（代码）"><a href="#附录（代码）" class="headerlink" title="附录（代码）"></a>附录（代码）</h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pymongo <span class="keyword">import</span> MongoClient</span><br><span class="line"></span><br><span class="line">clinet = MongoClient(<span class="string">"mongodb://localhost:27017"</span>)</span><br><span class="line"></span><br><span class="line">db = clinet[<span class="string">"demo"</span>]</span><br><span class="line">col = db[<span class="string">"demo"</span>]</span><br><span class="line"></span><br><span class="line">print(<span class="string">"&gt;&gt;&gt; 查看数据库信息"</span>)</span><br><span class="line">server_info = clinet.server_info()</span><br><span class="line">print(server_info)</span><br><span class="line"></span><br><span class="line">print(<span class="string">"&gt;&gt;&gt; 显示当前数据库服务器上的数据库名"</span>)</span><br><span class="line">database_names = clinet.list_database_names()</span><br><span class="line">print(database_names)</span><br><span class="line"></span><br><span class="line">print(<span class="string">"&gt;&gt;&gt; 显示当前数据库上的全部集合名"</span>)</span><br><span class="line">collection_names = db.list_collection_names()</span><br><span class="line">print(collection_names)</span><br><span class="line"></span><br><span class="line">print(<span class="string">"&gt;&gt;&gt; 插入一个文档"</span>)</span><br><span class="line">demo = {</span><br><span class="line">    <span class="string">"author"</span>: <span class="string">"Sitoi"</span>,</span><br><span class="line">    <span class="string">"age"</span>: <span class="number">22</span>,</span><br><span class="line">    <span class="string">"title"</span>: <span class="string">"Sitoi-blog"</span>,</span><br><span class="line">    <span class="string">"tags"</span>: [<span class="string">"man"</span>, <span class="string">"spider"</span>]</span><br><span class="line">}</span><br><span class="line">demo_id = col.insert_one(demo).inserted_id</span><br><span class="line">print(demo_id)</span><br><span class="line"></span><br><span class="line">print(<span class="string">"&gt;&gt;&gt; 插入多个文档"</span>)</span><br><span class="line">demos = [</span><br><span class="line">    {<span class="string">"author"</span>: <span class="string">"blog"</span>, <span class="string">"age"</span>: <span class="number">18</span>, <span class="string">"title"</span>: <span class="string">"blog"</span>, <span class="string">"text"</span>: <span class="string">"Sitoi Blog"</span>},</span><br><span class="line">    {<span class="string">"author"</span>: <span class="string">"bash"</span>, <span class="string">"age"</span>: <span class="number">30</span>, <span class="string">"title"</span>: <span class="string">"bash"</span>, <span class="string">"text"</span>: <span class="string">"Sitoi Blog"</span>},</span><br><span class="line">    {<span class="string">"author"</span>: <span class="string">"python"</span>, <span class="string">"age"</span>: <span class="number">50</span>, <span class="string">"title"</span>: <span class="string">"language"</span>, <span class="string">"text"</span>: <span class="string">"Sitoi Blog"</span>},</span><br><span class="line">    {<span class="string">"author"</span>: <span class="string">"mongodb"</span>, <span class="string">"age"</span>: <span class="number">80</span>, <span class="string">"title"</span>: <span class="string">"NoSQL"</span>, <span class="string">"text"</span>: <span class="string">"Sitoi Blog"</span>},</span><br><span class="line">    {<span class="string">"author"</span>: <span class="string">"pymongo"</span>, <span class="string">"age"</span>: <span class="number">97</span>, <span class="string">"title"</span>: <span class="string">"Python for MongoDB"</span>, <span class="string">"text"</span>: <span class="string">"Sitoi Blog"</span>},</span><br><span class="line">]</span><br><span class="line">demo_ids = col.insert_many(demos).inserted_ids</span><br><span class="line">print(demo_ids)</span><br><span class="line"></span><br><span class="line">print(<span class="string">"&gt;&gt;&gt; 查询单个文档"</span>)</span><br><span class="line">query = {}</span><br><span class="line">projection = <span class="literal">None</span></span><br><span class="line">result = col.find_one(filter=query, projection=projection)</span><br><span class="line">print(result)</span><br><span class="line"></span><br><span class="line">print(<span class="string">"&gt;&gt;&gt; 查询多个文档"</span>)</span><br><span class="line">query = {}</span><br><span class="line">projection = <span class="literal">None</span></span><br><span class="line">result = col.find(filter=query, projection=projection)</span><br><span class="line"><span class="keyword">for</span> one <span class="keyword">in</span> result:</span><br><span class="line">    print(one)</span><br><span class="line"></span><br><span class="line">print(<span class="string">"&gt;&gt;&gt; 所有字段"</span>)</span><br><span class="line"></span><br><span class="line">results = col.find()</span><br><span class="line"><span class="keyword">for</span> one <span class="keyword">in</span> results:</span><br><span class="line">    print(one)</span><br><span class="line"></span><br><span class="line">print(<span class="string">"&gt;&gt;&gt; 用字典指定要显示的哪几个字段"</span>)</span><br><span class="line">query = {}</span><br><span class="line">projection = {<span class="string">"_id"</span>: <span class="literal">True</span>, <span class="string">"author"</span>: <span class="literal">True</span>}</span><br><span class="line">results = col.find(filter=query, projection=projection)</span><br><span class="line"><span class="keyword">for</span> one <span class="keyword">in</span> results:</span><br><span class="line">    print(one)</span><br><span class="line"></span><br><span class="line">print(<span class="string">"&gt;&gt;&gt; 用字典指定去掉哪些字段"</span>)</span><br><span class="line">query = {}</span><br><span class="line">projection = {<span class="string">"_id"</span>: <span class="literal">False</span>, <span class="string">"author"</span>: <span class="literal">False</span>}</span><br><span class="line">results = col.find(query, projection=projection)</span><br><span class="line"><span class="keyword">for</span> one <span class="keyword">in</span> results:</span><br><span class="line">    print(one)</span><br><span class="line"></span><br><span class="line">print(<span class="string">"&gt;&gt;&gt; 用列表指定要显示哪几个字段"</span>)</span><br><span class="line">query = {}</span><br><span class="line">projection = [<span class="string">"author"</span>, <span class="string">"title"</span>]</span><br><span class="line">results = col.find(filter=query, projection=projection)</span><br><span class="line"><span class="keyword">for</span> one <span class="keyword">in</span> results:</span><br><span class="line">    print(one)</span><br><span class="line"></span><br><span class="line">print(<span class="string">"&gt;&gt;&gt; 指定范围，大于等于，小于等于"</span>)</span><br><span class="line">query = {<span class="string">"age"</span>: {<span class="string">"$gte"</span>: <span class="number">10</span>, <span class="string">"$lte"</span>: <span class="number">30</span>}}</span><br><span class="line">projection = <span class="literal">None</span></span><br><span class="line">results = col.find(filter=query, projection=projection)</span><br><span class="line"><span class="keyword">for</span> one <span class="keyword">in</span> results:</span><br><span class="line">    print(one)</span><br><span class="line"></span><br><span class="line">print(<span class="string">"&gt;&gt;&gt; 不同字段，并列条件"</span>)</span><br><span class="line">query = {<span class="string">"author"</span>: <span class="string">"Sitoi"</span>, <span class="string">"age"</span>: <span class="number">22</span>}</span><br><span class="line">projection = <span class="literal">None</span></span><br><span class="line">results = col.find(filter=query, projection=projection)</span><br><span class="line"><span class="keyword">for</span> one <span class="keyword">in</span> results:</span><br><span class="line">    print(one)</span><br><span class="line"></span><br><span class="line">print(<span class="string">"&gt;&gt;&gt; 相同字段，并列条件"</span>)</span><br><span class="line"><span class="comment"># 错误：</span></span><br><span class="line">query = {<span class="string">"age"</span>: {<span class="string">"$gt"</span>: <span class="number">50</span>}, <span class="string">"age"</span>: {<span class="string">"$lt"</span>: <span class="number">100</span>}}</span><br><span class="line"><span class="comment"># 正确：</span></span><br><span class="line">query = {<span class="string">"age"</span>: {<span class="string">"$gte"</span>: <span class="number">10</span>, <span class="string">"$lte"</span>: <span class="number">20</span>}}</span><br><span class="line">projection = <span class="literal">None</span></span><br><span class="line">results = col.find(filter=query, projection=projection)</span><br><span class="line"><span class="keyword">for</span> one <span class="keyword">in</span> results:</span><br><span class="line">    print(one)</span><br><span class="line"></span><br><span class="line">print(<span class="string">"&gt;&gt;&gt; 不同字段，或条件"</span>)</span><br><span class="line">query = {<span class="string">"$or"</span>: [{<span class="string">"age"</span>: <span class="number">22</span>}, {<span class="string">"author"</span>: <span class="string">"blog"</span>}]}</span><br><span class="line">projection = <span class="literal">None</span></span><br><span class="line">results = col.find(filter=query, projection=projection)</span><br><span class="line"><span class="keyword">for</span> one <span class="keyword">in</span> results:</span><br><span class="line">    print(one)</span><br><span class="line"></span><br><span class="line">print(<span class="string">"&gt;&gt;&gt; 相同字段，或条件"</span>)</span><br><span class="line">query = {<span class="string">"$or"</span>: [{<span class="string">"age"</span>: <span class="number">22</span>}, {<span class="string">"age"</span>: <span class="number">18</span>}]}</span><br><span class="line">projection = <span class="literal">None</span></span><br><span class="line">results = col.find(filter=query, projection=projection)</span><br><span class="line"><span class="keyword">for</span> one <span class="keyword">in</span> results:</span><br><span class="line">    print(one)</span><br><span class="line"></span><br><span class="line">print(<span class="string">"&gt;&gt;&gt; 字段不存在"</span>)</span><br><span class="line">query = {<span class="string">"text"</span>: <span class="literal">None</span>}</span><br><span class="line">projection = <span class="literal">None</span></span><br><span class="line">results = col.find(filter=query, projection=projection)</span><br><span class="line"><span class="keyword">for</span> one <span class="keyword">in</span> results:</span><br><span class="line">    print(one)</span><br><span class="line"></span><br><span class="line">print(<span class="string">"&gt;&gt;&gt; 字段存在"</span>)</span><br><span class="line">query = {<span class="string">"text"</span>: {<span class="string">"$ne"</span>: <span class="literal">None</span>}}</span><br><span class="line">projection = <span class="literal">None</span></span><br><span class="line">results = col.find(filter=query, projection=projection)</span><br><span class="line"><span class="keyword">for</span> one <span class="keyword">in</span> results:</span><br><span class="line">    print(one)</span><br><span class="line"></span><br><span class="line">print(<span class="string">"&gt;&gt;&gt; 正则查询"</span>)</span><br><span class="line">query = {<span class="string">"author"</span>: {<span class="string">"$regex"</span>: <span class="string">"^S.*"</span>}}</span><br><span class="line">projection = <span class="literal">None</span></span><br><span class="line">results = col.find(filter=query, projection=projection)</span><br><span class="line"><span class="keyword">for</span> one <span class="keyword">in</span> results:</span><br><span class="line">    print(one)</span><br><span class="line"></span><br><span class="line">print(<span class="string">"&gt;&gt;&gt; 计数"</span>)</span><br><span class="line">query = {}</span><br><span class="line">count = col.count_documents(filter=query)</span><br><span class="line">print(count)</span><br><span class="line"></span><br><span class="line">print(<span class="string">"&gt;&gt;&gt; 排序"</span>)</span><br><span class="line">results = col.find().sort([(<span class="string">"author"</span>, <span class="number">1</span>), (<span class="string">"title"</span>, <span class="number">-1</span>)])</span><br><span class="line"><span class="keyword">for</span> one <span class="keyword">in</span> results:</span><br><span class="line">    print(one)</span><br><span class="line"></span><br><span class="line">print(<span class="string">"&gt;&gt;&gt; 跳过"</span>)</span><br><span class="line">results = col.find().skip(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">for</span> one <span class="keyword">in</span> results:</span><br><span class="line">    print(one)</span><br><span class="line"></span><br><span class="line">print(<span class="string">"&gt;&gt;&gt; 限制"</span>)</span><br><span class="line">results = col.find().limit(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">for</span> one <span class="keyword">in</span> results:</span><br><span class="line">    print(one)</span><br><span class="line"></span><br><span class="line">print(<span class="string">"&gt;&gt;&gt; 更新单个文档"</span>)</span><br><span class="line">query = {<span class="string">"age"</span>: <span class="number">18</span>}</span><br><span class="line">update = {<span class="string">"$set"</span>: {<span class="string">"age"</span>: <span class="number">20</span>}}</span><br><span class="line">modified_count = col.update_one(filter=query, update=update, upsert=<span class="literal">False</span>).modified_count</span><br><span class="line">print(modified_count)</span><br><span class="line"></span><br><span class="line">print(<span class="string">"&gt;&gt;&gt; 更新多个文档"</span>)</span><br><span class="line">query = {<span class="string">"text"</span>: <span class="string">"Sitoi Blog"</span>}</span><br><span class="line">update = {<span class="string">"$set"</span>: {<span class="string">"text"</span>: <span class="string">"Sitoi PyMongo"</span>}}</span><br><span class="line">modified_count = col.update_many(filter=query, update=update, upsert=<span class="literal">False</span>).modified_count</span><br><span class="line">print(modified_count)</span><br><span class="line"></span><br><span class="line">print(<span class="string">"&gt;&gt;&gt; 删除单个文档"</span>)</span><br><span class="line">query = {<span class="string">"author"</span>: <span class="string">"Sitoi"</span>}</span><br><span class="line">delete_count = col.delete_one(filter=query).deleted_count</span><br><span class="line">print(delete_count)</span><br><span class="line"></span><br><span class="line">print(<span class="string">"&gt;&gt;&gt; 删除多个文档"</span>)</span><br><span class="line">query = {}</span><br><span class="line">delete_count = col.delete_many(filter=query).deleted_count</span><br><span class="line">print(delete_count)</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;建立基本连接&quot;&gt;&lt;a href=&quot;#建立基本连接&quot; class=&quot;headerlink&quot; title=&quot;建立基本连接&quot;&gt;&lt;/a&gt;建立基本连接&lt;/h2&gt;&lt;p&gt;首先我们需要建立一个连接，连接 MongoDB 时，我们需要使用 PyMongo 库中的 MongoClie</summary>
      
    
    
    
    <category term="数据库" scheme="https://sitoi.cn/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
    <category term="MongoDB" scheme="https://sitoi.cn/tags/MongoDB/"/>
    
    <category term="NoSQL" scheme="https://sitoi.cn/tags/NoSQL/"/>
    
    <category term="PyMongo" scheme="https://sitoi.cn/tags/PyMongo/"/>
    
    <category term="CRUD" scheme="https://sitoi.cn/tags/CRUD/"/>
    
    <category term="Python" scheme="https://sitoi.cn/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Fedora 安装 MongoDB 教程</title>
    <link href="https://sitoi.cn/posts/37161.html"/>
    <id>https://sitoi.cn/posts/37161.html</id>
    <published>2020-06-09T12:04:00.000Z</published>
    <updated>2020-08-19T05:45:51.882Z</updated>
    
    <content type="html"><![CDATA[<h1 id="MongoDB-安装"><a href="#MongoDB-安装" class="headerlink" title="MongoDB 安装"></a>MongoDB 安装</h1><h2 id="安装环境"><a href="#安装环境" class="headerlink" title="安装环境"></a>安装环境</h2><ul><li>Fedora 29</li></ul><h2 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h2><ol><li>安装 <code>mongodb</code> 和 <code>mongodb-server</code></li><li>启动服务</li></ol><h3 id="安装-MongoDB-和-MongoDB-Server"><a href="#安装-MongoDB-和-MongoDB-Server" class="headerlink" title="安装 MongoDB 和 MongoDB-Server"></a>安装 MongoDB 和 MongoDB-Server</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo dnf install mongodb mongodb-server</span><br></pre></td></tr></tbody></table></figure><h3 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h3><p>启动 <code>mongod</code> 服务</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl start mongod.service</span><br></pre></td></tr></tbody></table></figure><p>设置开机自动启动</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl <span class="built_in">enable</span> mongod.service</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;MongoDB-安装&quot;&gt;&lt;a href=&quot;#MongoDB-安装&quot; class=&quot;headerlink&quot; title=&quot;MongoDB 安装&quot;&gt;&lt;/a&gt;MongoDB 安装&lt;/h1&gt;&lt;h2 id=&quot;安装环境&quot;&gt;&lt;a href=&quot;#安装环境&quot; class=&quot;head</summary>
      
    
    
    
    <category term="数据库" scheme="https://sitoi.cn/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
    <category term="安装文档" scheme="https://sitoi.cn/tags/%E5%AE%89%E8%A3%85%E6%96%87%E6%A1%A3/"/>
    
    <category term="Linux" scheme="https://sitoi.cn/tags/Linux/"/>
    
    <category term="MongoDB" scheme="https://sitoi.cn/tags/MongoDB/"/>
    
    <category term="NoSQL" scheme="https://sitoi.cn/tags/NoSQL/"/>
    
  </entry>
  
  <entry>
    <title>Squid for Windows 安装教程</title>
    <link href="https://sitoi.cn/posts/53752.html"/>
    <id>https://sitoi.cn/posts/53752.html</id>
    <published>2020-06-09T07:21:59.000Z</published>
    <updated>2020-08-19T05:45:51.882Z</updated>
    
    <content type="html"><![CDATA[<h2 id="下载-Squid-for-Windows"><a href="#下载-Squid-for-Windows" class="headerlink" title="下载 Squid for Windows"></a>下载 Squid for Windows</h2><p>下载地址：<a href="https://squid.diladele.com/">https://squid.diladele.com/</a></p><h2 id="安装-squid-服务"><a href="#安装-squid-服务" class="headerlink" title="安装 squid 服务"></a>安装 squid 服务</h2><ol><li><p>双击 <code>squid.msi</code> 安装 squid </p><p> <img src="https://cdn.jsdelivr.net/gh/Sitoi/cdn/img/squid/image-20200608162038253.png" alt="squid.msi"></p></li><li><p>点击 <code>Next</code> 进入下一步</p><p> <img src="https://cdn.jsdelivr.net/gh/Sitoi/cdn/img/squid/image-20200608162314774.png" alt="安装 Squid"></p></li><li><p>勾选 <code>I accept</code> -&gt; 点击 <code>Next</code> 进入下一步</p><p> <img src="https://cdn.jsdelivr.net/gh/Sitoi/cdn/img/squid/image-20200608162334357.png" alt="接受协议"></p></li><li><p>选择安装路径 -&gt; 点击 <code>Next</code> 进入下一步</p><p> <img src="https://cdn.jsdelivr.net/gh/Sitoi/cdn/img/squid/image-20200608162407927.png" alt="选择安装路径"></p></li><li><p>点击 <code>Install</code> 进行安装</p><p> <img src="https://cdn.jsdelivr.net/gh/Sitoi/cdn/img/squid/image-20200608162417741.png" alt="开始安装"></p></li><li><p>等待安装完成</p><p> <img src="https://cdn.jsdelivr.net/gh/Sitoi/cdn/img/squid/image-20200608162435862.png" alt="安装中"></p></li><li><p>安装完成</p><p> <img src="https://cdn.jsdelivr.net/gh/Sitoi/cdn/img/squid/image-20200608162507517.png" alt="完成安装"></p></li><li><p>检测 电脑右下方 <code>Squid for Windows</code> 是否启动</p><p> <img src="https://cdn.jsdelivr.net/gh/Sitoi/cdn/img/squid/image-20200608162538460.png" alt="安装完成并运行"></p></li></ol><h2 id="安装完成"><a href="#安装完成" class="headerlink" title="安装完成"></a>安装完成</h2><p>使用浏览器打开 <a href="http://127.0.0.1:3128/">http://127.0.0.1:3128</a>，出现以下页面就表示安装成功。</p><p><img src="https://cdn.jsdelivr.net/gh/Sitoi/cdn/img/squid/image-20200609153622275.png" alt="Squid Web"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;下载-Squid-for-Windows&quot;&gt;&lt;a href=&quot;#下载-Squid-for-Windows&quot; class=&quot;headerlink&quot; title=&quot;下载 Squid for Windows&quot;&gt;&lt;/a&gt;下载 Squid for Windows&lt;/h2&gt;&lt;</summary>
      
    
    
    
    <category term="爬虫" scheme="https://sitoi.cn/categories/%E7%88%AC%E8%99%AB/"/>
    
    <category term="代理" scheme="https://sitoi.cn/categories/%E7%88%AC%E8%99%AB/%E4%BB%A3%E7%90%86/"/>
    
    
    <category term="爬虫" scheme="https://sitoi.cn/tags/%E7%88%AC%E8%99%AB/"/>
    
    <category term="Squid" scheme="https://sitoi.cn/tags/Squid/"/>
    
    <category term="代理" scheme="https://sitoi.cn/tags/%E4%BB%A3%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>多机分布式环境下的 selenium 集群</title>
    <link href="https://sitoi.cn/posts/19006.html"/>
    <id>https://sitoi.cn/posts/19006.html</id>
    <published>2020-06-09T04:22:14.000Z</published>
    <updated>2020-08-19T05:45:51.886Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>还是爬虫里面的某个场景需要重度使用 selenium 场景 ，所以需要起这样一个集群</p><blockquote><p>对比</p></blockquote><ul><li>单机版</li><li>Docker 单机版</li><li>Docker 单机集群版</li><li>Docker 分布式集群版</li></ul><p>我们在使用 <code>selenium</code> 的时候，我们一般就使用以上的环境和模式</p><h2 id="单机版"><a href="#单机版" class="headerlink" title="单机版"></a>单机版</h2><p>单机怎么操作呢，下载相应的 <code>webdriver</code>，安装配置参考教程 <a href="/posts/14489.html">Selenium &amp; ChromeDriver 全平台安装教程（Mac、Windows、Linux）</a></p><p>对于小型的使用环境，比如单线程操作，我们安装好环境直接使用就可以了</p><blockquote><p>使用案例（Chrome）</p></blockquote><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line">browser = webdriver.Chrome()</span><br><span class="line">browser.get(<span class="string">'https://sitoi.cn/'</span>)</span><br><span class="line">browser.get_screenshot_as_file(<span class="string">"sitoi.cn.png"</span>)</span><br><span class="line">browser.close()</span><br></pre></td></tr></tbody></table></figure><h2 id="Docker-单机版"><a href="#Docker-单机版" class="headerlink" title="Docker 单机版"></a>Docker 单机版</h2><p>保证安装好 <code>docker</code> 和 <code>docker-compose</code> ，这里就直接使用 <code>docker-compose.yml</code> 文件起一个实例</p><ol><li><p>编写 <code>docker-compose.yml</code> 文件，内容如下：</p> <figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">"3"</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">chrome:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">selenium/standalone-chrome:latest</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">GRID_TIMEOUT=40</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">4444</span><span class="string">:4444</span></span><br></pre></td></tr></tbody></table></figure></li><li><p>在 <code>docker-compose.yml</code> 所在的目录，运行如下命令：</p> <figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker-compose up -d</span><br></pre></td></tr></tbody></table></figure></li><li><p>检测服务是否启动成功</p><p> 浏览器打开 <a href="http://127.0.0.1:4444/">http://127.0.0.1:4444/</a> 就可以看到我们的 hub 界面了，端口对应 <code>docker-compose.yml</code> 文件内的 <code>ports</code></p></li><li><p>使用案例（Chrome）</p> <figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line">browser = webdriver.Remote(</span><br><span class="line">    command_executor=<span class="string">'http://127.0.0.1:4444/wd/hub'</span>,</span><br><span class="line">    desired_capabilities={</span><br><span class="line">        <span class="string">'browserName'</span>: <span class="string">'chrome'</span>,</span><br><span class="line">        <span class="string">'version'</span>: <span class="string">''</span>,</span><br><span class="line">        <span class="string">'platform'</span>: <span class="string">'ANY'</span>,</span><br><span class="line">        <span class="string">'goog:chromeOptions'</span>: {</span><br><span class="line">            <span class="string">'extensions'</span>: [],</span><br><span class="line">            <span class="string">'args'</span>: [<span class="string">'--no-sandbox'</span>, <span class="string">'-headless'</span>, <span class="string">'--disable-dev-shm-usage'</span>]}</span><br><span class="line">    }</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">browser.get(<span class="string">"https://sitoi.cn"</span>)</span><br><span class="line">browser.get_screenshot_as_file(<span class="string">"sitoi.cn.png"</span>)</span><br><span class="line">browser.quit()</span><br></pre></td></tr></tbody></table></figure></li></ol><blockquote><p>如果你要开很多个也可以，前台挂个 <code>nginx</code> 然后启用多个之后集群</p></blockquote><h2 id="Docker-单机集群版"><a href="#Docker-单机集群版" class="headerlink" title="Docker 单机集群版"></a>Docker 单机集群版</h2><ol><li><p>编写 <code>docker-compose.yml</code> 文件，内容如下：</p> <figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">'2'</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">hub:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">selenium/hub:latest</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">"0.0.0.0:4445:4444"</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">chrome:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">selenium/node-chrome:latest</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">hub</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">HUB_HOST:</span> <span class="string">hub</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">firefox:</span></span><br><span class="line">      <span class="attr">image:</span> <span class="string">selenium/node-firefox:latest</span></span><br><span class="line">      <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">      <span class="attr">depends_on:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">hub</span></span><br><span class="line">      <span class="attr">environment:</span></span><br><span class="line">        <span class="attr">HUB_HOST:</span> <span class="string">hub</span></span><br></pre></td></tr></tbody></table></figure></li><li><p>在 <code>docker-compose.yml</code> 所在的目录，运行如下命令：</p> <figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker-compose up -d</span><br></pre></td></tr></tbody></table></figure></li><li><p>检测服务是否启动成功</p><p> 浏览器打开 <a href="http://127.0.0.1:4445/">http://127.0.0.1:4445/</a> 就可以看到我们的 hub 界面了，端口对应 <code>docker-compose.yml</code> 文件内的 <code>ports</code></p></li></ol><ol start="4"><li><p>使用案例（Firefox）</p> <figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line">browser = webdriver.Remote(</span><br><span class="line">    command_executor=<span class="string">'http://127.0.0.1:4445/wd/hub'</span>,</span><br><span class="line">    desired_capabilities={</span><br><span class="line">        <span class="string">'browserName'</span>: <span class="string">'firefox'</span>,</span><br><span class="line">        <span class="string">'version'</span>: <span class="string">''</span>,</span><br><span class="line">        <span class="string">'platform'</span>: <span class="string">'ANY'</span>,</span><br><span class="line">        <span class="string">'goog:firefoxOptions'</span>: {</span><br><span class="line">            <span class="string">'extensions'</span>: [],</span><br><span class="line">            <span class="string">'args'</span>: [<span class="string">'--no-sandbox'</span>, <span class="string">'-headless'</span>, <span class="string">'--disable-dev-shm-usage'</span>]}</span><br><span class="line">    }</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">browser.get(<span class="string">"https://sitoi.cn"</span>)</span><br><span class="line">browser.get_screenshot_as_file(<span class="string">"sitoi.cn.png"</span>)</span><br><span class="line">browser.quit()</span><br></pre></td></tr></tbody></table></figure></li></ol><h2 id="多机集群"><a href="#多机集群" class="headerlink" title="多机集群"></a>多机集群</h2><p>为了解决单机（单机集群）横向扩展不足的问题，我们可以搭建分布式的 selenium 集群，将 hub 节点 和 node 节点拆分开，方便以后的横向扩展，可以通过添加机器来解决单机内存等性能问题。</p><h3 id="部署-hub-节点"><a href="#部署-hub-节点" class="headerlink" title="部署 hub 节点"></a>部署 hub 节点</h3><p>hub 节点假设在 A 机上，IP 地址为: <code>10.10.1.1</code></p><ol><li><p>编写 <code>docker-compose.yml</code> 文件，内容如下：</p> <figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">'2'</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">hub:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">selenium/hub:latest</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">"0.0.0.0:4446:4444"</span></span><br></pre></td></tr></tbody></table></figure></li><li><p>在 <code>docker-compose.yml</code> 所在的目录，运行如下命令：</p> <figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker-compose up -d</span><br></pre></td></tr></tbody></table></figure></li><li><p>检测服务是否启动成功</p><p> 浏览器打开 <a href="http://127.0.0.1:4446/">http://127.0.0.1:4446/</a> 就可以看到我们的 hub 界面了，端口对应 <code>docker-compose.yml</code> 文件内的 <code>ports</code></p></li></ol><h3 id="部署-node-节点（chrome）"><a href="#部署-node-节点（chrome）" class="headerlink" title="部署 node 节点（chrome）"></a>部署 node 节点（chrome）</h3><p>node 节点（chrome）假设 B 机上，IP 地址为：<code>10.10.2.1</code></p><ol><li><p>编写 <code>docker-compose.yml</code> 文件，内容如下：</p> <figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">'2'</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">chrome:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">selenium/node-chrome:latest</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">HUB_HOST=10.10.2.22</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">HUB_PORT=4446</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">REMOTE_HOST=http://10.10.2.1:5556</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span><span class="string">:5556:5555</span></span><br></pre></td></tr></tbody></table></figure> <div class="note info">            <p><code>HUB_HOST</code> 填写 hub 节点的 IP 地址<br><code>HUB_PORT</code> 填写 hub 节点的 PORT 端口<br><code>REMOTE_HOST</code> 填写地址为 node 节点的 IP 地址，和端口号</p>          </div></li><li><p>在 <code>docker-compose.yml</code> 所在的目录，运行如下命令：</p> <figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker-compose up -d</span><br></pre></td></tr></tbody></table></figure></li></ol><h3 id="部署-node-节点（firefox）"><a href="#部署-node-节点（firefox）" class="headerlink" title="部署 node 节点（firefox）"></a>部署 node 节点（firefox）</h3><p>node 节点（firefox）假设 C 机上,ip 地址为：<code>10.10.3.1</code></p><ol><li><p>编写 <code>docker-compose.yml</code> 文件，内容如下：</p> <figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">'2'</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">firefox:</span></span><br><span class="line">      <span class="attr">image:</span> <span class="string">selenium/node-firefox:latest</span></span><br><span class="line">      <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">      <span class="attr">environment:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">HUB_HOST=10.10.2.22</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">HUB_PORT=4446</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">REMOTE_HOST=http://10.10.3.1:5557</span></span><br><span class="line">      <span class="attr">ports:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span><span class="string">:5557:5555</span></span><br></pre></td></tr></tbody></table></figure></li><li><p>在 <code>docker-compose.yml</code> 所在的目录，运行如下命令：</p> <figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker-compose up -d</span><br></pre></td></tr></tbody></table></figure></li><li><p>使用案例（Firefox）</p> <figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line">browser = webdriver.Remote(</span><br><span class="line">    command_executor=<span class="string">'http://127.0.0.1:4446/wd/hub'</span>,</span><br><span class="line">    desired_capabilities={</span><br><span class="line">        <span class="string">'browserName'</span>: <span class="string">'firefox'</span>,</span><br><span class="line">        <span class="string">'version'</span>: <span class="string">''</span>,</span><br><span class="line">        <span class="string">'platform'</span>: <span class="string">'ANY'</span>,</span><br><span class="line">        <span class="string">'goog:firefoxOptions'</span>: {</span><br><span class="line">            <span class="string">'extensions'</span>: [],</span><br><span class="line">            <span class="string">'args'</span>: [<span class="string">'--no-sandbox'</span>, <span class="string">'-headless'</span>, <span class="string">'--disable-dev-shm-usage'</span>]}</span><br><span class="line">    }</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">browser.get(<span class="string">"https://sitoi.cn"</span>)</span><br><span class="line">browser.get_screenshot_as_file(<span class="string">"sitoi.cn.png"</span>)</span><br><span class="line">browser.quit()</span><br></pre></td></tr></tbody></table></figure></li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>使用 docker 极大屏蔽了部署 selenium 会遇到的系统差异问题，步骤简洁，易于配置。</li><li>不再需要本地安装 selenium 环境，直接使用远程的环境即可，环境更统一</li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;还是爬虫里面的某个场景需要重度使用 selenium 场景 ，所以需要起这样一个集群&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;对比&lt;/p&gt;
</summary>
      
    
    
    
    <category term="爬虫" scheme="https://sitoi.cn/categories/%E7%88%AC%E8%99%AB/"/>
    
    
    <category term="Docker" scheme="https://sitoi.cn/tags/Docker/"/>
    
    <category term="Selenium" scheme="https://sitoi.cn/tags/Selenium/"/>
    
    <category term="Selenium Grid" scheme="https://sitoi.cn/tags/Selenium-Grid/"/>
    
    <category term="Chrome" scheme="https://sitoi.cn/tags/Chrome/"/>
    
    <category term="Firefox" scheme="https://sitoi.cn/tags/Firefox/"/>
    
    <category term="webdriver" scheme="https://sitoi.cn/tags/webdriver/"/>
    
  </entry>
  
  <entry>
    <title>Selenium &amp; ChromeDriver 全平台安装教程（Mac、Windows、Linux）</title>
    <link href="https://sitoi.cn/posts/14489.html"/>
    <id>https://sitoi.cn/posts/14489.html</id>
    <published>2020-06-08T14:37:35.000Z</published>
    <updated>2020-08-19T05:45:51.882Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本教程教你如何在 Windows、Mac、Linux 安装 Selenium 并配置对应的 WebDriver，并以 ChromeDriver 为例。</p><h2 id="安装-Selenium（全平台通用）"><a href="#安装-Selenium（全平台通用）" class="headerlink" title="安装 Selenium（全平台通用）"></a>安装 Selenium（全平台通用）</h2><p>使用 Pypi 包管理器安装，运行如下命令：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install selenium -i https://pypi.tuna.tsinghua.edu.cn/simple --user</span><br></pre></td></tr></tbody></table></figure><p>输出如下：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Looking <span class="keyword">in</span> indexes: https://pypi.tuna.tsinghua.edu.cn/simple</span><br><span class="line">Collecting selenium</span><br><span class="line">  Downloading https://pypi.tuna.tsinghua.edu.cn/packages/80/d6/4294f0b4bce4de0abf13e17190289f9d0613b0a44e5dd6a7f5ca98459853/selenium-3.141.0-py2.py3-none-any.whl (904kB)</span><br><span class="line">    100% |████████████████████████████████| 911kB 11.7MB/s</span><br><span class="line">Requirement already satisfied: urllib3 <span class="keyword">in</span> ./Library/Python/3.7/lib/python/site-packages (from selenium) (1.24.3)</span><br><span class="line">Installing collected packages: selenium</span><br><span class="line">Successfully installed selenium-3.141.0</span><br></pre></td></tr></tbody></table></figure><p>看到 <code>Successfully installed selenium-3.141.0</code> 就表示安装成功了</p><h2 id="配置-ChromeDrvier"><a href="#配置-ChromeDrvier" class="headerlink" title="配置 ChromeDrvier"></a>配置 ChromeDrvier</h2><h3 id="查看-Chrome-版本号"><a href="#查看-Chrome-版本号" class="headerlink" title="查看 Chrome 版本号"></a>查看 Chrome 版本号</h3><p>打开 Chrome 浏览器，在地址栏输入：<code>chrome://version</code></p><p><img src="https://cdn.jsdelivr.net/gh/Sitoi/cdn/img/selenium/chrome_version.jpg" alt="Chrome Version"></p><p>获取对应的版本号、操作系统信息，用于之后下载对应的 <code>ChromeDriver</code> 版本</p><h3 id="下载-ChromeDriver"><a href="#下载-ChromeDriver" class="headerlink" title="下载 ChromeDriver"></a>下载 ChromeDriver</h3><blockquote><p>下载地址：</p></blockquote><ul><li>淘宝下载地址(推荐)：<a href="https://npm.taobao.org/mirrors/chromedriver/">https://npm.taobao.org/mirrors/chromedriver/</a></li><li>官网下载地址：<a href="https://chromedriver.chromium.org/downloads">https://chromedriver.chromium.org/downloads</a></li></ul><p><img src="https://cdn.jsdelivr.net/gh/Sitoi/cdn/img/selenium/chromedrivers.png" alt="ChromeDriver 版本列表"></p><p><img src="https://cdn.jsdelivr.net/gh/Sitoi/cdn/img/selenium/chromedriver_version.png" alt="ChromeDriver 平台版本"></p><h3 id="安装-ChromeDriver"><a href="#安装-ChromeDriver" class="headerlink" title="安装 ChromeDriver"></a>安装 ChromeDriver</h3><h4 id="MAC-版本"><a href="#MAC-版本" class="headerlink" title="MAC 版本"></a>MAC 版本</h4><ol><li><p>解压下载的 <code>chromedriver_mac64.zip</code> 得到 <code>chromedrive</code></p><p> <img src="https://cdn.jsdelivr.net/gh/Sitoi/cdn/img/selenium/mac_chromedriver.png" alt="Mac ChromeDriver"></p></li><li><p>将 <code>chromedrive</code> 拷贝到 <code>/usr/local/bin/</code> 目录下即可。运行如下命令：</p> <figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp chromedriver /usr/<span class="built_in">local</span>/bin</span><br></pre></td></tr></tbody></table></figure></li></ol><h4 id="Windows-版本"><a href="#Windows-版本" class="headerlink" title="Windows 版本"></a>Windows 版本</h4><ol><li><p>解压下载得 <code>chromedriver_win32.zip</code> 的到 <code>chromedrive.exe</code></p><p> <img src="https://cdn.jsdelivr.net/gh/Sitoi/cdn/img/selenium/win_chromedriver.png" alt="Windows ChromeDriver"></p></li><li><p>将 <code>chromedrive.exe</code> 移入到 Google Chrome 根目录下</p><p> 默认路径位置：<code>C:\Program Files (x86)\Google\Chrome\Application</code><br> <img src="https://cdn.jsdelivr.net/gh/Sitoi/cdn/img/selenium/win_chrome_path.png" alt="Google Chrome 根目录"></p></li><li><p>为 Windows 添加 chromedriver 得 PATH 环境变量</p><ol><li><p>右击 <code>此电脑</code>，选择 <code>属性</code>。</p><p> <img src="https://cdn.jsdelivr.net/gh/Sitoi/cdn/img/selenium/win_property.png" alt="此电脑 属性"></p></li><li><p>点击右侧的 <code>高级系统设置</code></p><p> <img src="https://cdn.jsdelivr.net/gh/Sitoi/cdn/img/selenium/win_settings.png" alt="高级系统设置"></p></li><li><p>点击标签 <code>高级</code>，再点击 <code>环境变量</code></p><p> <img src="https://cdn.jsdelivr.net/gh/Sitoi/cdn/img/selenium/win_env.png" alt="环境变量"></p></li><li><p>找到 <code>系统变量</code>，再双击 <code>PATH</code></p><p> <img src="https://cdn.jsdelivr.net/gh/Sitoi/cdn/img/selenium/path_env.png" alt="编辑 PATH"></p></li><li><p>点击右上角 <code>新建</code> 按钮，输入放置 <code>chromedriver.exe</code> 的目录路径（<code>C:\Program Files (x86)\Google\Chrome\Application</code>）</p><p> <img src="https://cdn.jsdelivr.net/gh/Sitoi/cdn/img/selenium/add_path_env.png" alt="添加 PATH"></p></li><li><p>点击确认，即可保存</p></li></ol></li></ol><blockquote><p>注：如果你之前就打开了编辑器等，请重启编辑器环境变量才会生效！</p></blockquote><h4 id="Linux-版本"><a href="#Linux-版本" class="headerlink" title="Linux 版本"></a>Linux 版本</h4><ol><li><p>解压下载的 <code>chromedriver_linux64.zip</code> 得到 <code>chromedrive</code></p><p> <img src="https://cdn.jsdelivr.net/gh/Sitoi/cdn/img/selenium/linux_chromedriver.png" alt="Linux ChromeDriver"></p></li><li><p>将 <code>chromedrive</code> 拷贝到 <code>/usr/bin/</code> 目录下即可。运行如下命令：</p> <figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo cp chromedriver /usr/bin</span><br></pre></td></tr></tbody></table></figure></li><li><p>为 <code>chromedriver</code> 添加可执行权限</p> <figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo chmod +x /usr/bin/chromedriver</span><br></pre></td></tr></tbody></table></figure></li></ol><h3 id="测试是否安装成功"><a href="#测试是否安装成功" class="headerlink" title="测试是否安装成功"></a>测试是否安装成功</h3><ol><li><p>创建一个 <code>py</code> 文件，将下面的代码复制进去，并运行即可。</p> <figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line">browser = webdriver.Chrome()</span><br><span class="line">browser.get(<span class="string">'https://sitoi.cn/'</span>)</span><br><span class="line">browser.get_screenshot_as_file(<span class="string">"sitoi.cn.png"</span>)</span><br><span class="line">browser.close()</span><br></pre></td></tr></tbody></table></figure></li><li><p>看到浏览器自己打开，并且在运行的目录下有图片 <code>sitoi.cn.png</code> 则表示安装成功</p></li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;本教程教你如何在 Windows、Mac、Linux 安装 Selenium 并配置对应的 WebDriver，并以 ChromeDrive</summary>
      
    
    
    
    <category term="爬虫" scheme="https://sitoi.cn/categories/%E7%88%AC%E8%99%AB/"/>
    
    
    <category term="Linux" scheme="https://sitoi.cn/tags/Linux/"/>
    
    <category term="Mac" scheme="https://sitoi.cn/tags/Mac/"/>
    
    <category term="Selenium" scheme="https://sitoi.cn/tags/Selenium/"/>
    
    <category term="ChromeDriver" scheme="https://sitoi.cn/tags/ChromeDriver/"/>
    
    <category term="Windows" scheme="https://sitoi.cn/tags/Windows/"/>
    
  </entry>
  
  <entry>
    <title>Scrapy 小技巧（一）：使用 scrapy 自带的函数（follow &amp; follow_all）优雅的生成下一个请求</title>
    <link href="https://sitoi.cn/posts/61836.html"/>
    <id>https://sitoi.cn/posts/61836.html</id>
    <published>2020-06-06T12:57:01.000Z</published>
    <updated>2020-08-19T05:45:51.882Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>如何优雅的获取同一个网站上下一次爬取的链接并放到生成一个 Scrapy Response 呢？</p><h2 id="样例"><a href="#样例" class="headerlink" title="样例"></a>样例</h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> parse</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SitoiSpider</span>(<span class="params">scrapy.Spider</span>):</span></span><br><span class="line">    name = <span class="string">"sitoi"</span></span><br><span class="line"></span><br><span class="line">    start_urls = [</span><br><span class="line">        <span class="string">'https://sitoi.cn'</span>,</span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse</span>(<span class="params">self, response</span>):</span></span><br><span class="line">        href_list = response.xpath(<span class="string">"//div[@class='card']/a/@href"</span>).extract()</span><br><span class="line">        <span class="keyword">for</span> href <span class="keyword">in</span> href_list:</span><br><span class="line">            url = parse.urljoin(response.url, href)</span><br><span class="line">            <span class="keyword">yield</span> scrapy.Request(url=url, callback=self.parse_next)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse_next</span>(<span class="params">self, response</span>):</span></span><br><span class="line">        print(response.url)</span><br></pre></td></tr></tbody></table></figure><h3 id="方式一：使用-urllib-库来拼接-URL"><a href="#方式一：使用-urllib-库来拼接-URL" class="headerlink" title="方式一：使用 urllib 库来拼接 URL"></a>方式一：使用 urllib 库来拼接 URL</h3><p>这个方式是通过 <code>urllib</code> 库来对下一个 url 进行补全成完整的 url，再使用 <code>scrapy.Request</code> 的方式进行下一个页面的爬取。</p><p><strong>优点</strong></p><ol><li>在处理每一个 href 的时候可以添加一些自定义的内容（例如记录一下当前第几页了等等）</li></ol><p><strong>缺点</strong></p><ol><li>需要引入其他的库</li></ol><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse</span>(<span class="params">self, response</span>):</span></span><br><span class="line">    href_list = response.xpath(<span class="string">"//div[@class='card']/a/@href"</span>).extract()</span><br><span class="line">    <span class="keyword">for</span> href <span class="keyword">in</span> href_list:</span><br><span class="line">        url = parse.urljoin(response.url, href)</span><br><span class="line">        <span class="keyword">yield</span> scrapy.Request(url=url, callback=self.parse_next)</span><br></pre></td></tr></tbody></table></figure><h3 id="方式二：使用-response-自带的-urljoin"><a href="#方式二：使用-response-自带的-urljoin" class="headerlink" title="方式二：使用 response 自带的 urljoin"></a>方式二：使用 response 自带的 urljoin</h3><p>这个方式是通过 Scrapy response 自带的 <code>urljoin</code> 对下一个 url 进行补全成完整的 url，再使用 <code>scrapy.Request</code> 的方式进行下一个页面的爬取。（和方式一基本相同）</p><p><strong>优点</strong></p><ol><li>不再需要在 spider 文件中引入多的第三方库。</li></ol><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse</span>(<span class="params">self, response</span>):</span></span><br><span class="line">    href_list = response.xpath(<span class="string">"//div[@class='card']/a/@href"</span>).extract()</span><br><span class="line">    <span class="keyword">for</span> href <span class="keyword">in</span> href_list:</span><br><span class="line">        url = response.urljoin(href)</span><br><span class="line">        <span class="keyword">yield</span> scrapy.Request(url=url, callback=self.parse_next)</span><br></pre></td></tr></tbody></table></figure><h3 id="方式三：使用-response-自带的-follow"><a href="#方式三：使用-response-自带的-follow" class="headerlink" title="方式三：使用 response 自带的 follow"></a>方式三：使用 response 自带的 follow</h3><p>这个方式是通过 Scrapy response 自带的 <code>follow</code> 进行下一个页面的爬取。</p><p><strong>优点</strong></p><ol><li>不再需要在 spider 文件中引入多的第三方库。</li><li>不需要写 <code>extract()</code> 来提取 href 字符串，只需要传入 href 这个 <code>Selector</code>（可选）</li><li>不需要写 url 拼接</li><li><code>xpath</code> 只需要编写到 <code>a</code> 标签即可，可以省略掉 <code>@href</code>,即不需要获取 href 的 <code>Selector</code>，直接传递 a 的 <code>Selector</code>（可选）</li></ol><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse</span>(<span class="params">self, response</span>):</span></span><br><span class="line">    href_list = response.xpath(<span class="string">"//div[@class='card']/a/@href"</span>).extract()</span><br><span class="line">    <span class="keyword">for</span> href <span class="keyword">in</span> href_list:</span><br><span class="line">        <span class="keyword">yield</span> response.follow(url=href, callback=self.parse_next)</span><br></pre></td></tr></tbody></table></figure><p><strong>变种一</strong></p><ol><li>不写 <code>extract()</code> 来提取 href 字符串，传入 href 这个 <code>Selector</code></li></ol><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse</span>(<span class="params">self, response</span>):</span></span><br><span class="line">    href_list = response.xpath(<span class="string">"//div[@class='card']/a/@href"</span>)</span><br><span class="line">    <span class="keyword">for</span> href <span class="keyword">in</span> href_list:</span><br><span class="line">        <span class="keyword">yield</span> response.follow(url=href, callback=self.parse_next)</span><br></pre></td></tr></tbody></table></figure><p><strong>变种二</strong></p><ol><li>不写 <code>extract()</code> 来提取 href 字符串，传入 href 这个 <code>Selector</code></li><li><code>xpath</code> 不写 <code>@href</code>，直接传递 a 的 <code>Selector</code></li></ol><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse</span>(<span class="params">self, response</span>):</span></span><br><span class="line">    href_list = response.xpath(<span class="string">"//div[@class='card']/a/"</span>)</span><br><span class="line">    <span class="keyword">for</span> href <span class="keyword">in</span> href_list:</span><br><span class="line">        <span class="keyword">yield</span> response.follow(url=href, callback=self.parse_next)</span><br></pre></td></tr></tbody></table></figure><h3 id="方式四：使用-response-自带的-follow-all"><a href="#方式四：使用-response-自带的-follow-all" class="headerlink" title="方式四：使用 response 自带的 follow_all"></a>方式四：使用 response 自带的 follow_all</h3><p>这个方式是通过 Scrapy response 自带的 <code>follow_all</code> 进行下一个页面的爬取。</p><p><strong>优点</strong></p><ol><li>不再需要在 spider 文件中引入多的第三方库。</li><li>不需要写 <code>extract()</code> 来提取 href 字符串，只需要传入 href 这个 selector（可选）</li><li>不需要写 url 拼接</li><li>只需要编写到 <code>a</code> 标签即可，可以省略掉 <code>@href</code>，即不需要获取 href 的 <code>SelectorList</code>，直接传递 a 的 <code>SelectorList</code>（可选）</li><li>不需要编写遍历，直接把抓到的 url 的 <code>SelectorList</code> 放入即可</li></ol><p><strong>缺点</strong></p><ol><li>如果中间还有什么逻辑，就不太适用了（例如记录一下当前第几页了等等）</li></ol><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse</span>(<span class="params">self, response</span>):</span></span><br><span class="line">    href_list = response.xpath(<span class="string">"//div[@class='card']/a"</span>)</span><br><span class="line">    <span class="keyword">yield</span> <span class="keyword">from</span> response.follow_all(urls=href_list, callback=self.parse_next)</span><br></pre></td></tr></tbody></table></figure><p><strong>变种</strong></p><blockquote><p>注：前方高能</p></blockquote><p>一行代码搞定。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse</span>(<span class="params">self, response</span>):</span></span><br><span class="line">    <span class="keyword">yield</span> <span class="keyword">from</span> response.follow_all(xpath=<span class="string">"//div[@class='card']/a"</span>, callback=self.parse_next)</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;如何优雅的获取同一个网站上下一次爬取的链接并放到生成一个 Scrapy Response 呢？&lt;/p&gt;
&lt;h2 id=&quot;样例&quot;&gt;&lt;a hre</summary>
      
    
    
    
    <category term="爬虫" scheme="https://sitoi.cn/categories/%E7%88%AC%E8%99%AB/"/>
    
    <category term="Scrapy" scheme="https://sitoi.cn/categories/%E7%88%AC%E8%99%AB/Scrapy/"/>
    
    
    <category term="scrapy" scheme="https://sitoi.cn/tags/scrapy/"/>
    
    <category term="爬虫" scheme="https://sitoi.cn/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>Mac 制作 Linux 启动 U 盘</title>
    <link href="https://sitoi.cn/posts/28583.html"/>
    <id>https://sitoi.cn/posts/28583.html</id>
    <published>2020-05-01T08:57:00.000Z</published>
    <updated>2020-08-19T05:45:51.882Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Mac-制作-Linux-启动盘"><a href="#Mac-制作-Linux-启动盘" class="headerlink" title="Mac 制作 Linux 启动盘"></a>Mac 制作 Linux 启动盘</h1><blockquote><p>前期准备</p></blockquote><ol><li>一个 Mac 电脑</li><li>一个 U 盘（8GB 以上）</li><li>下载好 Linux 系统镜像（iso 文件）</li></ol><blockquote><p>具体步骤</p></blockquote><ol><li>挂载 U 盘</li><li>解挂 U 盘</li><li>写系统镜像到 U 盘</li><li>完成</li></ol><h2 id="一、挂载-U-盘"><a href="#一、挂载-U-盘" class="headerlink" title="一、挂载 U 盘"></a>一、挂载 U 盘</h2><p>首先插入 U 盘，打开终端输入下面的命令查看 U 盘是否已经 mount 到系统，或者在 Finder 下也可以看到 U 盘被识别了，如下图所示：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">diskutil list</span><br></pre></td></tr></tbody></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Sitoi/cdn/img/mac-u-linux/diskutil_list.png" alt="diskutil unmountDisk"></p><h2 id="二、解挂-U-盘"><a href="#二、解挂-U-盘" class="headerlink" title="二、解挂 U 盘"></a>二、解挂 U 盘</h2><p>使用 unmount 命令 解除挂载，命令如下：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">diskutil unmountDisk /dev/disk3</span><br></pre></td></tr></tbody></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Sitoi/cdn/img/mac-u-linux/diskutil_unmountDisk.png" alt="diskutil unmountDisk"></p><p>这样就有了一个已经插入但是 unmount 的 U 盘了，这时候你在 Finder 下看不到这个U盘了，但是用 <code>diskutil list</code> 命令还可以看到。</p><h2 id="三、写系统镜像到-U-盘"><a href="#三、写系统镜像到-U-盘" class="headerlink" title="三、写系统镜像到 U 盘"></a>三、写系统镜像到 U 盘</h2><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo dd <span class="keyword">if</span>=/Users/shitao/Downloads/CentOS-7-x86_64-DVD-2003.iso of=/dev/disk3 bs=1m</span><br></pre></td></tr></tbody></table></figure><p><code>if=</code> 后面是 Linux ios 文件的的路径</p><p><code>of=</code> 后面的是 U 盘的名称</p><p><code>bs</code> 表示写入块大小，可以设置为 2m，但不要太大</p><p>Tips：因为是 sudo 所以需要输入密码，输入后按回车即可。</p><h2 id="四、完成"><a href="#四、完成" class="headerlink" title="四、完成"></a>四、完成</h2><p>等待几分钟，见到如下输出就表示已经成功完成了。</p><figure class="highlight text"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">4560+0 records in</span><br><span class="line">4560+0 records out</span><br><span class="line">4781506560 bytes transferred in 291.165911 secs (16421931 bytes/sec)</span><br></pre></td></tr></tbody></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Sitoi/cdn/img/mac-u-linux/sudo_dd_if_of_bs.png" alt="输出结果"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Mac-制作-Linux-启动盘&quot;&gt;&lt;a href=&quot;#Mac-制作-Linux-启动盘&quot; class=&quot;headerlink&quot; title=&quot;Mac 制作 Linux 启动盘&quot;&gt;&lt;/a&gt;Mac 制作 Linux 启动盘&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;前</summary>
      
    
    
    
    <category term="操作系统" scheme="https://sitoi.cn/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    <category term="Mac" scheme="https://sitoi.cn/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Mac/"/>
    
    
    <category term="Linux" scheme="https://sitoi.cn/tags/Linux/"/>
    
    <category term="Mac" scheme="https://sitoi.cn/tags/Mac/"/>
    
    <category term="启动盘" scheme="https://sitoi.cn/tags/%E5%90%AF%E5%8A%A8%E7%9B%98/"/>
    
  </entry>
  
  <entry>
    <title>RESTful API 设计规范</title>
    <link href="https://sitoi.cn/posts/13695.html"/>
    <id>https://sitoi.cn/posts/13695.html</id>
    <published>2020-01-08T11:39:59.000Z</published>
    <updated>2020-08-19T05:45:51.882Z</updated>
    
    <content type="html"><![CDATA[<h1 id="RESTful-API-设计规范"><a href="#RESTful-API-设计规范" class="headerlink" title="RESTful API 设计规范"></a>RESTful API 设计规范</h1><blockquote><p>原文链接：<a href="https://github.com/godruoyi/restful-api-specification">https://github.com/godruoyi/restful-api-specification</a></p></blockquote><h2 id="关于「能愿动词」的使用"><a href="#关于「能愿动词」的使用" class="headerlink" title="关于「能愿动词」的使用"></a>关于「能愿动词」的使用</h2><p>为了避免歧义，文档大量使用了「能愿动词」，对应的解释如下：</p><ul><li><code>必须 (MUST)</code>：绝对，严格遵循，请照做，无条件遵守；</li><li><code>一定不可 (MUST NOT)</code>：禁令，严令禁止；</li><li><code>应该 (SHOULD)</code> ：强烈建议这样做，但是不强求；</li><li><code>不该 (SHOULD NOT)</code>：强烈不建议这样做，但是不强求；</li><li><code>可以 (MAY)</code> 和 <code>可选 (OPTIONAL)</code> ：选择性高一点，在这个文档内，此词语使用较少；</li></ul><blockquote><p>参见：<a href="http://www.ietf.org/rfc/rfc2119.txt">RFC 2119</a></p></blockquote><h2 id="Protocol"><a href="#Protocol" class="headerlink" title="Protocol"></a>Protocol</h2><p>客户端在通过 <code>API</code> 与后端服务通信的过程中，<code>应该</code> 使用 <code>HTTPS</code> 协议。</p><h2 id="API-Root-URL"><a href="#API-Root-URL" class="headerlink" title="API Root URL"></a>API Root URL</h2><p><code>API</code> 的根入口点应尽可能保持足够简单，这里有两个常见的 <code>URL</code> 根例子：</p><ul><li>api.example.com/*</li><li>example.com/api/*</li></ul><blockquote><p>如果你的应用很庞大或者你预计它将会变的很庞大，那 <code>应该</code> 将 <code>API</code> 放到子域下（<code>api.example.com</code>）。这种做法可以保持某些规模化上的灵活性。</p></blockquote><h2 id="Versioning"><a href="#Versioning" class="headerlink" title="Versioning"></a>Versioning</h2><p>所有的 <code>API</code> 必须保持向后兼容，你 <code>必须</code> 在引入新版本 <code>API</code> 的同时确保旧版本 <code>API</code> 仍然可用。所以 <code>应该</code> 为其提供版本支持。</p><p>目前比较常见的两种版本号形式：</p><h3 id="在-URL-中嵌入版本编号"><a href="#在-URL-中嵌入版本编号" class="headerlink" title="在 URL 中嵌入版本编号"></a>在 URL 中嵌入版本编号</h3><figure class="highlight http"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">api.example.com/v1/*</span></span><br></pre></td></tr></tbody></table></figure><p>这种做法是版本号直观、易于调试；另一种做法是，将版本号放在 <code>HTTP Header</code> 头中：</p><h3 id="通过媒体类型来指定版本信息"><a href="#通过媒体类型来指定版本信息" class="headerlink" title="通过媒体类型来指定版本信息"></a>通过媒体类型来指定版本信息</h3><figure class="highlight http"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">Accept</span>: application/vnd.example.com.v1+json</span><br></pre></td></tr></tbody></table></figure><p>其中 <code>vnd</code> 表示 <code>Standards Tree</code> 标准树类型，有三个不同的树: <code>x</code>，<code>prs</code> 和 <code>vnd</code>。你使用的标准树需要取决于你开发的项目</p><ul><li>未注册的树（<code>x</code>）主要表示本地和私有环境</li><li>私有树（<code>prs</code>）主要表示没有商业发布的项目</li><li>供应商树（<code>vnd</code>）主要表示公开发布的项目</li></ul><blockquote><p>后面几个参数依次为应用名称（一般为应用域名）、版本号、期望的返回格式。</p></blockquote><p>至于具体把版本号放在什么地方，这个问题一直存在很大的争议，但由于我们大多数时间都在使用 <code>Laravel</code> 开发，<code>应该</code> 使用 <a href="https://github.com/dingo/api">dingo/api</a> 来快速构建应用，它采用第二种方式来管理 <code>API</code> 版本，并且已集成了标准的 <code>HTTP Response</code>。</p><h2 id="Endpoints"><a href="#Endpoints" class="headerlink" title="Endpoints"></a>Endpoints</h2><p>端点就是指向特定资源或资源集合的 <code>URL</code>。在端点的设计中，你 <code>必须</code> 遵守下列约定：</p><ul><li>URL 的命名 <code>必须</code> 全部小写</li><li>URL 中资源（<code>resource</code>）的命名 <code>必须</code> 是名词，并且 <code>必须</code> 是复数形式</li><li><code>必须</code> 优先使用 <code>Restful</code> 类型的 URL</li><li>URL <code>必须</code> 是易读的</li><li>URL <code>一定不可</code> 暴露服务器架构</li></ul><blockquote><p>至于 URL 是否必须使用连字符（<code>-</code>） 或下划线（<code>_</code>），不做硬性规定，但 <code>必须</code> 根据团队情况统一一种风格。</p></blockquote><p>来看一个反例</p><ul><li><a href="https://api.example.com/getUserInfo?userid=1">https://api.example.com/getUserInfo?userid=1</a></li><li><a href="https://api.example.com/getusers">https://api.example.com/getusers</a></li><li><a href="https://api.example.com/sv/u">https://api.example.com/sv/u</a></li><li><a href="https://api.example.com/cgi-bin/users/get_user.php?userid=1">https://api.example.com/cgi-bin/users/get_user.php?userid=1</a></li></ul><p>再来看一个正列</p><ul><li><a href="https://api.example.com/zoos">https://api.example.com/zoos</a></li><li><a href="https://api.example.com/animals">https://api.example.com/animals</a></li><li><a href="https://api.example.com/zoos/%7Bzoo%7D/animals">https://api.example.com/zoos/{zoo}/animals</a></li><li><a href="https://api.example.com/animal_types">https://api.example.com/animal_types</a></li><li><a href="https://api.example.com/employees">https://api.example.com/employees</a></li></ul><h2 id="HTTP-动词"><a href="#HTTP-动词" class="headerlink" title="HTTP 动词"></a>HTTP 动词</h2><p>对于资源的具体操作类型，由 <code>HTTP</code> 动词表示。常用的 <code>HTTP</code> 动词有下面五个（括号里是对应的 <code>SQL</code> 命令）。</p><ul><li>GET（SELECT）：从服务器取出资源（一项或多项）。</li><li>POST（CREATE）：在服务器新建一个资源。</li><li>PUT（UPDATE）：在服务器更新资源（客户端提供改变后的完整资源）。</li><li>PATCH（UPDATE）：在服务器更新资源（客户端提供改变的属性）。</li><li>DELETE（DELETE）：从服务器删除资源。</li></ul><p>其中</p><p>1 删除资源 <code>必须</code> 用 <code>DELETE</code> 方法<br>2 创建新的资源 <code>必须</code> 使用 <code>POST</code> 方法<br>3 更新资源 <code>应该</code> 使用 <code>PUT</code> 方法<br>4 获取资源信息 <code>必须</code> 使用 <code>GET</code> 方法</p><p>针对每一个端点来说，下面列出所有可行的 <code>HTTP</code> 动词和端点的组合</p><table><thead><tr><th>请求方法</th><th>URL</th><th>描述</th></tr></thead><tbody><tr><td>GET</td><td>/zoos</td><td>列出所有的动物园(ID和名称，不要太详细)</td></tr><tr><td>POST</td><td>/zoos</td><td>新增一个新的动物园</td></tr><tr><td>GET</td><td>/zoos/{zoo}</td><td>获取指定动物园详情</td></tr><tr><td>PUT</td><td>/zoos/{zoo}</td><td>更新指定动物园(整个对象)</td></tr><tr><td>PATCH</td><td>/zoos/{zoo}</td><td>更新动物园(部分对象)</td></tr><tr><td>DELETE</td><td>/zoos/{zoo}</td><td>删除指定动物园</td></tr><tr><td>GET</td><td>/zoos/{zoo}/animals</td><td>检索指定动物园下的动物列表(ID和名称，不要太详细)</td></tr><tr><td>GET</td><td>/animals</td><td>列出所有动物(ID和名称)。</td></tr><tr><td>POST</td><td>/animals</td><td>新增新的动物</td></tr><tr><td>GET</td><td>/animals/{animal}</td><td>获取指定的动物详情</td></tr><tr><td>PUT</td><td>/animals/{animal}</td><td>更新指定的动物(整个对象)</td></tr><tr><td>PATCH</td><td>/animals/{animal}</td><td>更新指定的动物(部分对象)</td></tr><tr><td>GET</td><td>/animal_types</td><td>获取所有动物类型(ID和名称，不要太详细)</td></tr><tr><td>GET</td><td>/animal_types/{type}</td><td>获取指定的动物类型详情</td></tr><tr><td>GET</td><td>/employees</td><td>检索整个雇员列表</td></tr><tr><td>GET</td><td>/employees/{employee}</td><td>检索指定特定的员工</td></tr><tr><td>GET</td><td>/zoos/{zoo}/employees</td><td>检索在这个动物园工作的雇员的名单(身份证和姓名)</td></tr><tr><td>POST</td><td>/employees</td><td>新增指定新员工</td></tr><tr><td>POST</td><td>/zoos/{zoo}/employees</td><td>在特定的动物园雇佣一名员工</td></tr><tr><td>DELETE</td><td>/zoos/{zoo}/employees/{employee}</td><td>从某个动物园解雇一名员工</td></tr></tbody></table><blockquote><p>超出 <code>Restful</code> 端点的，<code>应该</code> 模仿上表的方式来定义端点。</p></blockquote><h2 id="Filtering"><a href="#Filtering" class="headerlink" title="Filtering"></a>Filtering</h2><blockquote><p>如果记录数量很多，服务器不可能都将它们返回给用户。API <code>应该</code> 提供参数，过滤返回结果。下面是一些常见的参数。</p></blockquote><ul><li>?limit=10：指定返回记录的数量</li><li>?offset=10：指定返回记录的开始位置。</li><li>?page=2&amp;per_page=100：指定第几页，以及每页的记录数。</li><li>?sortby=name&amp;order=asc：指定返回结果按照哪个属性排序，以及排序顺序。</li><li>?animal_type_id=1：指定筛选条件</li></ul><p>所有 <code>URL</code> 参数 <code>必须</code> 是全小写，<code>必须</code> 使用下划线类型的参数形式。</p><blockquote><p>分页参数 <code>必须</code> 固定为 <code>page</code>、<code>per_page</code></p></blockquote><p>经常使用的、复杂的查询 <code>应该</code> 标签化，降低维护成本。如</p><figure class="highlight"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">GET /trades?status=closed&amp;sort=sortby=name&amp;order=asc</span><br><span class="line"></span><br><span class="line"># 可为其定制快捷方式</span><br><span class="line">GET /trades/recently_closed</span><br></pre></td></tr></tbody></table></figure><h2 id="Authentication"><a href="#Authentication" class="headerlink" title="Authentication"></a>Authentication</h2><p><code>应该</code> 使用 <code>OAuth2.0</code> 的方式为 API 调用者提供登录认证。<code>必须</code> 先通过登录接口获取 <code>Access Token</code> 后再通过该 <code>token</code> 调用需要身份认证的 <code>API</code>。</p><p>Oauth 的端点设计示列</p><ul><li>RFC 6749   /token</li><li>Twitter    /oauth2/token</li><li>Fackbook   /oauth/access_token</li><li>Google     /o/oauth2/token</li><li>Github     /login/oauth/access_token</li><li>Instagram  /oauth/authorize</li></ul><p>客户端在获得 <code>access token</code> 的同时 <code>必须</code> 在响应中包含一个名为 <code>expires_in</code> 的数据，它表示当前获得的 <code>token</code> 会在多少 <code>秒</code> 后失效。</p><figure class="highlight json"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">{</span><br><span class="line">    <span class="attr">"access_token"</span>: <span class="string">"token...."</span>,</span><br><span class="line">    <span class="attr">"token_type"</span>: <span class="string">"Bearer"</span>,</span><br><span class="line">    <span class="attr">"expires_in"</span>: <span class="number">3600</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>客户端在请求需要认证的 <code>API</code> 时，<code>必须</code> 在请求头 <code>Authorization</code> 中带上 <code>access_token</code>。</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Authorization: Bearer token...</span><br></pre></td></tr></tbody></table></figure><p>当超过指定的秒数后，<code>access token</code> 就会过期，再次用过期/或无效的 <code>token</code> 访问时，服务端 <code>应该</code> 返回 <code>invalid_token</code> 的错误或 <code>401</code> 错误码。</p><figure class="highlight http"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1 <span class="number">401</span> Unauthorized</span><br><span class="line"><span class="attribute">Content-Type</span>: application/json</span><br><span class="line"><span class="attribute">Cache-Control</span>: no-store</span><br><span class="line"><span class="attribute">Pragma</span>: no-cache</span><br></pre></td></tr></tbody></table></figure><figure class="highlight json"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">{</span><br><span class="line">    <span class="attr">"error"</span>: <span class="string">"invalid_token"</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><blockquote><p>Laravel 开发中，<code>应该</code> 使用 <a href="https://github.com/tymondesigns/jwt-auth">JWT</a> 来为管理你的 Token，并且 <code>一定不可</code> 在 <code>api</code> 中间件中开启请求 <code>session</code>。</p></blockquote><h2 id="Response"><a href="#Response" class="headerlink" title="Response"></a>Response</h2><p>所有的 <code>API</code> 响应，<code>必须</code> 遵守 <code>HTTP</code> 设计规范，<code>必须</code> 选择合适的 <code>HTTP</code> 状态码。<code>一定不可</code> 所有接口都返回状态码为 <code>200</code> 的 <code>HTTP</code> 响应，如：</p><figure class="highlight http"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1 <span class="number">200</span> ok</span><br><span class="line"><span class="attribute">Content-Type</span>: application/json</span><br><span class="line"><span class="attribute">Server</span>: example.com</span><br></pre></td></tr></tbody></table></figure><figure class="highlight json"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">{</span><br><span class="line">    <span class="attr">"code"</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">"msg"</span>: <span class="string">"success"</span>,</span><br><span class="line">    <span class="attr">"data"</span>: {</span><br><span class="line">        <span class="attr">"username"</span>: <span class="string">"username"</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>或</p><figure class="highlight http"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1 <span class="number">200</span> ok</span><br><span class="line"><span class="attribute">Content-Type</span>: application/json</span><br><span class="line"><span class="attribute">Server</span>: example.com</span><br></pre></td></tr></tbody></table></figure><figure class="highlight json"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">{</span><br><span class="line">    <span class="attr">"code"</span>: <span class="number">-1</span>,</span><br><span class="line">    <span class="attr">"msg"</span>: <span class="string">"该活动不存在"</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>下表列举了常见的 <code>HTTP</code> 状态码</p><table><thead><tr><th>状态码</th><th>描述</th></tr></thead><tbody><tr><td>1xx</td><td>代表请求已被接受，需要继续处理</td></tr><tr><td>2xx</td><td>请求已成功，请求所希望的响应头或数据体将随此响应返回</td></tr><tr><td>3xx</td><td>重定向</td></tr><tr><td>4xx</td><td>客户端原因引起的错误</td></tr><tr><td>5xx</td><td>服务端原因引起的错误</td></tr></tbody></table><blockquote><p>只有来自客户端的请求被正确的处理后才能返回 <code>2xx</code> 的响应，所以当 API 返回 <code>2xx</code> 类型的状态码时，前端 <code>必须</code> 认定该请求已处理成功。</p></blockquote><p>必须强调的是，所有 <code>API</code> <code>一定不可</code> 返回 <code>1xx</code> 类型的状态码。当 <code>API</code> 发生错误时，<code>必须</code> 返回出错时的详细信息。目前常见返回错误信息的方法有两种：</p><p>1、将错误详细放入 <code>HTTP</code> 响应首部；</p><figure class="highlight http"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">X-MYNAME-ERROR-CODE</span>: 4001</span><br><span class="line"><span class="attribute">X-MYNAME-ERROR-MESSAGE</span>: Bad authentication token</span><br><span class="line"><span class="attribute">X-MYNAME-ERROR-INFO</span>: http://docs.example.com/api/v1/authentication</span><br></pre></td></tr></tbody></table></figure><p>2、直接放入响应实体中；</p><figure class="highlight http"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1 <span class="number">401</span> Unauthorized</span><br><span class="line"><span class="attribute">Server</span>: nginx/1.11.9</span><br><span class="line"><span class="attribute">Content-Type</span>: application/json</span><br><span class="line"><span class="attribute">Transfer-Encoding</span>: chunked</span><br><span class="line"><span class="attribute">Cache-Control</span>: no-cache, private</span><br><span class="line"><span class="attribute">Date</span>: Sun, 24 Jun 2018 10:02:59 GMT</span><br><span class="line"><span class="attribute">Connection</span>: keep-alive</span><br></pre></td></tr></tbody></table></figure><figure class="highlight json"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">{</span><br><span class="line">    <span class="attr">"error_code"</span>:<span class="number">40100</span>,</span><br><span class="line">    <span class="attr">"message"</span>:<span class="string">"Unauthorized"</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>考虑到易读性和客户端的易处理性，我们 <code>必须</code> 把错误信息直接放到响应实体中，并且错误格式 <code>应该</code> 满足如下格式：</p><figure class="highlight json"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">{</span><br><span class="line">    <span class="attr">"message"</span>: <span class="string">"您查找的资源不存在"</span>,</span><br><span class="line">    <span class="attr">"error_code"</span>: <span class="number">404001</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>其中错误码（<code>error_code</code>）<code>必须</code> 和 <code>HTTP</code> 状态码对应，也方便错误码归类，如：</p><figure class="highlight http"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1 <span class="number">429</span> Too Many Requests</span><br><span class="line"><span class="attribute">Server</span>: nginx/1.11.9</span><br><span class="line"><span class="attribute">Content-Type</span>: application/json</span><br><span class="line"><span class="attribute">Transfer-Encoding</span>: chunked</span><br><span class="line"><span class="attribute">Cache-Control</span>: no-cache, private</span><br><span class="line"><span class="attribute">Date</span>: Sun, 24 Jun 2018 10:15:52 GMT</span><br><span class="line"><span class="attribute">Connection</span>: keep-alive</span><br></pre></td></tr></tbody></table></figure><figure class="highlight json"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">{</span><br><span class="line">    <span class="attr">"error_code"</span>:<span class="number">429001</span>,</span><br><span class="line">    <span class="attr">"message"</span>:<span class="string">"你操作太频繁了"</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight http"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1 <span class="number">403</span> Forbidden</span><br><span class="line"><span class="attribute">Server</span>: nginx/1.11.9</span><br><span class="line"><span class="attribute">Content-Type</span>: application/json</span><br><span class="line"><span class="attribute">Transfer-Encoding</span>: chunked</span><br><span class="line"><span class="attribute">Cache-Control</span>: no-cache, private</span><br><span class="line"><span class="attribute">Date</span>: Sun, 24 Jun 2018 10:19:27 GMT</span><br><span class="line"><span class="attribute">Connection</span>: keep-alive</span><br></pre></td></tr></tbody></table></figure><figure class="highlight json"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">{</span><br><span class="line">    <span class="attr">"error_code"</span>:<span class="number">403002</span>,</span><br><span class="line">    <span class="attr">"message"</span>:<span class="string">"用户已禁用"</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><code>应该</code> 在返回的错误信息中，同时包含面向开发者和面向用户的提示信息，前者可方便开发人员调试，后者可直接展示给终端用户查看如：</p><figure class="highlight json"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">{</span><br><span class="line">    <span class="attr">"message"</span>: <span class="string">"直接展示给终端用户的错误信息"</span>,</span><br><span class="line">    <span class="attr">"error_code"</span>: <span class="string">"业务错误码"</span>,</span><br><span class="line">    <span class="attr">"error"</span>: <span class="string">"供开发者查看的错误信息"</span>,</span><br><span class="line">    <span class="attr">"debug"</span>: [</span><br><span class="line">        <span class="string">"错误堆栈，必须开启 debug 才存在"</span></span><br><span class="line">    ]</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>下面详细列举了各种情况 API 的返回说明。</p><h3 id="200-ok"><a href="#200-ok" class="headerlink" title="200 ok"></a>200 ok</h3><p><code>200</code> 状态码是最常见的 <code>HTTP</code> 状态码，在所有 <strong>成功</strong> 的 <code>GET</code> 请求中，<code>必须</code> 返回此状态码。<code>HTTP</code> 响应实体部分 <code>必须</code> 直接就是数据，不要做多余的包装。</p><p>错误示例：</p><figure class="highlight http"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1 <span class="number">200</span> ok</span><br><span class="line"><span class="attribute">Content-Type</span>: application/json</span><br><span class="line"><span class="attribute">Server</span>: example.com</span><br></pre></td></tr></tbody></table></figure><figure class="highlight json"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">{</span><br><span class="line">    <span class="attr">"user"</span>: {</span><br><span class="line">        <span class="attr">"id"</span>:<span class="number">1</span>,</span><br><span class="line">        <span class="attr">"nickname"</span>:<span class="string">"fwest"</span>,</span><br><span class="line">        <span class="attr">"username"</span>: <span class="string">"example"</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>正确示例：</p><p>1、获取单个资源详情</p><figure class="highlight json"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">{</span><br><span class="line">    <span class="attr">"id"</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">"username"</span>: <span class="string">"Sitoi"</span>,</span><br><span class="line">    <span class="attr">"age"</span>: <span class="number">88</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>2、获取资源集合</p><figure class="highlight json"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">    {</span><br><span class="line">        <span class="attr">"id"</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="attr">"username"</span>: <span class="string">"Sitoi"</span>,</span><br><span class="line">        <span class="attr">"age"</span>: <span class="number">88</span></span><br><span class="line">    },</span><br><span class="line">    {</span><br><span class="line">        <span class="attr">"id"</span>: <span class="number">2</span>,</span><br><span class="line">        <span class="attr">"username"</span>: <span class="string">"foo"</span>,</span><br><span class="line">        <span class="attr">"age"</span>: <span class="number">88</span></span><br><span class="line">    }</span><br><span class="line">]</span><br></pre></td></tr></tbody></table></figure><p>3、额外的媒体信息</p><figure class="highlight json"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">{</span><br><span class="line">    <span class="attr">"data"</span>: [</span><br><span class="line">        {</span><br><span class="line">            <span class="attr">"id"</span>: <span class="number">1</span>,</span><br><span class="line">            <span class="attr">"avatar"</span>: <span class="string">"https://lorempixel.com/640/480/?32556"</span>,</span><br><span class="line">            <span class="attr">"nickname"</span>: <span class="string">"fwest"</span>,</span><br><span class="line">            <span class="attr">"last_logined_time"</span>: <span class="string">"2018-05-29 04:56:43"</span>,</span><br><span class="line">            <span class="attr">"has_registed"</span>: <span class="literal">true</span></span><br><span class="line">        },</span><br><span class="line">        {</span><br><span class="line">            <span class="attr">"id"</span>: <span class="number">2</span>,</span><br><span class="line">            <span class="attr">"avatar"</span>: <span class="string">"https://lorempixel.com/640/480/?86144"</span>,</span><br><span class="line">            <span class="attr">"nickname"</span>: <span class="string">"zschowalter"</span>,</span><br><span class="line">            <span class="attr">"last_logined_time"</span>: <span class="string">"2018-06-16 15:18:34"</span>,</span><br><span class="line">            <span class="attr">"has_registed"</span>: <span class="literal">true</span></span><br><span class="line">        }</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">"meta"</span>: {</span><br><span class="line">        <span class="attr">"pagination"</span>: {</span><br><span class="line">            <span class="attr">"total"</span>: <span class="number">101</span>,</span><br><span class="line">            <span class="attr">"count"</span>: <span class="number">2</span>,</span><br><span class="line">            <span class="attr">"per_page"</span>: <span class="number">2</span>,</span><br><span class="line">            <span class="attr">"current_page"</span>: <span class="number">1</span>,</span><br><span class="line">            <span class="attr">"total_pages"</span>: <span class="number">51</span>,</span><br><span class="line">            <span class="attr">"links"</span>: {</span><br><span class="line">                <span class="attr">"next"</span>: <span class="string">"http://api.example.com?page=2"</span></span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><blockquote><p>其中，分页和其他额外的媒体信息，必须放到 <code>meta</code> 字段中。</p></blockquote><h3 id="201-Created"><a href="#201-Created" class="headerlink" title="201 Created"></a>201 Created</h3><p>当服务器创建数据成功时，<code>应该</code> 返回此状态码。常见的应用场景是使用 <code>POST</code> 提交用户信息，如：</p><ul><li>添加了新用户</li><li>上传了图片</li><li>创建了新活动</li></ul><p>等，都可以返回 <code>201</code> 状态码。需要注意的是，你可以选择在用户创建成功后返回新用户的数据</p><figure class="highlight http"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1 <span class="number">201</span> Created</span><br><span class="line"><span class="attribute">Server</span>: nginx/1.11.9</span><br><span class="line"><span class="attribute">Content-Type</span>: application/json</span><br><span class="line"><span class="attribute">Transfer-Encoding</span>: chunked</span><br><span class="line"><span class="attribute">Date</span>: Sun, 24 Jun 2018 09:13:40 GMT</span><br><span class="line"><span class="attribute">Connection</span>: keep-alive</span><br></pre></td></tr></tbody></table></figure><figure class="highlight json"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">{</span><br><span class="line">    <span class="attr">"id"</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">"avatar"</span>: <span class="string">"https:\/\/lorempixel.com\/640\/480\/?32556"</span>,</span><br><span class="line">    <span class="attr">"nickname"</span>: <span class="string">"fwest"</span>,</span><br><span class="line">    <span class="attr">"last_logined_time"</span>: <span class="string">"2018-05-29 04:56:43"</span>,</span><br><span class="line">    <span class="attr">"created_at"</span>: <span class="string">"2018-06-16 17:55:55"</span>,</span><br><span class="line">    <span class="attr">"updated_at"</span>: <span class="string">"2018-06-16 17:55:55"</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>也可以返回一个响应实体为空的 <code>HTTP Response</code> 如：</p><figure class="highlight http"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1 <span class="number">201</span> Created</span><br><span class="line"><span class="attribute">Server</span>: nginx/1.11.9</span><br><span class="line"><span class="attribute">Content-Type</span>: text/html; charset=UTF-8</span><br><span class="line"><span class="attribute">Transfer-Encoding</span>: chunked</span><br><span class="line"><span class="attribute">Date</span>: Sun, 24 Jun 2018 09:12:20 GMT</span><br><span class="line"><span class="attribute">Connection</span>: keep-alive</span><br></pre></td></tr></tbody></table></figure><blockquote><p>这里我们 <code>应该</code> 采用第二种方式，因为大多数情况下，客户端只需要知道该请求操作成功与否，并不需要返回新资源的信息。</p></blockquote><h3 id="202-Accepted"><a href="#202-Accepted" class="headerlink" title="202 Accepted"></a>202 Accepted</h3><p>该状态码表示服务器已经接受到了来自客户端的请求，但还未开始处理。常用短信发送、邮件通知、模板消息推送等这类很耗时需要队列支持的场景中；</p><blockquote><p>返回该状态码时，响应实体 <code>必须</code> 为空。</p></blockquote><figure class="highlight http"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1 <span class="number">202</span> Accepted</span><br><span class="line"><span class="attribute">Server</span>: nginx/1.11.9</span><br><span class="line"><span class="attribute">Content-Type</span>: text/html; charset=UTF-8</span><br><span class="line"><span class="attribute">Transfer-Encoding</span>: chunked</span><br><span class="line"><span class="attribute">Date</span>: Sun, 24 Jun 2018 09:25:15 GMT</span><br><span class="line"><span class="attribute">Connection</span>: keep-alive</span><br></pre></td></tr></tbody></table></figure><h3 id="204-No-Content"><a href="#204-No-Content" class="headerlink" title="204 No Content"></a>204 No Content</h3><p>该状态码表示响应实体不包含任何数据，其中：</p><ul><li>在使用 <code>DELETE</code> 方法删除资源 <strong>成功</strong> 时，<code>必须</code> 返回该状态码</li><li>使用 <code>PUT</code>、<code>PATCH</code> 方法更新数据 <strong>成功</strong> 时，也 <code>应该</code> 返回此状态码</li></ul><figure class="highlight http"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1 <span class="number">204</span> No Content</span><br><span class="line"><span class="attribute">Server</span>: nginx/1.11.9</span><br><span class="line"><span class="attribute">Date</span>: Sun, 24 Jun 2018 09:29:12 GMT</span><br><span class="line"><span class="attribute">Connection</span>: keep-alive</span><br></pre></td></tr></tbody></table></figure><h3 id="3xx-重定向"><a href="#3xx-重定向" class="headerlink" title="3xx 重定向"></a>3xx 重定向</h3><p>所有 <code>API</code> <code>不该</code> 返回 <code>3xx</code> 类型的状态码。因为 <code>3xx</code> 类型的响应格式一般为下列格式：</p><figure class="highlight http"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1 <span class="number">302</span> Found</span><br><span class="line"><span class="attribute">Server</span>: nginx/1.11.9</span><br><span class="line"><span class="attribute">Content-Type</span>: text/html; charset=UTF-8</span><br><span class="line"><span class="attribute">Transfer-Encoding</span>: chunked</span><br><span class="line"><span class="attribute">Cache-Control</span>: no-cache, private</span><br><span class="line"><span class="attribute">Date</span>: Sun, 24 Jun 2018 09:41:50 GMT</span><br><span class="line"><span class="attribute">Location</span>: https://example.com</span><br><span class="line"><span class="attribute">Connection</span>: keep-alive</span><br></pre></td></tr></tbody></table></figure><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"refresh"</span> <span class="attr">content</span>=<span class="string">"0;url=https://example.com"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>Redirecting to https://example.com<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        Redirecting to <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://example.com"</span>&gt;</span>https://example.com<span class="tag">&lt;/<span class="name">a</span>&gt;</span>.</span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>所有 <code>API</code> <code>一定不可</code> 返回纯 <code>HTML</code> 结构的响应；若一定要使用重定向功能，<code>可以</code> 返回一个响应实体为空的 <code>3xx</code> 响应，并在响应头中加上 <code>Location</code> 字段:</p><figure class="highlight http"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1 <span class="number">302</span> Found</span><br><span class="line"><span class="attribute">Server</span>: nginx/1.11.9</span><br><span class="line"><span class="attribute">Content-Type</span>: text/html; charset=UTF-8</span><br><span class="line"><span class="attribute">Transfer-Encoding</span>: chunked</span><br><span class="line"><span class="attribute">Date</span>: Sun, 24 Jun 2018 09:52:50 GMT</span><br><span class="line"><span class="attribute">Location</span>: https://sitoi.cn</span><br><span class="line"><span class="attribute">Connection</span>: keep-alive</span><br></pre></td></tr></tbody></table></figure><h3 id="400-Bad-Request"><a href="#400-Bad-Request" class="headerlink" title="400 Bad Request"></a>400 Bad Request</h3><p>由于明显的客户端错误（例如，请求语法格式错误、无效的请求、无效的签名等），服务器 <code>应该</code> 放弃该请求。</p><blockquote><p>当服务器无法从其他 4xx 类型的状态码中找出合适的来表示错误类型时，都 <code>必须</code> 返回该状态码。</p></blockquote><figure class="highlight http"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1 <span class="number">400</span> Bad Request</span><br><span class="line"><span class="attribute">Server</span>: nginx/1.11.9</span><br><span class="line"><span class="attribute">Content-Type</span>: application/json</span><br><span class="line"><span class="attribute">Transfer-Encoding</span>: chunked</span><br><span class="line"><span class="attribute">Cache-Control</span>: no-cache, private</span><br><span class="line"><span class="attribute">Date</span>: Sun, 24 Jun 2018 13:22:36 GMT</span><br><span class="line"><span class="attribute">Connection</span>: keep-alive</span><br></pre></td></tr></tbody></table></figure><figure class="highlight json"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">{</span><br><span class="line">    <span class="attr">"error_code"</span>:<span class="number">40000</span>,</span><br><span class="line">    <span class="attr">"message"</span>:<span class="string">"无效的签名"</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="401-Unauthorized"><a href="#401-Unauthorized" class="headerlink" title="401 Unauthorized"></a>401 Unauthorized</h3><p>该状态码表示当前请求需要身份认证，以下情况都 <code>必须</code> 返回该状态码。</p><ul><li>未认证用户访问需要认证的 API</li><li>access_token 无效/过期</li></ul><blockquote><p>客户端在收到 <code>401</code> 响应后，都 <code>应该</code> 提示用户进行下一步的登录操作。</p></blockquote><figure class="highlight http"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1 <span class="number">401</span> Unauthorized</span><br><span class="line"><span class="attribute">Server</span>: nginx/1.11.9</span><br><span class="line"><span class="attribute">Content-Type</span>: application/json</span><br><span class="line"><span class="attribute">Transfer-Encoding</span>: chunked</span><br><span class="line"><span class="attribute">WWW-Authenticate</span>: JWTAuth</span><br><span class="line"><span class="attribute">Cache-Control</span>: no-cache, private</span><br><span class="line"><span class="attribute">Date</span>: Sun, 24 Jun 2018 13:17:02 GMT</span><br><span class="line"><span class="attribute">Connection</span>: keep-alive</span><br></pre></td></tr></tbody></table></figure><figure class="highlight json"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">{</span><br><span class="line">    <span class="attr">"message"</span>:<span class="string">"Token Signature could not be verified."</span>,</span><br><span class="line">    <span class="attr">"error_code"</span>:<span class="string">"40100"</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="403-Forbidden"><a href="#403-Forbidden" class="headerlink" title="403 Forbidden"></a>403 Forbidden</h3><p>该状态码可以简单的理解为没有权限访问该请求，服务器收到请求但拒绝提供服务。</p><p>如当普通用户请求操作管理员用户时，<code>必须</code> 返回该状态码。</p><figure class="highlight http"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1 <span class="number">403</span> Forbidden</span><br><span class="line"><span class="attribute">Server</span>: nginx/1.11.9</span><br><span class="line"><span class="attribute">Content-Type</span>: application/json</span><br><span class="line"><span class="attribute">Transfer-Encoding</span>: chunked</span><br><span class="line"><span class="attribute">Cache-Control</span>: no-cache, private</span><br><span class="line"><span class="attribute">Date</span>: Sun, 24 Jun 2018 13:05:34 GMT</span><br><span class="line"><span class="attribute">Connection</span>: keep-alive</span><br></pre></td></tr></tbody></table></figure><figure class="highlight json"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">{</span><br><span class="line">    <span class="attr">"error_code"</span>:<span class="number">40301</span>,</span><br><span class="line">    <span class="attr">"message"</span>:<span class="string">"权限不足"</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="404-Not-Found"><a href="#404-Not-Found" class="headerlink" title="404 Not Found"></a>404 Not Found</h3><p>该状态码表示用户请求的资源不存在，如</p><ul><li>获取不存在的用户信息 （get /users/9999999）</li><li>访问不存在的端点</li></ul><p>都 <code>必须</code> 返回该状态码，若该资源已永久不存在，则 <code>应该</code> 返回 <code>410</code> 响应。</p><h3 id="405-Method-Not-Allowed"><a href="#405-Method-Not-Allowed" class="headerlink" title="405 Method Not Allowed"></a>405 Method Not Allowed</h3><p>当客户端使用的 <code>HTTP</code> 请求方法不被服务器允许时，<code>必须</code> 返回该状态码。</p><blockquote><p>如客户端调用了 <code>POST</code> 方法来访问只支持 GET 方法的 API</p></blockquote><p>该响应 <code>必须</code> 返回一个 <code>Allow</code> 头信息用以表示出当前资源能够接受的请求方法的列表。</p><figure class="highlight http"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1 <span class="number">405</span> Method Not Allowed</span><br><span class="line"><span class="attribute">Server</span>: nginx/1.11.9</span><br><span class="line"><span class="attribute">Content-Type</span>: application/json</span><br><span class="line"><span class="attribute">Transfer-Encoding</span>: chunked</span><br><span class="line"><span class="attribute">Allow</span>: GET, HEAD</span><br><span class="line"><span class="attribute">Cache-Control</span>: no-cache, private</span><br><span class="line"><span class="attribute">Date</span>: Sun, 24 Jun 2018 12:30:57 GMT</span><br><span class="line"><span class="attribute">Connection</span>: keep-alive</span><br></pre></td></tr></tbody></table></figure><figure class="highlight json"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">{</span><br><span class="line">    <span class="attr">"message"</span>:<span class="string">"405 Method Not Allowed"</span>,</span><br><span class="line">    <span class="attr">"error_code"</span>:<span class="number">40500</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="406-Not-Acceptable"><a href="#406-Not-Acceptable" class="headerlink" title="406 Not Acceptable"></a>406 Not Acceptable</h3><p><code>API</code> 在不支持客户端指定的数据格式时，应该返回此状态码。如支持 <code>JSON</code> 和 <code>XML</code> 输出的 <code>API</code> 被指定返回 <code>YAML</code> 格式的数据时。</p><blockquote><p>Http 协议一般通过请求首部的 Accept 来指定数据格式</p></blockquote><h3 id="408-Request-Timeout"><a href="#408-Request-Timeout" class="headerlink" title="408 Request Timeout"></a>408 Request Timeout</h3><p>客户端请求超时时 <code>必须</code> 返回该状态码，需要注意的时，该状态码表示 <strong>客户端请求超时</strong>，在涉及第三方 <code>API</code> 调用超时时，<code>一定不可</code> 返回该状态码。</p><h3 id="409-Confilct"><a href="#409-Confilct" class="headerlink" title="409 Confilct"></a>409 Confilct</h3><p>该状态码表示因为请求存在冲突无法处理。如通过手机号码提供注册功能的 <code>API</code>，当用户提交的手机号已存在时，<code>必须</code> 返回此状态码。</p><figure class="highlight http"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1 <span class="number">409</span> Conflict</span><br><span class="line"><span class="attribute">Server</span>: nginx/1.11.9</span><br><span class="line"><span class="attribute">Content-Type</span>: application/json</span><br><span class="line"><span class="attribute">Transfer-Encoding</span>: chunked</span><br><span class="line"><span class="attribute">Cache-Control</span>: no-cache, private</span><br><span class="line"><span class="attribute">Date</span>: Sun, 24 Jun 2018 12:19:04 GMT</span><br><span class="line"><span class="attribute">Connection</span>: keep-alive</span><br></pre></td></tr></tbody></table></figure><figure class="highlight json"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">{</span><br><span class="line">    <span class="attr">"error_code"</span>:<span class="number">40900</span>,</span><br><span class="line">    <span class="attr">"message"</span>:<span class="string">"手机号已存在"</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="410-Gone"><a href="#410-Gone" class="headerlink" title="410 Gone"></a>410 Gone</h3><p>和 <code>404</code> 类似，该状态码也表示请求的资源不存在，只是 <code>410</code> 状态码进一步表示所请求的资源已不存在，并且未来也不会存在。在收到 <code>410</code> 状态码后，客户端 <code>应该</code> 停止再次请求该资源。</p><h3 id="413-Request-Entity-Too-Large"><a href="#413-Request-Entity-Too-Large" class="headerlink" title="413 Request Entity Too Large"></a>413 Request Entity Too Large</h3><p>该状态码表示服务器拒绝处理当前请求，因为该请求提交的实体数据大小超过了服务器愿意或者能够处理的范围。</p><blockquote><p>此种情况下，服务器可以关闭连接以免客户端继续发送此请求。</p></blockquote><p>如果这个状况是临时的，服务器 <code>应该</code> 返回一个 <code>Retry-After</code> 的响应头，以告知客户端可以在多少时间以后重新尝试。</p><h3 id="414-Request-URI-Too-Long"><a href="#414-Request-URI-Too-Long" class="headerlink" title="414 Request-URI Too Long"></a>414 Request-URI Too Long</h3><p>该状态码表示请求的 <code>URI</code> 长度超过了服务器能够解释的长度，因此服务器拒绝对该请求提供服务。</p><h3 id="415-Unsupported-Media-Type"><a href="#415-Unsupported-Media-Type" class="headerlink" title="415 Unsupported Media Type"></a>415 Unsupported Media Type</h3><p>通常表示服务器不支持客户端请求首部 <code>Content-Type</code> 指定的数据格式。如在只接受 <code>JSON</code> 格式的 <code>API</code> 中放入 <code>XML</code> 类型的数据并向服务器发送，都 <code>应该</code> 返回该状态码。</p><p>该状态码也可用于如：只允许上传图片格式的文件，但是客户端提交媒体文件非法或不是图片类型，这时 <code>应该</code> 返回该状态码：</p><figure class="highlight http"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1 <span class="number">415</span> Unsupported Media Type</span><br><span class="line"><span class="attribute">Server</span>: nginx/1.11.9</span><br><span class="line"><span class="attribute">Content-Type</span>: application/json</span><br><span class="line"><span class="attribute">Transfer-Encoding</span>: chunked</span><br><span class="line"><span class="attribute">Cache-Control</span>: no-cache, private</span><br><span class="line"><span class="attribute">Date</span>: Sun, 24 Jun 2018 12:09:40 GMT</span><br><span class="line"><span class="attribute">Connection</span>: keep-alive</span><br></pre></td></tr></tbody></table></figure><figure class="highlight json"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">{</span><br><span class="line">    <span class="attr">"error_code"</span>:<span class="number">41500</span>,</span><br><span class="line">    <span class="attr">"message"</span>:<span class="string">"不允许上传的图片格式"</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="429-Too-Many-Requests"><a href="#429-Too-Many-Requests" class="headerlink" title="429 Too Many Requests"></a>429 Too Many Requests</h3><p>该状态码表示用户请求次数超过允许范围。如 <code>API</code> 设定为 <code>60次/分钟</code>，当用户在一分钟内请求次数超过 60 次后，都 <code>应该</code> 返回该状态码。并且也 <code>应该</code> 在响应首部中加上下列头部：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">X-RateLimit-Limit: 10 请求速率（由应用设定，其单位一般为小时/分钟等，这里是 10次/5分钟）</span><br><span class="line">X-RateLimit-Remaining: 0 当前剩余的请求数量</span><br><span class="line">X-RateLimit-Reset: 1529839462 重置时间</span><br><span class="line">Retry-After: 120 下一次访问应该等待的时间（秒）</span><br></pre></td></tr></tbody></table></figure><p>列子</p><figure class="highlight http"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1 <span class="number">429</span> Too Many Requests</span><br><span class="line"><span class="attribute">Server</span>: nginx/1.11.9</span><br><span class="line"><span class="attribute">Content-Type</span>: application/json</span><br><span class="line"><span class="attribute">Transfer-Encoding</span>: chunked</span><br><span class="line"><span class="attribute">X-RateLimit-Limit</span>: 10</span><br><span class="line"><span class="attribute">X-RateLimit-Remaining</span>: 0</span><br><span class="line"><span class="attribute">X-RateLimit-Reset</span>: 1529839462</span><br><span class="line"><span class="attribute">Retry-After</span>: 290</span><br><span class="line"><span class="attribute">Cache-Control</span>: no-cache, private</span><br><span class="line"><span class="attribute">Date</span>: Sun, 24 Jun 2018 11:19:32 GMT</span><br><span class="line"><span class="attribute">Connection</span>: keep-alive</span><br></pre></td></tr></tbody></table></figure><figure class="highlight json"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">{</span><br><span class="line">    <span class="attr">"message"</span>:<span class="string">"You have exceeded your rate limit."</span>,</span><br><span class="line">    <span class="attr">"error_code"</span>:<span class="number">42900</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><code>必须</code> 为所有的 API 设置 Rate Limit 支持。</p><h3 id="500-Internal-Server-Error"><a href="#500-Internal-Server-Error" class="headerlink" title="500 Internal Server Error"></a>500 Internal Server Error</h3><p>该状态码 <code>必须</code> 在服务器出错时抛出，对于所有的 <code>500</code> 错误，都 <code>应该</code> 提供完整的错误信息支持，也方便跟踪调试。</p><h3 id="503-Service-Unavailable"><a href="#503-Service-Unavailable" class="headerlink" title="503 Service Unavailable"></a>503 Service Unavailable</h3><p>该状态码表示服务器暂时处理不可用状态，当服务器需要维护或第三方 <code>API</code> 请求超时/不可达时，都 <code>应该</code> 返回该状态码，其中若是主动关闭 API 服务，<code>应该 </code>在返回的响应首部加上 <code>Retry-After</code> 头部，表示多少秒后可以再次访问。</p><figure class="highlight http"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1 <span class="number">503</span> Service Unavailable</span><br><span class="line"><span class="attribute">Server</span>: nginx/1.11.9</span><br><span class="line"><span class="attribute">Content-Type</span>: application/json</span><br><span class="line"><span class="attribute">Transfer-Encoding</span>: chunked</span><br><span class="line"><span class="attribute">Cache-Control</span>: no-cache, private</span><br><span class="line"><span class="attribute">Date</span>: Sun, 24 Jun 2018 10:56:20 GMT</span><br><span class="line"><span class="attribute">Retry-After</span>: 60</span><br><span class="line"><span class="attribute">Connection</span>: keep-alive</span><br></pre></td></tr></tbody></table></figure><figure class="highlight json"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">{</span><br><span class="line">    <span class="attr">"error_code"</span>:<span class="number">50300</span>,</span><br><span class="line">    <span class="attr">"message"</span>:<span class="string">"服务维护中"</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>其他 <code>HTTP</code> 状态码请参考 <a href="https://zh.wikipedia.org/zh-hans/HTTP%E7%8A%B6%E6%80%81%E7%A0%81">HTTP 状态码- 维基百科</a>。</p><h2 id="版权声明"><a href="#版权声明" class="headerlink" title="版权声明"></a>版权声明</h2><blockquote><p>版权声明：自由转载-非商用-非衍生-保持署名（<a href="https://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh">创意共享3.0许可证</a>）</p></blockquote><h2 id="建议参考"><a href="#建议参考" class="headerlink" title="建议参考"></a>建议参考</h2><p><a href="https://github.com/aisuhua/restful-api-design-references">restful-api-design-references</a></p><p><a href="http://www.cnblogs.com/moonz-wu/p/4211626.html">Principles of good RESTful API Design（译）</a></p><p><a href="http://www.ruanyifeng.com/blog/2011/09/restful.html">理解 RESTful 架构</a></p><p><a href="http://www.ruanyifeng.com/blog/2014/05/restful_api.html">RESTful API 设计指南</a></p><p><a href="https://zh.wikipedia.org/zh-hans/HTTP%E7%8A%B6%E6%80%81%E7%A0%81">HTTP 状态码- 维基百科</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;RESTful-API-设计规范&quot;&gt;&lt;a href=&quot;#RESTful-API-设计规范&quot; class=&quot;headerlink&quot; title=&quot;RESTful API 设计规范&quot;&gt;&lt;/a&gt;RESTful API 设计规范&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;原</summary>
      
    
    
    
    <category term="规范" scheme="https://sitoi.cn/categories/%E8%A7%84%E8%8C%83/"/>
    
    
    <category term="规范" scheme="https://sitoi.cn/tags/%E8%A7%84%E8%8C%83/"/>
    
    <category term="RESTful" scheme="https://sitoi.cn/tags/RESTful/"/>
    
    <category term="API" scheme="https://sitoi.cn/tags/API/"/>
    
    <category term="设计" scheme="https://sitoi.cn/tags/%E8%AE%BE%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>基于 Hexo GitHub 从零开始搭建个人博客（五）：自动部署篇</title>
    <link href="https://sitoi.cn/posts/15908.html"/>
    <id>https://sitoi.cn/posts/15908.html</id>
    <published>2019-12-30T07:53:46.000Z</published>
    <updated>2020-08-19T05:45:51.886Z</updated>
    
    <content type="html"><![CDATA[<div class="note danger">            <p>遇到任何问题，优先在本页面搜索，看看是否已经有该配置教程；<br>不懂得可以百度或者 Google；<br>还有弄不明白的可以在本站点留言，或添加站长 Wechat、QQ 等</p>          </div><div class="note info">            <p>文档目录</p><p><a href="https://sitoi.cn/posts/6666.html">环境准备</a><br><a href="https://sitoi.cn/posts/27801.html">搭建基础</a><br><a href="https://sitoi.cn/posts/63466.html">主题配置</a><br><a href="https://sitoi.cn/posts/49115.html">主题优化 - 添加 PWA</a><br><a href="https://sitoi.cn/posts/15908.html">自动部署</a></p>          </div><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本文教程教你实现，如何将你的 Hexo 博客自动部署到多个平台</p><ul><li>GitHub</li><li>GitLab</li><li>Coding</li><li>Gitee</li></ul><p>优点：</p><ul><li>编写文章，推送到 <code>GitHub</code> 即可实现自动部署</li><li>利用 <code>GitHub</code> 的私有仓库将博客源码直接保存在 <code>GitHub</code> 上</li></ul><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><ol><li><code>Hexo</code> 博客源码的仓库，在 <code>GitHub</code> 上。</li><li><code>ssh</code> 密钥，参考文章：<a href="https://sitoi.cn/posts/43508.html">Windows 下利用 Git 生成 SSH KEY 并配置到 GitHub</a></li></ol><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><ol><li>为需要部署的平台添加密钥</li><li>修改 <code>_config.yml</code> 中的 <code>deploy</code> 配置</li><li>在 GitHub 上设置 <code>Secrets</code></li><li>创建 GitHub Action</li></ol><h2 id="为需要部署的平台添加密钥"><a href="#为需要部署的平台添加密钥" class="headerlink" title="为需要部署的平台添加密钥"></a>为需要部署的平台添加密钥</h2><p>按照之前的教程，只要你之前成功将 Hexo 的博客部署到 GitHub 上，那你电脑在 <code>~/.ssh</code> 目录下一定有以下三个文件：</p><ul><li><code>id_rsa</code>：私钥</li><li><code>id_rsa.pub</code>：公钥</li><li><code>known_hosts</code>：记录对所有用户都可信赖的远程主机的公钥</li></ul><p>将 <code>id_rsa.pub</code>（公钥）添加到不同平台中即可，参考文章：<a href="https://sitoi.cn/posts/43508.html#%E6%9F%A5%E7%9C%8B-SSH-KEY">Windows 下利用 Git 生成 SSH KEY 并配置到 GitHub</a></p><p>下面是不同平台添加的地址：</p><ul><li><a href="https://github.com/settings/ssh/new">GitHub</a></li><li><a href="https://gitlab.com/profile/keys">GitLab</a></li><li><a href="https://e.coding.net/">Coding</a></li><li><a href="https://gitee.com/profile/sshkeys">Gitee</a></li></ul><h2 id="修改-config-yml-中的-deploy-配置"><a href="#修改-config-yml-中的-deploy-配置" class="headerlink" title="修改 _config.yml 中的 deploy 配置"></a>修改 <code>_config.yml</code> 中的 <code>deploy</code> 配置</h2><p>请使用 <code>ssh</code> (即以 <code>git@</code> 开头的 <code>clone</code> 链接)的连接方式，根据直接的实际地址填写。</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">    <span class="attr">repo:</span></span><br><span class="line">      <span class="attr">github:</span> <span class="string">git@github.com:Sitoi/Sitoi.github.io.git</span></span><br><span class="line">      <span class="attr">coding:</span> <span class="string">git@e.coding.net:Sitoi/Sitoi.git</span></span><br><span class="line">      <span class="attr">gitee:</span> <span class="string">git@gitee.com:sitoi/sitoi.git</span></span><br><span class="line">      <span class="attr">gitlab:</span> <span class="string">git@gitlab.com:Sitoi/sitoi.gitlab.io.git</span></span><br><span class="line">    <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></tbody></table></figure><h2 id="在-GitHub-上设置-Secrets"><a href="#在-GitHub-上设置-Secrets" class="headerlink" title="在 GitHub 上设置 Secrets"></a>在 GitHub 上设置 <code>Secrets</code></h2><ol><li><p>进入到你在 <code>GitHub</code> 上面的源码仓库</p></li><li><p>点击右上角的 <code>Settings</code></p><p> <img src="https://cdn.jsdelivr.net/gh/Sitoi/cdn/img/hexo/repos_settings.png" alt="Settings"></p></li><li><p>点击左侧的 <code>Secrets</code></p></li><li><p>点击右上角的 <code>New secret</code></p><p> <img src="https://cdn.jsdelivr.net/gh/Sitoi/cdn/img/hexo/secrets.png" alt="New secret"></p></li><li><p>在 <code>Name</code> 中输入 <code>HEXO_DEPLOY_PRI</code>，在 <code>Value</code> 中填入 <code>id_rsa</code>（私钥）的全部内容</p><p> <img src="https://cdn.jsdelivr.net/gh/Sitoi/cdn/img/hexo/add_secret.png" alt="Add secret"></p></li></ol><h2 id="创建-GitHub-Action"><a href="#创建-GitHub-Action" class="headerlink" title="创建 GitHub Action"></a>创建 GitHub Action</h2><ol><li><p>点击项目上方的 <code>Action</code> 按钮</p><p> <img src="https://cdn.jsdelivr.net/gh/Sitoi/cdn/img/hexo/action.png" alt="Action"></p></li><li><p>点击 <code>set up a workflow yourself</code> 创建 <code>Workflow</code></p><p> <img src="https://cdn.jsdelivr.net/gh/Sitoi/cdn/img/hexo/workflow.png" alt="Workflow"></p></li><li><p>修改 <code>main.yaml</code> 的内容</p><p> <img src="https://cdn.jsdelivr.net/gh/Sitoi/cdn/img/hexo/create_workflow.png" alt="Create Workflow"></p><blockquote><p>根据实际情况修改成你自己的内容</p></blockquote><ul><li><p>Git 推送使用的用户名：git config –global user.name ‘sitoi’：</p></li><li><p>Git 推送使用的邮箱：git config –global user.email ‘133397418@qq.com’</p></li><li><p>Hexo 的版本：npm i <a href="mailto:hexo@4.1.1">hexo@4.1.1</a> -g</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">Hexo</span> <span class="string">CI</span></span><br><span class="line"></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">branches:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">butterfly</span></span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">butterfly-build:</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">strategy:</span></span><br><span class="line">      <span class="attr">matrix:</span></span><br><span class="line">        <span class="attr">node-version:</span> [<span class="number">10.</span><span class="string">x</span>]</span><br><span class="line"></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/checkout@v1</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Use</span> <span class="string">Node.js</span> <span class="number">10.</span><span class="string">x</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/setup-node@v1</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">node-version:</span> <span class="string">'10.x'</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">env</span> <span class="string">prepare</span></span><br><span class="line">        <span class="attr">env:</span></span><br><span class="line">          <span class="attr">HEXO_DEPLOY_PRI:</span> <span class="string">${{</span> <span class="string">secrets.HEXO_DEPLOY_PRI</span> <span class="string">}}</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line">          <span class="string">mkdir</span> <span class="string">-p</span> <span class="string">~/.ssh/</span></span><br><span class="line">          <span class="string">echo</span> <span class="string">"$HEXO_DEPLOY_PRI"</span> <span class="string">&gt;</span> <span class="string">~/.ssh/id_rsa</span></span><br><span class="line">          <span class="string">chmod</span> <span class="number">600</span> <span class="string">~/.ssh/id_rsa</span></span><br><span class="line">          <span class="string">ssh-keyscan</span> <span class="string">github.com</span> <span class="string">&gt;&gt;</span> <span class="string">~/.ssh/known_hosts</span></span><br><span class="line">          <span class="string">ssh-keyscan</span> <span class="string">gitlab.com</span> <span class="string">&gt;&gt;</span> <span class="string">~/.ssh/known_hosts</span></span><br><span class="line">          <span class="string">ssh-keyscan</span> <span class="string">e.coding.net</span> <span class="string">&gt;&gt;</span> <span class="string">~/.ssh/known_hosts</span></span><br><span class="line">          <span class="string">ssh-keyscan</span> <span class="string">gitee.com</span> <span class="string">&gt;&gt;</span> <span class="string">~/.ssh/known_hosts</span></span><br><span class="line">          <span class="string">git</span> <span class="string">config</span> <span class="string">--global</span> <span class="string">user.name</span> <span class="string">'sitoi'</span></span><br><span class="line">          <span class="string">git</span> <span class="string">config</span> <span class="string">--global</span> <span class="string">user.email</span> <span class="string">'133397418@qq.com'</span></span><br><span class="line">          <span class="string">npm</span> <span class="string">i</span></span><br><span class="line">          <span class="string">npm</span> <span class="string">i</span> <span class="string">hexo@4.1.1</span> <span class="string">-g</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">gen</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line">          <span class="string">hexo</span> <span class="string">clean</span></span><br><span class="line">          <span class="string">hexo</span> <span class="string">generate</span></span><br><span class="line">          <span class="string">hexo</span> <span class="string">deploy</span></span><br></pre></td></tr></tbody></table></figure></li></ul></li><li><p>将你的源码推送到 <code>GitHub</code> 上，你的博客一会就会自动更新了。</p></li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    
      
      
    <summary type="html">&lt;div class=&quot;note danger&quot;&gt;
            &lt;p&gt;遇到任何问题，优先在本页面搜索，看看是否已经有该配置教程；&lt;br&gt;不懂得可以百度或者 Google；&lt;br&gt;还有弄不明白的可以在本站点留言，或添加站长 Wechat、QQ 等&lt;/p&gt;
       </summary>
      
    
    
    
    <category term="Hexo" scheme="https://sitoi.cn/categories/Hexo/"/>
    
    
    <category term="GitHub" scheme="https://sitoi.cn/tags/GitHub/"/>
    
    <category term="Hexo" scheme="https://sitoi.cn/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>基于 Hexo GitHub 从零开始搭建个人博客（四）：让你的博客完美支持 PWA</title>
    <link href="https://sitoi.cn/posts/49115.html"/>
    <id>https://sitoi.cn/posts/49115.html</id>
    <published>2019-12-29T14:18:21.000Z</published>
    <updated>2020-08-19T05:45:51.886Z</updated>
    
    <content type="html"><![CDATA[<div class="note danger">            <p>遇到任何问题，优先在本页面搜索，看看是否已经有该配置教程；<br>不懂得可以百度或者 Google；<br>还有弄不明白的可以在本站点留言，或添加站长 Wechat、QQ 等</p>          </div><div class="note info">            <p>文档目录</p><p><a href="https://sitoi.cn/posts/6666.html">环境准备</a><br><a href="https://sitoi.cn/posts/27801.html">搭建基础</a><br><a href="https://sitoi.cn/posts/63466.html">主题配置</a><br><a href="https://sitoi.cn/posts/49115.html">主题优化 - 添加 PWA</a><br><a href="https://sitoi.cn/posts/15908.html">自动部署</a></p>          </div><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>Q：为什么让你的博客支持 PWA？</p></blockquote><ul><li>可以支持离线观看</li><li>可被识别成一个应用程序</li><li>响应式 适合任何形式的设备</li></ul><h2 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h2><ul><li>全站支持 <code>HTTPS</code></li></ul><h2 id="安装-hexo-pwa"><a href="#安装-hexo-pwa" class="headerlink" title="安装 hexo-pwa"></a>安装 hexo-pwa</h2><p>运行如下命令，安装 <code>hexo-pwa</code></p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i hexo-pwa --save</span><br></pre></td></tr></tbody></table></figure><blockquote><p><code>hexo@4.2.0</code> 目前赞不兼容 <code>hexo-pwa</code>,使用 <code>hexo@4.2.0</code> 版本的用户推荐降级到 <code>hexo@4.1.1</code></p></blockquote><p>查询版本 </p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo --version</span><br></pre></td></tr></tbody></table></figure><p>安装 Hexo 指定版本</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i hexo@4.1.1 --save</span><br></pre></td></tr></tbody></table></figure><h2 id="修改配置文件-config-yml"><a href="#修改配置文件-config-yml" class="headerlink" title="修改配置文件 _config.yml"></a>修改配置文件 _config.yml</h2><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">pwa:</span></span><br><span class="line">  <span class="attr">manifest:</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">/manifest.json</span></span><br><span class="line">    <span class="attr">body:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">Sitoi</span></span><br><span class="line">      <span class="attr">short_name:</span> <span class="string">Sitoi</span></span><br><span class="line">      <span class="attr">theme_color:</span> <span class="string">white</span></span><br><span class="line">      <span class="attr">background_color:</span> <span class="string">white</span></span><br><span class="line">      <span class="attr">display:</span> <span class="string">standalone</span></span><br><span class="line">      <span class="attr">orientation:</span> <span class="string">portrait</span></span><br><span class="line">      <span class="attr">scope:</span> <span class="string">/</span></span><br><span class="line">      <span class="attr">start_url:</span> <span class="string">/</span></span><br><span class="line">      <span class="attr">icons:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">src:</span> <span class="string">/medias/logo_48.png</span></span><br><span class="line">          <span class="attr">type:</span> <span class="string">image/png</span></span><br><span class="line">          <span class="attr">sizes:</span> <span class="string">48x48</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">src:</span> <span class="string">/medias/logo_96.png</span></span><br><span class="line">          <span class="attr">type:</span> <span class="string">image/png</span></span><br><span class="line">          <span class="attr">sizes:</span> <span class="string">96x96</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">src:</span> <span class="string">/medias/logo_128.png</span></span><br><span class="line">          <span class="attr">type:</span> <span class="string">image/png</span></span><br><span class="line">          <span class="attr">sizes:</span> <span class="string">128x128</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">src:</span> <span class="string">/medias/logo_144.png</span></span><br><span class="line">          <span class="attr">type:</span> <span class="string">image/png</span></span><br><span class="line">          <span class="attr">sizes:</span> <span class="string">144x144</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">src:</span> <span class="string">/medias/logo_180.png</span></span><br><span class="line">          <span class="attr">type:</span> <span class="string">image/png</span></span><br><span class="line">          <span class="attr">sizes:</span> <span class="string">180x180</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">src:</span> <span class="string">/medias/logo_192.png</span></span><br><span class="line">          <span class="attr">type:</span> <span class="string">image/png</span></span><br><span class="line">          <span class="attr">sizes:</span> <span class="string">192x192</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">src:</span> <span class="string">/medias/logo_512.png</span></span><br><span class="line">          <span class="attr">type:</span> <span class="string">image/png</span></span><br><span class="line">          <span class="attr">sizes:</span> <span class="string">512x512</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">src:</span> <span class="string">/apple-touch-icon.png</span></span><br><span class="line">          <span class="attr">type:</span> <span class="string">image/png</span></span><br><span class="line">          <span class="attr">sizes:</span> <span class="string">180x180</span></span><br><span class="line">  <span class="attr">serviceWorker:</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">/sw.js</span></span><br><span class="line">    <span class="attr">preload:</span></span><br><span class="line">      <span class="attr">urls:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">/</span></span><br><span class="line">      <span class="attr">posts:</span> <span class="number">12</span></span><br><span class="line">    <span class="attr">opts:</span></span><br><span class="line">      <span class="attr">networkTimeoutSeconds:</span> <span class="number">30</span></span><br><span class="line">    <span class="attr">routes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">pattern:</span> <span class="type">!!js/regexp</span> <span class="string">/hm.baidu.com/</span></span><br><span class="line">        <span class="attr">strategy:</span> <span class="string">networkOnly</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">pattern:</span> <span class="type">!!js/regexp</span> <span class="string">/www.google-analytics.com/</span></span><br><span class="line">        <span class="attr">strategy:</span> <span class="string">networkOnly</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">pattern:</span> <span class="type">!!js/regexp</span> <span class="string">/.*\.(js|css|jpg|jpeg|png|gif)$/</span></span><br><span class="line">        <span class="attr">strategy:</span> <span class="string">cacheFirst</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">pattern:</span> <span class="type">!!js/regexp</span> <span class="string">/\//</span></span><br><span class="line">        <span class="attr">strategy:</span> <span class="string">networkFirst</span></span><br><span class="line">  <span class="attr">priority:</span> <span class="number">5</span></span><br></pre></td></tr></tbody></table></figure><blockquote><p><strong>注</strong>：_config.yml 中的 <code>manifest</code> 下的 <code>body</code> 与 <code>manifest.json</code> 文件内容保持一致</p></blockquote><ul><li>manifest - manifest 配置<ul><li>path - <code>manifest.json</code> 的路径，例：<code>/manifest.json</code></li><li>body - <code>manifest.json</code> 的内容，<a href="https://developer.mozilla.org/en-US/docs/Web/Manifest">manifest.json 例子</a>. <code>body</code> 可以为空。如果为空，<code>hexo-pwa</code> 会生存一个 <code>manifest.json</code> 和 <code>JSON.stringify(body)</code></li></ul></li><li>serviceWorker - service worker 配置<ul><li>path: <code>sw.js</code>路径，例: <code>/sw.js</code>, 请务必将 <code>sw.js</code> 放在主目录下</li><li>preload - 您要预加载的网址或帖子<ul><li>urls: 预载网址的数组</li><li>posts: 预载帖子数</li></ul></li><li>opts: <a href="https://googlechromelabs.github.io/sw-toolbox/api.html#options">sw-toolbox</a> 的选项</li><li>routes - 根据 <a href="https://googlechromelabs.github.io/sw-toolbox/#main">sw-toolbox</a> 请求路由和策略。<strong>路线顺序很重要</strong>。<ul><li>pattern: <code>URL</code> 模式，此配置可以是<code>快速样式</code>或 <code>RegExp</code></li><li>strategy: 您要选择的策略。 <a href="https://googlechromelabs.github.io/sw-toolbox/api.html#options">所有策略</a>: <code>cacheFirst</code>, <code>networkFirst</code>, <code>cacheOnly</code>, <code>networkOnly</code>, <code>fastest</code>。警告：日志请求应使用 <code>networkOnly</code> 策略。</li></ul></li></ul></li><li>priority - <a href="https://hexo.io/api/filter.html">插件优先级</a> (default value is 10)</li></ul><h2 id="添加-manifest-json-和-sw-js"><a href="#添加-manifest-json-和-sw-js" class="headerlink" title="添加 manifest.json 和 sw.js"></a>添加 manifest.json 和 sw.js</h2><h3 id="manifest-json"><a href="#manifest-json" class="headerlink" title="manifest.json"></a>manifest.json</h3><p>manifest 生成地址： <a href="https://app-manifest.firebaseapp.com/">https://app-manifest.firebaseapp.com/</a></p><figure class="highlight json"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">{</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"Sitoi"</span>,</span><br><span class="line">  <span class="attr">"short_name"</span>: <span class="string">"Sitoi"</span>,</span><br><span class="line">  <span class="attr">"theme_color"</span>: <span class="string">"white"</span>,</span><br><span class="line">  <span class="attr">"background_color"</span>: <span class="string">"white"</span>,</span><br><span class="line">  <span class="attr">"display"</span>: <span class="string">"standalone"</span>,</span><br><span class="line">  <span class="attr">"scope"</span>: <span class="string">"/"</span>,</span><br><span class="line">  <span class="attr">"start_url"</span>: <span class="string">"/"</span>,</span><br><span class="line">  <span class="attr">"icons"</span>: [</span><br><span class="line">    {</span><br><span class="line">      <span class="attr">"src"</span>: <span class="string">"/medias/logo_48.png"</span>,</span><br><span class="line">      <span class="attr">"sizes"</span>: <span class="string">"48x48"</span>,</span><br><span class="line">      <span class="attr">"type"</span>: <span class="string">"image/png"</span></span><br><span class="line">    },</span><br><span class="line">    {</span><br><span class="line">      <span class="attr">"src"</span>: <span class="string">"/medias/logo_96.png"</span>,</span><br><span class="line">      <span class="attr">"sizes"</span>: <span class="string">"96x96"</span>,</span><br><span class="line">      <span class="attr">"type"</span>: <span class="string">"image/png"</span></span><br><span class="line">    },</span><br><span class="line">    {</span><br><span class="line">      <span class="attr">"src"</span>: <span class="string">"/medias/logo_128.png"</span>,</span><br><span class="line">      <span class="attr">"sizes"</span>: <span class="string">"128x128"</span>,</span><br><span class="line">      <span class="attr">"type"</span>: <span class="string">"image/png"</span></span><br><span class="line">    },</span><br><span class="line">    {</span><br><span class="line">      <span class="attr">"src"</span>: <span class="string">"/medias/logo_144.png"</span>,</span><br><span class="line">      <span class="attr">"sizes"</span>: <span class="string">"144x144"</span>,</span><br><span class="line">      <span class="attr">"type"</span>: <span class="string">"image/png"</span></span><br><span class="line">    },</span><br><span class="line">    {</span><br><span class="line">      <span class="attr">"src"</span>: <span class="string">"/medias/logo_180.png"</span>,</span><br><span class="line">      <span class="attr">"sizes"</span>: <span class="string">"180x180"</span>,</span><br><span class="line">      <span class="attr">"type"</span>: <span class="string">"image/png"</span></span><br><span class="line">    },</span><br><span class="line">    {</span><br><span class="line">      <span class="attr">"src"</span>: <span class="string">"/medias/logo_192.png"</span>,</span><br><span class="line">      <span class="attr">"sizes"</span>: <span class="string">"192x192"</span>,</span><br><span class="line">      <span class="attr">"type"</span>: <span class="string">"image/png"</span></span><br><span class="line">    },</span><br><span class="line">    {</span><br><span class="line">      <span class="attr">"src"</span>: <span class="string">"/medias/logo_512.png"</span>,</span><br><span class="line">      <span class="attr">"sizes"</span>: <span class="string">"512x512"</span>,</span><br><span class="line">      <span class="attr">"type"</span>: <span class="string">"image/png"</span></span><br><span class="line">    },</span><br><span class="line">    {</span><br><span class="line">      <span class="attr">"src"</span>: <span class="string">"/apple-touch-icon.png"</span>,</span><br><span class="line">      <span class="attr">"sizes"</span>: <span class="string">"180x180"</span>,</span><br><span class="line">      <span class="attr">"type"</span>: <span class="string">"image/png"</span></span><br><span class="line">    }</span><br><span class="line">  ]</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><blockquote><p> 参数解释：</p></blockquote><ul><li><p>name: {string} 应用名称，用于安装横幅、启动画面显示</p></li><li><p>short_name: {string} 应用短名称，用于主屏幕显示</p></li><li><p>theme_color: {Color} css色值theme_color 属性可以指定 PWA 的主题颜色。可以通过该属性来控制浏览器 UI 的颜色。比如 PWA 启动画面上状态栏、内容页中状态栏、地址栏的颜色，会被 theme_color 所影响。</p></li><li><p>background_color: {Color} css色值 可以指定启动画面的背景颜色。</p></li><li><p>display: {string} 显示类型</p><ul><li>fullscreen    应用的显示界面将占满整个屏幕</li><li>standalone    浏览器相关UI（如导航栏、工具栏等）将会被隐藏</li><li>minimal-ui    显示形式与standalone类似，浏览器相关UI会最小化为一个按钮，不同浏览器在实现上略有不同</li><li>browser    浏览器模式，与普通网页在浏览器中打开的显示一致</li></ul></li><li><p>scope: {string} 作用域</p><ul><li>scope 应遵循如下规则：</li><li>如果没有在 manifest 中设置 scope，则默认的作用域为 manifest.json 所在文件夹；</li><li>scope 可以设置为 ../ 或者更高层级的路径来扩大PWA的作用域；</li><li>start_url 必须在作用域范围内；</li><li>如果 start_url 为相对地址，其根路径受 scope 所影响；</li><li>如果 start_url 为绝对地址（以 / 开头），则该地址将永远以 / 作为根地址；</li></ul></li><li><p>start_url: {string} 应用启动地址</p></li><li><p>icons: {Array.<imageobject>} 应用图标列表</imageobject></p><ul><li>src: {string} 图标 url</li><li>sizes {string} 图标尺寸，格式为widthxheight，宽高数值以 css 的 px 为单位。如果需要填写多个尺寸，则使用空格进行间隔，如”48x48 96x96 128x128”</li><li>type {string} 图标的 mime 类型，非必填项，该字段可让浏览器快速忽略掉不支持的图标类型</li></ul></li></ul><h3 id="sw-js"><a href="#sw-js" class="headerlink" title="sw.js"></a>sw.js</h3><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">importScripts(<span class="string">'https://g.alicdn.com/kg/workbox/3.3.0/workbox-sw.js'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (workbox) {</span><br><span class="line">    workbox.setConfig({ <span class="attr">modulePathPrefix</span>: <span class="string">'https://g.alicdn.com/kg/workbox/3.3.0/'</span> });</span><br><span class="line"></span><br><span class="line">    workbox.precaching.precache([<span class="string">'/'</span>, <span class="string">'/index.html'</span>]);</span><br><span class="line"></span><br><span class="line">    workbox.routing.registerRoute(<span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">'^https?://sitoi.cn/?$'</span>), workbox.strategies.networkFirst());</span><br><span class="line"></span><br><span class="line">    workbox.routing.registerRoute(<span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">'.*.html'</span>), workbox.strategies.networkFirst());</span><br><span class="line"></span><br><span class="line">    workbox.routing.registerRoute(<span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">'.*.(?:js|css|jpg|png|gif)'</span>), workbox.strategies.staleWhileRevalidate());</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><blockquote><p>修改主页域名 <code>^https?://sitoi.cn/?$</code> 的正则表达式路径，将这个的值修改成你的网站的 <code>host</code></p></blockquote><h2 id="准备-Logo-图片"><a href="#准备-Logo-图片" class="headerlink" title="准备 Logo 图片"></a>准备 Logo 图片</h2><blockquote><p>为了确保你的 PWA 图标支持所有设备，请务必使用 <code>48x48</code>、<code>96x96</code>、<code>128x128</code>、<code>144x144</code>、<code>180x180</code>、<code>192x192</code>、<code>512x512</code> 分辨率的 Logo 图片各一张</p></blockquote><p>将上述图片放到对应的目录下，并修改 <code>_config.yml</code> 和 <code>manifest.json</code> 与之对应</p><p>推荐图片大小转换网站：<a href="https://www.iloveimg.com/zh-cn/resize-image">https://www.iloveimg.com</a></p><h2 id="检查-PWA-服务"><a href="#检查-PWA-服务" class="headerlink" title="检查 PWA 服务"></a>检查 PWA 服务</h2><p>启动你的 hexo 博客</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo cl</span><br><span class="line">hexo s</span><br></pre></td></tr></tbody></table></figure><blockquote><p>这里你的启动可能会启动失败，很有可能的原因是因为 hexo 版本的问题，推荐使用 <a href="mailto:hexo@4.1.1">hexo@4.1.1</a> 及以下版本，请运行以下命令，重新安装 <code>hexo</code></p></blockquote><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i hexo@4.1.1 --save</span><br></pre></td></tr></tbody></table></figure><p>打开你的博客：<a href="http://localhost:4000/">http://localhost:4000/</a></p><p>按 <code>F12</code> 或 <code>右击选择检查</code> 进入调试页面 后选择 Application：</p><h3 id="检查-Manifest"><a href="#检查-Manifest" class="headerlink" title="检查 Manifest"></a>检查 Manifest</h3><p>看到配置正确即可</p><p><img src="https://cdn.jsdelivr.net/gh/Sitoi/cdn/img/hexo_sw.png" alt="Manifest"></p><h3 id="检查-Swrvice-Workers"><a href="#检查-Swrvice-Workers" class="headerlink" title="检查 Swrvice Workers"></a>检查 Swrvice Workers</h3><p>看到 <code>Status activated and is running</code> 即可</p><p><img src="https://cdn.jsdelivr.net/gh/Sitoi/cdn/img/hexo_sw.png" alt="Swrvice Workers"></p><h2 id="使用-Chrome-安装-PWA-应用"><a href="#使用-Chrome-安装-PWA-应用" class="headerlink" title="使用 Chrome 安装 PWA 应用"></a>使用 Chrome 安装 PWA 应用</h2><p>如果一切配置正确，你会看到 你的 Chrome 浏览器 URL 栏的最右侧 有个 ➕ 号，点击即可安装 PWA 应用了</p><p><img src="https://cdn.jsdelivr.net/gh/Sitoi/cdn/img/hexo_install_pwa.png" alt="INSTALL PWA"></p><p>没有也没关系，很有可能是你的 chrome 浏览器没有开对应的服务</p><blockquote><p>打开方式如下：</p></blockquote><ol><li><p>地址栏输入：<code>Chrome://flags</code></p></li><li><p>搜索并启用以下项目：<code>Desktop PWAs local updating</code> ,<code>Intent picker </code> 设置为 enable 即可。</p></li><li><p>重启浏览器即可添加支持。</p></li></ol><blockquote><p>安装成功后，你的电脑桌面就会有你的博客的 PWA 应用了。</p></blockquote><blockquote><p>你以为就结束了吗，一切 ok 了吗，NO 这是一篇完美的安装 PWA，你会发现，使用 ios 的 Safari 添加到主屏幕，图标并不是你设置的。</p></blockquote><h2 id="添加-IOS-Safari-PWA-图标支持"><a href="#添加-IOS-Safari-PWA-图标支持" class="headerlink" title="添加 IOS Safari PWA 图标支持"></a>添加 IOS Safari PWA 图标支持</h2><p>具体原因是因为缺少 apple-touch-icon 的图标，细心的网友应该在上文的 <code>manifest.json</code> 中的 <code>icon</code> 配置中发现了</p><h3 id="manifest-json-添加-apple-touch-icon-图标"><a href="#manifest-json-添加-apple-touch-icon-图标" class="headerlink" title="manifest.json 添加 apple-touch-icon 图标"></a>manifest.json 添加 apple-touch-icon 图标</h3><figure class="highlight json"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">{</span><br><span class="line">  <span class="attr">"src"</span>: <span class="string">"/apple-touch-icon.png"</span>,</span><br><span class="line">  <span class="attr">"sizes"</span>: <span class="string">"180x180"</span>,</span><br><span class="line">  <span class="attr">"type"</span>: <span class="string">"image/png"</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>图标的大小设置为 180x180 直接复制一份，重命名一下即可</p><blockquote><p><strong>注</strong>：_config.yml 中的 <code>manifest</code> 下的 <code>body</code> 与 <code>manifest.json</code> 文件内容保持一致</p></blockquote><h3 id="修改-head-ejs-文件"><a href="#修改-head-ejs-文件" class="headerlink" title="修改 head.ejs 文件"></a>修改 head.ejs 文件</h3><p>文件路径：<code>themes/matery/layout/_partial/head.ejs</code></p><p>在 head 标签里 添加三个元素</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"apple-touch-icon"</span> <span class="attr">href</span>=<span class="string">"&lt;%- theme.appletouchicon %&gt;"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"theme-color"</span> <span class="attr">content</span>=<span class="string">"white"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0, user-scalable=no"</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><ul><li><p>theme-color：中的 content 对应的是你 <code>manifest.json</code> 中的 <code>theme_color</code> 的值</p></li><li><p>viewport: 用于针对移动屏幕优化 PWA 应用 详细链接<a href="https://web.dev/viewport/?utm_source=lighthouse&amp;utm_medium=unknown">viewport</a></p></li><li><p>apple-touch-icon：配置 <code>apple-touch-icon</code> 图标链接</p><p>  请在 <code>_config.yml</code> 中添加：<code>appletouchicon</code></p>  <figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">appletouchicon:</span> <span class="string">/apple-touch-icon.png</span></span><br></pre></td></tr></tbody></table></figure></li></ul><blockquote><p>到此你的 Hexo 博客应该完美的添加了 PWA 了 ~~ 赶紧去体验一下离线访问博客的快速吧。<br>如有问题，请在下方留言!</p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    
      
      
    <summary type="html">&lt;div class=&quot;note danger&quot;&gt;
            &lt;p&gt;遇到任何问题，优先在本页面搜索，看看是否已经有该配置教程；&lt;br&gt;不懂得可以百度或者 Google；&lt;br&gt;还有弄不明白的可以在本站点留言，或添加站长 Wechat、QQ 等&lt;/p&gt;
       </summary>
      
    
    
    
    <category term="Hexo" scheme="https://sitoi.cn/categories/Hexo/"/>
    
    
    <category term="GitHub" scheme="https://sitoi.cn/tags/GitHub/"/>
    
    <category term="Hexo" scheme="https://sitoi.cn/tags/Hexo/"/>
    
    <category term="PWA" scheme="https://sitoi.cn/tags/PWA/"/>
    
  </entry>
  
  <entry>
    <title>基于 Hexo GitHub 从零开始搭建个人博客（三）：Matery 主题（DIY 版）详细配置教程，附博客源码</title>
    <link href="https://sitoi.cn/posts/63466.html"/>
    <id>https://sitoi.cn/posts/63466.html</id>
    <published>2019-12-28T08:52:30.000Z</published>
    <updated>2020-08-19T05:45:51.882Z</updated>
    
    <content type="html"><![CDATA[<div class="note danger">            <p>遇到任何问题，优先在本页面搜索，看看是否已经有该配置教程；<br>不懂得可以百度或者 Google；<br>还有弄不明白的可以在本站点留言，或添加站长 Wechat、QQ 等</p>          </div><div class="note info">            <p>文档目录</p><p><a href="https://sitoi.cn/posts/6666.html">环境准备</a><br><a href="https://sitoi.cn/posts/27801.html">搭建基础</a><br><a href="https://sitoi.cn/posts/63466.html">主题配置</a><br><a href="https://sitoi.cn/posts/49115.html">主题优化 - 添加 PWA</a><br><a href="https://sitoi.cn/posts/15908.html">自动部署</a></p>          </div><div class="note primary no-icon">            <p>这是一个采用 <code>Material Design</code> 和响应式设计的 Hexo 博客主题。</p>          </div><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>阅读本篇前，请确保你已经能够自己在 <code>GitHub Pages</code> 上搭建一个属于自己的初始化博客了。</p><ul><li><a href="https://sitoi.cn/posts/6666.html">基于 Hexo GitHub 从零开始搭建个人博客（一）：环境准备篇</a></li><li><a href="https://sitoi.cn/posts/27801.html">基于 Hexo GitHub 从零开始搭建个人博客（二）：搭建基础篇</a></li></ul><p>本篇是关于 matery 主题的一个介绍和配置教程！Demo:<a href="https://crawlmkt.github.io/">https://crawlmkt.github.io/</a></p><p>阅读完本篇，你的博客基本上已经完全可以使用了。如果有不清楚的地方，也可以阅读本系列后面的文章，或者留言提问，也可以加我微信或 QQ。</p><h2 id="效果截图"><a href="#效果截图" class="headerlink" title="效果截图"></a>效果截图</h2><p><img src="https://cdn.jsdelivr.net/gh/Sitoi/cdn/img/matery_index.png" alt="首页"></p><p><img src="https://cdn.jsdelivr.net/gh/Sitoi/cdn/img/matery_tuijian.png" alt="首页推荐文章"></p><p><img src="https://cdn.jsdelivr.net/gh/Sitoi/cdn/img/matery_list.png" alt="首页文章列表"></p><p><img src="https://cdn.jsdelivr.net/gh/Sitoi/cdn/img/matery_about.png" alt="关于页面"></p><p><img src="https://cdn.jsdelivr.net/gh/Sitoi/cdn/img/matery_post.png" alt="文章详细页"></p><h2 id="博客特性"><a href="#博客特性" class="headerlink" title="博客特性"></a>博客特性</h2><ul><li>简单漂亮，文章内容美观易读</li><li><a href="https://material.io/">Material Design</a> 设计</li><li>响应式设计，博客在桌面端、平板、手机等设备上均能很好的展现</li><li>首页轮播文章及每天动态切换 <code>Banner</code> 图片</li><li>瀑布流式的博客文章列表（文章无特色图片时会有 <code>24</code> 张漂亮的图片代替）</li><li>时间轴式的归档页</li><li><strong>词云</strong>的标签页和<strong>雷达图</strong>的分类页</li><li>丰富的关于我页面（包括关于我、文章统计图、我的项目、我的技能等）</li><li>可自定义的数据的友情链接页面</li><li>支持文章置顶和文章打赏</li><li>支持 <code>MathJax</code></li><li><code>TOC</code> 目录</li><li>可设置复制文章内容时追加版权信息</li><li>可设置阅读文章时做密码验证</li><li><a href="https://gitalk.github.io/">Gitalk</a>、<a href="https://imsun.github.io/gitment/">Gitment</a>、<a href="https://valine.js.org/">Valine</a> 和 <a href="https://disqus.com/">Disqus</a> 评论模块（推荐使用 <code>Gitalk</code>）</li><li>集成了<a href="http://busuanzi.ibruce.info/">不蒜子统计</a>、谷歌分析（<code>Google Analytics</code>）和文章字数统计等功能</li><li>支持在首页的音乐播放和视频播放功能</li><li>绚丽彩虹播放器</li><li>全站支持 PWA</li><li>看板娘</li><li>支持<code>emoji</code>表情，用<code>markdown emoji</code>语法书写直接生成对应的能<strong>跳跃</strong>的表情。</li><li>支持 <a href="http://www.daovoice.io/">DaoVoice</a>、<a href="https://www.tidio.com/">Tidio</a> 在线聊天功能。</li><li>支持 jsdelivr CDN 加速</li></ul><h2 id="使用教程"><a href="#使用教程" class="headerlink" title="使用教程"></a>使用教程</h2><p>当你看到这里的时候，应该已经有一个自己的 <a href="https://hexo.io/zh-cn/">Hexo</a> 博客了。如果还没有的话，不妨使用 Hexo 和 <a href="https://sitoi.cn/posts/15814.html">Markdown</a> 来写博客和文章。</p><ul><li>第一步，点击<a href="https://github.com/Sitoi/Sitoi-blog">这里</a> 下载博客源码到本地</li><li>第二步，安装 npm 依赖包</li><li>第三步，修改下面的配置，DIY 你的个人博客</li><li>第四步，部署 Hexo 博客到 GitHub 上</li></ul><h2 id="安装-npm-依赖包"><a href="#安装-npm-依赖包" class="headerlink" title="安装 npm 依赖包"></a>安装 npm 依赖包</h2><p>下载博客源码后，进入项目根目录安装 npm 依赖包</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></tbody></table></figure><h3 id="检测-hexo-版本"><a href="#检测-hexo-版本" class="headerlink" title="检测 hexo 版本"></a>检测 hexo 版本</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo --version</span><br></pre></td></tr></tbody></table></figure><p>输出内容：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">hexo: 4.1.1</span><br><span class="line">hexo-cli: 3.1.0</span><br><span class="line">os: Windows_NT 10.0.18363 win32 x64</span><br><span class="line">node: 13.5.0</span><br><span class="line">v8: 7.9.317.25-node.23</span><br><span class="line">uv: 1.34.0</span><br><span class="line">zlib: 1.2.11</span><br><span class="line">brotli: 1.0.7</span><br><span class="line">ares: 1.15.0</span><br><span class="line">modules: 79</span><br><span class="line">nghttp2: 1.40.0</span><br><span class="line">napi: 5</span><br><span class="line">llhttp: 2.0.1</span><br><span class="line">openssl: 1.1.1d</span><br><span class="line">cldr: 36.0</span><br><span class="line">icu: 65.1</span><br><span class="line">tz: 2019c</span><br><span class="line">unicode: 12.1</span><br></pre></td></tr></tbody></table></figure><p>查看 hexo 版本，如果不是  <code>hexo: 4.1.1</code> 请运行如下命令</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i hexo@4.1.1</span><br></pre></td></tr></tbody></table></figure><blockquote><p>因为 hexo 版本问题会导致博客运行报错</p></blockquote><h2 id="配置清单"><a href="#配置清单" class="headerlink" title="配置清单"></a>配置清单</h2><p>在本主题的 <code>_config.yml</code> 中可以修改部分自定义信息，有以下几个部分：</p><ul><li><p>博客基本信息</p><ul><li>标题</li><li>副标题</li><li>简介</li><li>关键词</li><li>作者</li><li><code>url</code></li><li><code>favicon</code> </li><li><code>Logo</code></li></ul></li><li><p>菜单栏</p><ul><li>基本菜单信息</li><li>二级菜单配置</li><li>手机二级菜单</li></ul></li><li><p>博客首页的配置</p><ul><li>首页壁纸</li><li>菜单栏右侧 Fork Me 配置</li><li>轮播图配置</li><li>轮播图中的第二个按钮配置</li><li>个人信息</li><li>首页语句</li><li>首页音乐播放器</li><li>首页视频播放器</li><li>首页推荐文章名称和按钮配置</li><li>博客分页</li><li>网站显示的日期格式</li><li>博客页脚信息</li></ul></li><li><p>博客文章页配置</p><ul><li>文章基本信息</li><li>文章字数统计</li><li>TOC 目录</li><li>文章打赏信息</li><li>复制文章内容时追加版权信息</li><li>MathJax</li><li>配置 emoji 表情</li><li>转载限制配置</li><li>文章阅读密码</li><li>文章分享模块</li></ul></li><li><p>博客关于页配置</p><ul><li>个人信息</li><li>项目信息</li><li>技能信息</li></ul></li><li><p>博客留言板配置</p><ul><li>Gitalk</li><li>Gitment</li><li>Disqus</li><li>Livere</li><li>Valine</li><li>miniValine</li></ul></li><li><p>博客友链的配置</p></li><li><p>博客搜索的配置</p></li><li><p>博客特效的配置</p><ul><li>单机页面爱心效果</li><li>背景 Canvas-nest</li></ul></li><li><p>博客统计的配置</p><ul><li>不蒜子</li><li>Google Analytics</li><li>Baidu Analytics</li><li>站长之家</li></ul></li><li><p>博客其他功能配置</p><ul><li>jsdelivr 加速</li><li>是否每日切换背景（首页背景）</li><li>图片懒加载</li><li>网页预加载</li><li>在线聊天功能</li><li>绚丽彩虹播放器</li><li>博客导流公众号</li><li>豆瓣书单影单</li><li>博客看板娘</li></ul></li><li><p>博客添加 PWA 功能</p></li><li><p>博客其他样式配置</p><ul><li>修改主题颜色</li><li>修改 banner 图和文章特色图<br>  默认特色图的集合。当文章没有设置特色图时，本主题会根据文章标题的 <code>hashcode</code> 值取余，来选择展示对应的特色图</li></ul></li></ul><h2 id="修改博客基本信息"><a href="#修改博客基本信息" class="headerlink" title="修改博客基本信息"></a>修改博客基本信息</h2><h3 id="配置博客基本信息"><a href="#配置博客基本信息" class="headerlink" title="配置博客基本信息"></a>配置博客基本信息</h3><ul><li><code>title</code>：网站的标题</li><li><code>subtitle</code>：网站副标题，默认打字效果</li><li><code>description</code>: 网站简介</li><li><code>keywords</code>：便于搜索引擎收录，分类</li><li><code>author</code>：网站作者</li><li><code>url</code>：你的网站主 <code>URL</code>（如：<code>https://xxx.github.io</code>）,如果你后期绑定了自己的域名，切记修改成你的域名。</li><li><code>favicon</code>：<code>favicon</code> 就是站点标签栏的小图标，选择新的图标文件覆盖即可，文件位置：<code>themes/matery/source/favicon.ico</code></li><li><code>logo</code>：网站的 Logo 选择新的图标文件覆盖即可，文件位置：<code>themes/matery/source/apple-touch-icon.png</code></li></ul><h3 id="配置网站文章链接格式"><a href="#配置网站文章链接格式" class="headerlink" title="配置网站文章链接格式"></a>配置网站文章链接格式</h3><p><a href="https://github.com/rozbo/hexo-abbrlink">hexo-abbrlink 插件</a> 可以生成非中文的链接。</p><p>插件作用：自动为每篇文章生成一串数字作每篇文章的 URI 地址。每篇文章的 Front-matter 中会自动增加一个配置项：abbrlink: xxxxx，该项的值就是当前文章的 URI 地址。</p><p>执行安装命令：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-abbrlink --save</span><br></pre></td></tr></tbody></table></figure><p>修改以下配置：</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">permalink:</span> <span class="string">posts/:abbrlink.html</span>   <span class="comment"># 此处可以自己设置，也可以直接使用 :abbrlink.html</span></span><br><span class="line"><span class="attr">abbrlink:</span></span><br><span class="line">  <span class="attr">alg:</span> <span class="string">crc16</span>                      <span class="comment"># 算法选项： crc16(default) and crc32</span></span><br><span class="line">  <span class="attr">rep:</span> <span class="string">dec</span>                        <span class="comment"># 输出进制： dec(default) and hex</span></span><br></pre></td></tr></tbody></table></figure><blockquote><p>这样站点结构就变成了：域名/posts/xxx.html</p></blockquote><h2 id="修改博客菜单栏配置"><a href="#修改博客菜单栏配置" class="headerlink" title="修改博客菜单栏配置"></a>修改博客菜单栏配置</h2><h3 id="配置基本菜单导航信息"><a href="#配置基本菜单导航信息" class="headerlink" title="配置基本菜单导航信息"></a>配置基本菜单导航信息</h3><ol><li>菜单导航名称可以是中文也可以是英文(如：<code>Index</code> 或<code>主页</code>) </li><li>图标 icon 可以在 <a href="https://fontawesome.com/icons">Font Awesome</a> 中查找   </li></ol><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">menu:</span></span><br><span class="line">  <span class="attr">Index:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">/</span></span><br><span class="line">    <span class="attr">icon:</span> <span class="string">fa-home</span></span><br><span class="line">  <span class="attr">Tags:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">/tags</span></span><br><span class="line">    <span class="attr">icon:</span> <span class="string">fa-tags</span></span><br><span class="line">  <span class="attr">Categories:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">/categories</span></span><br><span class="line">    <span class="attr">icon:</span> <span class="string">fa-bookmark</span></span><br><span class="line">  <span class="attr">Archives:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">/archives</span></span><br><span class="line">    <span class="attr">icon:</span> <span class="string">fa-archive</span></span><br><span class="line">  <span class="attr">About:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">/about</span></span><br><span class="line">    <span class="attr">icon:</span> <span class="string">fa-user-circle-o</span></span><br><span class="line">  <span class="attr">Contact:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">/contact</span></span><br><span class="line">    <span class="attr">icon:</span> <span class="string">fa-envelope</span></span><br><span class="line">  <span class="attr">Friends:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">/friends</span></span><br><span class="line">    <span class="attr">icon:</span> <span class="string">fa-address-book</span></span><br></pre></td></tr></tbody></table></figure><h3 id="二级菜单配置方法"><a href="#二级菜单配置方法" class="headerlink" title="二级菜单配置方法"></a>二级菜单配置方法</h3><p>如果你需要二级菜单则可以在原基本菜单导航的基础上如下操作</p><ol><li>在需要添加二级菜单的一级菜单下添加 <code>children</code> 关键字(如：<code>Media</code> 菜单下添加 <code>children</code>)     </li><li>在 <code>children</code> 下创建二级菜单的 名称 <code>name</code>,路径 <code>url</code> 和图标 <code>icon</code>.      </li><li>注意每个二级菜单模块前要加 <code>-</code>.     </li><li>注意缩进格式  </li></ol><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">menu:</span></span><br><span class="line">  <span class="attr">Index:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">/</span></span><br><span class="line">    <span class="attr">icon:</span> <span class="string">fa-home</span></span><br><span class="line">  <span class="attr">Tags:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">/tags</span></span><br><span class="line">    <span class="attr">icon:</span> <span class="string">fa-tags</span></span><br><span class="line">  <span class="attr">Categories:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">/categories</span></span><br><span class="line">    <span class="attr">icon:</span> <span class="string">fa-bookmark</span></span><br><span class="line">  <span class="attr">Archives:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">/archives</span></span><br><span class="line">    <span class="attr">icon:</span> <span class="string">fa-archive</span></span><br><span class="line">  </span><br><span class="line">  <span class="attr">About:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">/about</span></span><br><span class="line">    <span class="attr">icon:</span> <span class="string">fa-user-circle-o</span></span><br><span class="line">  <span class="attr">Contact:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">/contact</span></span><br><span class="line">    <span class="attr">icon:</span> <span class="string">fa-envelope</span></span><br><span class="line">  <span class="attr">Friends:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">/friends</span></span><br><span class="line">    <span class="attr">icon:</span> <span class="string">fa-address-book</span></span><br><span class="line">  <span class="attr">Media:</span></span><br><span class="line">    <span class="comment">#    url: /</span></span><br><span class="line">    <span class="attr">icon:</span> <span class="string">fa-list</span></span><br><span class="line">    <span class="attr">children:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">影单</span></span><br><span class="line">        <span class="attr">url:</span> <span class="string">/movies</span></span><br><span class="line">        <span class="attr">icon:</span> <span class="string">fa-film</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">书单</span></span><br><span class="line">        <span class="attr">url:</span> <span class="string">/books</span></span><br><span class="line">        <span class="attr">icon:</span> <span class="string">fa-book</span></span><br></pre></td></tr></tbody></table></figure><h3 id="手机二级菜单配置"><a href="#手机二级菜单配置" class="headerlink" title="手机二级菜单配置"></a>手机二级菜单配置</h3><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">navMenu:</span></span><br><span class="line">  <span class="attr">mleft:</span> <span class="literal">true</span>    <span class="comment">#  二级侧栏子菜单是否对齐左边</span></span><br><span class="line">  <span class="attr">bgColor:</span> <span class="string">" "</span>   <span class="comment">#  二级侧栏子菜单背景颜色,留空即为全局背景色</span></span><br></pre></td></tr></tbody></table></figure><h2 id="修改博客首页的配置"><a href="#修改博客首页的配置" class="headerlink" title="修改博客首页的配置"></a>修改博客首页的配置</h2><h3 id="菜单栏最右侧是否显示-fork-me-on-github-的图标"><a href="#菜单栏最右侧是否显示-fork-me-on-github-的图标" class="headerlink" title="菜单栏最右侧是否显示 fork me on github 的图标"></a>菜单栏最右侧是否显示 fork me on github 的图标</h3><p>默认为 true，你可以修改为你的仓库地址. </p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">githubLink:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span>                                   <span class="comment"># 是否开启</span></span><br><span class="line">  <span class="attr">url:</span> <span class="string">https://github.com/sitoi/sitoi.github.io</span>  <span class="comment"># GitHub 仓库地址</span></span><br><span class="line">  <span class="attr">title:</span> <span class="string">Fork</span> <span class="string">Me</span>                                 <span class="comment"># 显示文字</span></span><br></pre></td></tr></tbody></table></figure><h3 id="首页轮播图相关配置"><a href="#首页轮播图相关配置" class="headerlink" title="首页轮播图相关配置"></a>首页轮播图相关配置</h3><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">cover:</span></span><br><span class="line">  <span class="attr">showPrevNext:</span> <span class="literal">false</span>     <span class="comment"># 是否显示左右切换按钮</span></span><br><span class="line">  <span class="attr">showIndicators:</span> <span class="literal">false</span>   <span class="comment"># 是否显示指示器</span></span><br><span class="line">  <span class="attr">autoLoop:</span> <span class="literal">false</span>         <span class="comment"># 是否自动轮播</span></span><br><span class="line">  <span class="attr">duration:</span> <span class="number">120</span>           <span class="comment"># 切换延迟时间，默认单位 秒</span></span><br><span class="line">  <span class="attr">intervalTime:</span> <span class="number">5000</span>      <span class="comment"># 自动切换下一张的间隔时间</span></span><br></pre></td></tr></tbody></table></figure><h3 id="首页轮播图中第二个按钮配置"><a href="#首页轮播图中第二个按钮配置" class="headerlink" title="首页轮播图中第二个按钮配置"></a>首页轮播图中第二个按钮配置</h3><p>首页 <code>banner</code> 中的第二个按钮的配置，包括按钮的<code>显示名称</code>、<code>font awesome图标</code>和<code>按钮的超链接</code>.</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">indexbtn:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span>                     <span class="comment"># 是否启动第二个按钮</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">Github</span>                     <span class="comment"># 按钮名称</span></span><br><span class="line">  <span class="attr">icon:</span> <span class="string">fa-github-alt</span>              <span class="comment"># 按钮图标</span></span><br><span class="line">  <span class="attr">url:</span> <span class="string">https://github.com/Sitoi/</span>   <span class="comment"># 按钮超链接</span></span><br></pre></td></tr></tbody></table></figure><h3 id="首页轮播图中的个人信息"><a href="#首页轮播图中的个人信息" class="headerlink" title="首页轮播图中的个人信息"></a>首页轮播图中的个人信息</h3><p><code>首页轮播图</code>中、<code>页脚</code>、以及<code>关于</code>页面都会出现的个人信息，留空即不启用</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">socialLink:</span></span><br><span class="line">  <span class="attr">qq:</span> <span class="number">1333397418</span>               <span class="comment"># QQ</span></span><br><span class="line">  <span class="attr">github:</span> <span class="string">Sitoi</span>                <span class="comment"># GitHub</span></span><br><span class="line">  <span class="attr">facebook:</span>                    <span class="comment"># Facebook</span></span><br><span class="line">  <span class="attr">twitter:</span>                     <span class="comment"># Twitter</span></span><br><span class="line">  <span class="attr">weibo:</span>                       <span class="comment"># Weibo</span></span><br><span class="line">  <span class="attr">email:</span> <span class="number">133397418</span><span class="string">@qq.com</span>      <span class="comment"># 邮箱</span></span><br><span class="line">  <span class="attr">zhihu:</span>                       <span class="comment"># 知乎</span></span><br><span class="line">  <span class="attr">jianshu:</span> <span class="string">0289c6c3a717</span>        <span class="comment"># 简书</span></span><br><span class="line">  <span class="attr">rss:</span> <span class="literal">true</span>                    <span class="comment"># RSS 订阅       true 表示启动、false 表示关闭</span></span><br><span class="line">  <span class="attr">wechat:</span> <span class="literal">true</span>                 <span class="comment"># 微信好友二维码  true 表示启动、false 表示关闭</span></span><br></pre></td></tr></tbody></table></figure><blockquote><p>除 rss 和 wechat 外，其他的都需填写对应的信息即可</p></blockquote><h3 id="RSS-订阅"><a href="#RSS-订阅" class="headerlink" title="RSS 订阅"></a>RSS 订阅</h3><p>基于 <a href="https://github.com/hexojs/hexo-generator-feed">hexo-generator-feed</a> 的 Hexo 插件来做 <code>RSS</code>，安装命令如下：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-feed --save</span><br></pre></td></tr></tbody></table></figure><h3 id="微信好友二维码"><a href="#微信好友二维码" class="headerlink" title="微信好友二维码"></a>微信好友二维码</h3><p>需要修改微信二维码的图片，图片位置：<code>themes/matery/source/wechat.jpg</code></p><h3 id="配置首页语句"><a href="#配置首页语句" class="headerlink" title="配置首页语句"></a>配置首页语句</h3><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">dream:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span>                                 <span class="comment"># 是否开启</span></span><br><span class="line">  <span class="attr">showTitle:</span> <span class="literal">false</span>                             <span class="comment"># 是都显示标题</span></span><br><span class="line">  <span class="attr">title:</span> <span class="string">我的梦想</span>                               <span class="comment"># 标题内容</span></span><br><span class="line">  <span class="attr">text:</span> <span class="string">放弃不难，但坚持一定很酷。——《解忧杂货铺》</span> <span class="comment"># 梦想语句</span></span><br></pre></td></tr></tbody></table></figure><h3 id="配置首页音乐"><a href="#配置首页音乐" class="headerlink" title="配置首页音乐"></a>配置首页音乐</h3><p>要支持音乐播放，就必须开启音乐的播放配置和音乐数据的文件。</p><p>首先，在你的博客 <code>source</code> 目录下的 <code>_data</code> 目录（没有的话就新建一个）中新建 <code>musics.json</code> 文件，文件内容如下所示：</p><figure class="highlight json"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[{</span><br><span class="line">    <span class="attr">"name"</span>: <span class="string">"五月雨变奏电音"</span>,</span><br><span class="line">    <span class="attr">"artist"</span>: <span class="string">"AnimeVibe"</span>,</span><br><span class="line">    <span class="attr">"url"</span>: <span class="string">"http://xxx.com/music1.mp3"</span>,</span><br><span class="line">    <span class="attr">"cover"</span>: <span class="string">"http://xxx.com/music-cover1.png"</span></span><br><span class="line">}, {</span><br><span class="line">    <span class="attr">"name"</span>: <span class="string">"Take me hand"</span>,</span><br><span class="line">    <span class="attr">"artist"</span>: <span class="string">"DAISHI DANCE,Cecile Corbel"</span>,</span><br><span class="line">    <span class="attr">"url"</span>: <span class="string">"/medias/music/music2.mp3"</span>,</span><br><span class="line">    <span class="attr">"cover"</span>: <span class="string">"/medias/music/cover2.png"</span></span><br><span class="line">}, {</span><br><span class="line">    <span class="attr">"name"</span>: <span class="string">"Shape of You"</span>,</span><br><span class="line">    <span class="attr">"artist"</span>: <span class="string">"J.Fla"</span>,</span><br><span class="line">    <span class="attr">"url"</span>: <span class="string">"http://xxx.com/music3.mp3"</span>,</span><br><span class="line">    <span class="attr">"cover"</span>: <span class="string">"http://xxx.com/music-cover3.png"</span></span><br><span class="line">}]</span><br></pre></td></tr></tbody></table></figure><blockquote><p><strong>注</strong>：以上 JSON 中的属性：<code>name</code>、<code>artist</code>、<code>url</code>、<code>cover</code> 分别表示音乐的名称、作者、音乐文件地址、音乐封面。</p></blockquote><p>然后，在 <code>_config.yml</code> 配置文件中激活配置即可：</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">music:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span>                 <span class="comment"># 是否开启</span></span><br><span class="line">  <span class="attr">showTitle:</span> <span class="literal">false</span>              <span class="comment"># 是否显示标题</span></span><br><span class="line">  <span class="attr">title:</span> <span class="string">听听音乐</span>                <span class="comment"># 标题内容</span></span><br><span class="line">  <span class="attr">fixed:</span> <span class="literal">false</span>                  <span class="comment"># 开启吸底模式</span></span><br><span class="line">  <span class="attr">autoplay:</span> <span class="literal">true</span>                <span class="comment"># 是否自动播放</span></span><br><span class="line">  <span class="attr">theme:</span> <span class="string">'#542674'</span>              <span class="comment"># 颜色</span></span><br><span class="line">  <span class="attr">loop:</span> <span class="string">'all'</span>                   <span class="comment"># 音频循环播放, 可选值: 'all', 'one', 'none'</span></span><br><span class="line">  <span class="attr">order:</span> <span class="string">'list'</span>                 <span class="comment"># 音频循环顺序, 可选值: 'list', 'random'</span></span><br><span class="line">  <span class="attr">preload:</span> <span class="string">'auto'</span>               <span class="comment"># 预加载，可选值: 'none', 'metadata', 'auto'</span></span><br><span class="line">  <span class="attr">volume:</span> <span class="number">0.7</span>                   <span class="comment"># 默认音量，请注意播放器会记忆用户设置，用户手动设置音量后默认音量即失效</span></span><br><span class="line">  <span class="attr">listFolded:</span> <span class="literal">false</span>             <span class="comment"># 列表默认折叠</span></span><br><span class="line">  <span class="attr">listMaxHeight:</span> <span class="string">"197px"</span>        <span class="comment"># 列表最大高度</span></span><br></pre></td></tr></tbody></table></figure><h3 id="配置首页视频"><a href="#配置首页视频" class="headerlink" title="配置首页视频"></a>配置首页视频</h3><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">video:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span>                                           <span class="comment"># 是否开启视频</span></span><br><span class="line">  <span class="attr">showTitle:</span> <span class="literal">false</span>                                        <span class="comment"># 是否显示标题</span></span><br><span class="line">  <span class="attr">title:</span> <span class="string">治愈视频</span>                                          <span class="comment"># 标题内容</span></span><br><span class="line">  <span class="attr">url:</span> <span class="string">https://clips.vorwaerts-gmbh.de/big_buck_bunny.mp4</span> <span class="comment"># 视频超链接</span></span><br><span class="line">  <span class="attr">pic:</span>                                                    <span class="comment"># 图片超链接 </span></span><br><span class="line">  <span class="attr">thumbnails:</span>                                             </span><br><span class="line">  <span class="attr">height:</span>                                                 <span class="comment"># 高度</span></span><br><span class="line">  <span class="attr">autoplay:</span> <span class="literal">false</span>                                         <span class="comment"># 是否自动播放</span></span><br><span class="line">  <span class="attr">theme:</span> <span class="string">'#42b983'</span>                                        <span class="comment"># 颜色</span></span><br><span class="line">  <span class="attr">loop:</span> <span class="literal">true</span>                                              <span class="comment"># 是否循环播放</span></span><br><span class="line">  <span class="attr">preload:</span> <span class="string">'auto'</span>                                         <span class="comment"># 预加载，可选值: 'none', 'metadata', 'auto'</span></span><br><span class="line">  <span class="attr">volume:</span> <span class="number">0.7</span>                                             <span class="comment"># 音量大小</span></span><br></pre></td></tr></tbody></table></figure><h3 id="配置推荐文章"><a href="#配置推荐文章" class="headerlink" title="配置推荐文章"></a>配置推荐文章</h3><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">recommend:</span></span><br><span class="line">  <span class="attr">showTitle:</span> <span class="literal">true</span>  <span class="comment"># 是否显示推荐文章的标题</span></span><br></pre></td></tr></tbody></table></figure><h3 id="配置博客分页"><a href="#配置博客分页" class="headerlink" title="配置博客分页"></a>配置博客分页</h3><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">index_generator:</span></span><br><span class="line">  <span class="attr">order_by:</span> <span class="string">-date</span>       <span class="comment"># 排序设置 （默认按日期降序排列）</span></span><br><span class="line"><span class="attr">per_page:</span> <span class="number">12</span>           <span class="comment"># 分页，每页文章数目</span></span><br><span class="line"><span class="attr">pagination_dir:</span> <span class="string">page</span>   <span class="comment"># 分页目录</span></span><br></pre></td></tr></tbody></table></figure><ul><li><code>per_page</code>：推荐使用 3 的倍数，3，6，9，12… 设置为 0 表示不分页，以瀑布流的形式展示</li></ul><h3 id="配置网站显示日期的格式"><a href="#配置网站显示日期的格式" class="headerlink" title="配置网站显示日期的格式"></a>配置网站显示日期的格式</h3><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">date_format:</span> <span class="string">YYYY-MM-DD</span>     <span class="comment"># 日期格式</span></span><br><span class="line"><span class="attr">time_format:</span> <span class="string">HH:mm:ss</span>       <span class="comment"># 时间格式</span></span><br></pre></td></tr></tbody></table></figure><h3 id="配置页脚信息"><a href="#配置页脚信息" class="headerlink" title="配置页脚信息"></a>配置页脚信息</h3><p>页脚总字数统计，激活前请确认你已经安装了 <code>hexo-wordcount</code> 插件，安装命令: <code>npm i --save hexo-wordcount</code></p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">totalCount:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br></pre></td></tr></tbody></table></figure><p>站点运行开始时间配置</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">time:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span>  <span class="comment"># 是否启动</span></span><br><span class="line">  <span class="attr">year:</span> <span class="number">2018</span>    <span class="comment"># 年份</span></span><br><span class="line">  <span class="attr">month:</span> <span class="number">09</span>     <span class="comment"># 月份</span></span><br><span class="line">  <span class="attr">date:</span> <span class="number">24</span>      <span class="comment"># 日期</span></span><br><span class="line">  <span class="attr">hour:</span> <span class="number">00</span>      <span class="comment"># 小时</span></span><br><span class="line">  <span class="attr">minute:</span> <span class="number">00</span>    <span class="comment"># 分钟</span></span><br><span class="line">  <span class="attr">second:</span> <span class="number">00</span>    <span class="comment"># 秒</span></span><br></pre></td></tr></tbody></table></figure><p>ICP 备案信息页脚显示</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">icp:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span>                   <span class="comment"># 是否启动备案信息</span></span><br><span class="line">  <span class="attr">url:</span> <span class="string">http://beian.miit.gov.cn/</span> <span class="comment"># 备案链接</span></span><br><span class="line">  <span class="attr">text:</span> <span class="string">沪ICP备xxxxxxxxx号</span>        <span class="comment"># 备案信息</span></span><br><span class="line">  <span class="attr">icon:</span> <span class="string">/medias/icp.png</span>          <span class="comment"># 图标</span></span><br></pre></td></tr></tbody></table></figure><h2 id="修改博客文章页配置"><a href="#修改博客文章页配置" class="headerlink" title="修改博客文章页配置"></a>修改博客文章页配置</h2><h3 id="配置文章基本信息"><a href="#配置文章基本信息" class="headerlink" title="配置文章基本信息"></a>配置文章基本信息</h3><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">new_post_name:</span> <span class="string">:title.md</span>   <span class="comment"># 新文章的文件名称</span></span><br><span class="line"><span class="attr">default_layout:</span> <span class="string">post</span>       <span class="comment"># 预设布局</span></span><br><span class="line"><span class="attr">auto_spacing:</span> <span class="literal">false</span>        <span class="comment"># 在中文和英文之间加入空格</span></span><br><span class="line"><span class="attr">titlecase:</span> <span class="literal">false</span>           <span class="comment"># 把标题转换为 title case</span></span><br><span class="line"><span class="attr">external_link:</span>             <span class="comment"># 在新标签中打开链接</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span>             <span class="comment"># 在新标签中打开链接</span></span><br><span class="line">  <span class="attr">field:</span>                   <span class="comment"># 对整个网站（site）生效或仅对文章（post）生效</span></span><br><span class="line">  <span class="attr">exclude:</span>                 <span class="comment"># 需要排除的域名。主域名和子域名如 www 需分别配置    []</span></span><br><span class="line"><span class="attr">filename_case:</span> <span class="number">0</span>           <span class="comment"># 把文件名称转换为 (1) 小写或 (2) 大写</span></span><br><span class="line"><span class="attr">render_drafts:</span> <span class="literal">false</span>       <span class="comment"># 显示草稿，默认为：false</span></span><br><span class="line"><span class="attr">post_asset_folder:</span> <span class="literal">true</span>    <span class="comment"># 启动 Asset 文件夹</span></span><br><span class="line"><span class="attr">relative_link:</span> <span class="literal">false</span>       <span class="comment"># 把链接改为与根目录的相对位址</span></span><br><span class="line"><span class="attr">future:</span> <span class="literal">true</span>               <span class="comment"># 显示未来的文章</span></span><br><span class="line"><span class="attr">highlight:</span>                 <span class="comment"># 代码块的设置</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span>            <span class="comment"># 开启代码块高亮</span></span><br><span class="line">  <span class="attr">line_number:</span> <span class="literal">false</span>       <span class="comment"># 显示行数</span></span><br><span class="line">  <span class="attr">auto_detect:</span> <span class="literal">false</span>       <span class="comment"># 如果未指定语言，则启用自动检测</span></span><br><span class="line">  <span class="attr">tab_replace:</span>             <span class="comment"># 用 n 个空格替换 tabs；如果值为空，则不会替换 tabs</span></span><br></pre></td></tr></tbody></table></figure><h3 id="配置代码高亮及样式"><a href="#配置代码高亮及样式" class="headerlink" title="配置代码高亮及样式"></a>配置代码高亮及样式</h3><p>由于 <code>Hexo</code> 自带的代码高亮主题显示不好看，所以主题中使用到了 <a href="https://github.com/ele828/hexo-prism-plugin">hexo-prism-plugin</a> 的 Hexo 插件来做代码高亮，安装命令如下：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -S hexo-prism-plugin</span><br></pre></td></tr></tbody></table></figure><p>然后，修改 Hexo 根目录下 <code>_config.yml</code> 文件中 <code>highlight.enable</code> 的值为 <code>false</code>，并新增 <code>prism</code> 插件相关的配置，主要配置如下：</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">prism_plugin:</span></span><br><span class="line">  <span class="attr">mode:</span> <span class="string">'preprocess'</span>    <span class="comment"># realtime/preprocess</span></span><br><span class="line">  <span class="attr">theme:</span> <span class="string">'tomorrow'</span></span><br><span class="line">  <span class="attr">line_number:</span> <span class="literal">false</span>    <span class="comment"># default false</span></span><br><span class="line">  <span class="attr">custom_css:</span></span><br></pre></td></tr></tbody></table></figure><p>配置代码的样式</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">code:</span></span><br><span class="line">  <span class="attr">lang:</span> <span class="literal">true</span>     <span class="comment"># 代码块是否显示名称</span></span><br><span class="line">  <span class="attr">copy:</span> <span class="literal">true</span>     <span class="comment"># 代码块是否可复制</span></span><br><span class="line">  <span class="attr">shrink:</span> <span class="literal">false</span>  <span class="comment"># 代码块是否可以收缩</span></span><br><span class="line">  <span class="attr">break:</span> <span class="literal">false</span>   <span class="comment"># 代码是否折行</span></span><br></pre></td></tr></tbody></table></figure><h3 id="修改文章字数统计"><a href="#修改文章字数统计" class="headerlink" title="修改文章字数统计"></a>修改文章字数统计</h3><p>如果你想要在文章中显示文章字数、阅读时长信息，可以安装 <a href="https://github.com/willin/hexo-wordcount">hexo-wordcount</a> 插件。</p><p>安装命令如下：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i --save hexo-wordcount</span><br></pre></td></tr></tbody></table></figure><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">postInfo:</span></span><br><span class="line">  <span class="attr">date:</span> <span class="literal">true</span>        <span class="comment"># 发布日期</span></span><br><span class="line">  <span class="attr">update:</span> <span class="literal">true</span>      <span class="comment"># 更新日期</span></span><br><span class="line">  <span class="attr">wordCount:</span> <span class="literal">true</span>   <span class="comment"># 文章字数统计</span></span><br><span class="line">  <span class="attr">min2read:</span> <span class="literal">true</span>    <span class="comment"># 文章阅读时长</span></span><br><span class="line">  <span class="attr">readCount:</span> <span class="literal">false</span>  <span class="comment"># 文章阅读次数</span></span><br></pre></td></tr></tbody></table></figure><h3 id="配置文章-TOC-功能"><a href="#配置文章-TOC-功能" class="headerlink" title="配置文章 TOC 功能"></a>配置文章 TOC 功能</h3><p>是否激活文章 TOC 功能，并配置 TOC 支持选中哪些标题类型，这是全局配置。<br>可以在某篇文章的 Front-matter 中再加上 <code>toc: false</code>，使该篇文章关闭 TOC 目录功能</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">toc:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">heading:</span> <span class="string">h2,</span> <span class="string">h3,</span> <span class="string">h4,</span> <span class="string">h5</span></span><br><span class="line">  <span class="attr">showToggleBtn:</span> <span class="literal">true</span>       <span class="comment"># 是否显示切换TOC目录展开收缩的按钮</span></span><br></pre></td></tr></tbody></table></figure><h3 id="配置文章末尾打赏功能"><a href="#配置文章末尾打赏功能" class="headerlink" title="配置文章末尾打赏功能"></a>配置文章末尾打赏功能</h3><p>默认激活（请替换为的你自己的微信、支付宝二维码图片、或者使用网络图片也可以）</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">reward:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span>                        <span class="comment"># 是否开启打赏</span></span><br><span class="line">  <span class="attr">title:</span> <span class="string">你的赏识是我前进的动力!</span>        <span class="comment"># 打赏标题</span></span><br><span class="line">  <span class="attr">wechat:</span> <span class="string">/medias/reward/wechat.jpg</span>   <span class="comment"># 微信打赏二维码路径</span></span><br><span class="line">  <span class="attr">alipay:</span> <span class="string">/medias/reward/alipay.jpg</span>   <span class="comment"># 支付宝打赏二维码路径</span></span><br></pre></td></tr></tbody></table></figure><h3 id="配置复制追加版权信息"><a href="#配置复制追加版权信息" class="headerlink" title="配置复制追加版权信息"></a>配置复制追加版权信息</h3><p>是否激活复制文章时追加博客和作者的版权信息。</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">copyright:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">minCharNumber:</span> <span class="number">120</span>         <span class="comment"># 至少复制多少个字符就追加版权信息.</span></span><br><span class="line">  <span class="attr">description:</span> <span class="string">本文章著作权归作者所有，任何形式的转载都请注明出处。</span></span><br></pre></td></tr></tbody></table></figure><h3 id="配置-mathjax-数学公式"><a href="#配置-mathjax-数学公式" class="headerlink" title="配置 mathjax 数学公式"></a>配置 mathjax 数学公式</h3><p>是否激活 <code>mathjax</code> 数学公式，这是全局配置，但文章仍然不会都开启 <code>mathjax</code> 渲染，考虑到 <code>mathjax</code> 加载比较耗时，你还需要在需要渲染的文章的 <code>Front-matter</code> 中再加上 <code>mathjax: true</code> 才行。</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">mathjax:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">cdn:</span> <span class="string">https://cdn.bootcss.com/mathjax/2.7.5/MathJax.js?config=TeX-AMS-MML_HTMLorMML</span></span><br></pre></td></tr></tbody></table></figure><h3 id="配置-emoji-表情支持"><a href="#配置-emoji-表情支持" class="headerlink" title="配置 emoji 表情支持"></a>配置 emoji 表情支持</h3><p>本主题新增了对 <code>emoji</code> 表情的支持，使用到了 <a href="https://npm.taobao.org/package/hexo-filter-github-emojis">hexo-filter-github-emojis</a> 的 Hexo 插件来支持 <code>emoji</code>表情的生成，把对应的<code>markdown emoji</code>语法（<code>::</code>,例如：<code>:smile:</code>）转变成会跳跃的<code>emoji</code>表情，安装命令如下：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-filter-github-emojis --save</span><br></pre></td></tr></tbody></table></figure><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">githubEmojis:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">className:</span> <span class="string">github-emoji</span></span><br><span class="line">  <span class="attr">inject:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">styles:</span></span><br><span class="line">  <span class="attr">customEmojis:</span></span><br></pre></td></tr></tbody></table></figure><h3 id="配置是否启用转载限制模块"><a href="#配置是否启用转载限制模块" class="headerlink" title="配置是否启用转载限制模块"></a>配置是否启用转载限制模块</h3><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">reprint:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span>   <span class="comment">#是否启用“转载规则限定模块”</span></span><br><span class="line">  <span class="attr">default:</span> <span class="string">cc_by</span></span><br></pre></td></tr></tbody></table></figure><p>文章转载规则，可以是 <code>cc_by</code>, <code>cc_by_nd</code>, <code>cc_by_sa</code>, <code>cc_by_nc</code>, <code>cc_by_nc_nd</code>, <code>cc_by_nc_sa</code>, <code>cc0</code>, <code>noreprint</code> 或 <code>pay</code> 中的一个</p><h3 id="配置文章阅读密码功能"><a href="#配置文章阅读密码功能" class="headerlink" title="配置文章阅读密码功能"></a>配置文章阅读密码功能</h3><p>阅读文章的密码验证功能，如要使用此功能请激活该配置项，并在对应文章的 <code>Front-matter</code> 中写上 <code>password</code> 的键和加密后的密文即可。</p><blockquote><p>请注意：为了保证密码原文不会被泄露到网页中，文章的密码必须是通过 <code>SHA256</code> 加密的，这样就不会被破解。</p></blockquote><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">verifyPassword:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">promptMessage:</span> <span class="string">请输入访问本文章的密码</span></span><br><span class="line">  <span class="attr">errorMessage:</span>  <span class="string">密码错误，将返回主页！</span></span><br></pre></td></tr></tbody></table></figure><h3 id="配置文章分享模块"><a href="#配置文章分享模块" class="headerlink" title="配置文章分享模块"></a>配置文章分享模块</h3><p><code>sharejs</code> 文章分享模块。</p><blockquote><p>支持顺序，可选项目为 twitter, facebook, google, qq, qzone, wechat, weibo, douban, linkedin。</p></blockquote><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">sharejs:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">sites:</span> <span class="string">wechat,qq,weibo,twitter,facebook,linkedin</span></span><br></pre></td></tr></tbody></table></figure><p><code>addthis</code> 文章分享模块。</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">addthis:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">pubid:</span>            <span class="comment">#前往https://www.addthis.com/获取</span></span><br></pre></td></tr></tbody></table></figure><h2 id="修改博客关于页配置"><a href="#修改博客关于页配置" class="headerlink" title="修改博客关于页配置"></a>修改博客关于页配置</h2><h3 id="配置关于页个人信息"><a href="#配置关于页个人信息" class="headerlink" title="配置关于页个人信息"></a>配置关于页个人信息</h3><p>在<code>关于</code>页面中配置个人信息，包括头像、职业和个人介绍.</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">profile:</span></span><br><span class="line">  <span class="attr">avatar:</span> <span class="string">/medias/avatars/avatar.jpg</span>    <span class="comment"># 头像</span></span><br><span class="line">  <span class="attr">career:</span> <span class="string">IIoT</span> <span class="string">|</span> <span class="string">Python</span> <span class="string">研发工程师</span>       <span class="comment"># 职业</span></span><br><span class="line">  <span class="attr">introduction:</span> <span class="string">活到老，学到老</span>      <span class="comment"># 个人介绍</span></span><br></pre></td></tr></tbody></table></figure><h3 id="配置关于页项目信息"><a href="#配置关于页项目信息" class="headerlink" title="配置关于页项目信息"></a>配置关于页项目信息</h3><p>在<code>关于</code>页面配置<code>我的项目</code>信息，如果你不需要这些信息则可以将其设置为不激活或者将其删除。</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">myProjects:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">data:</span></span><br><span class="line">    <span class="attr">private-network-ipfs:</span></span><br><span class="line">      <span class="attr">icon:</span> <span class="string">fa-cubes</span></span><br><span class="line">      <span class="attr">iconBackground:</span> <span class="string">'linear-gradient(to bottom right, #29B6F6 0%, #1E88E5 100%)'</span></span><br><span class="line">      <span class="attr">url:</span> <span class="string">https://github.com/Sitoi/private-network-ipfs</span></span><br><span class="line">      <span class="attr">desc:</span> <span class="string">利用</span> <span class="string">Docker</span> <span class="string">搭建</span> <span class="string">IPFS</span> <span class="string">私有网络</span></span><br><span class="line">    <span class="attr">scrapy-redis-sentinel:</span></span><br><span class="line">      <span class="attr">icon:</span> <span class="string">fa-github</span></span><br><span class="line">      <span class="attr">iconBackground:</span> <span class="string">'linear-gradient(to bottom right, #66BB6A 0%, #81C784 100%)'</span></span><br><span class="line">      <span class="attr">url:</span> <span class="string">https://github.com/Sitoi/scrapy-redis-sentinel</span></span><br><span class="line">      <span class="attr">desc:</span> <span class="string">scrapy-redis-sentinel</span> <span class="string">基于</span> <span class="string">scrapy-redis</span> <span class="string">的基础上</span> <span class="string">新增</span> <span class="string">哨兵（sentinel）连接模式</span> <span class="string">以及</span> <span class="string">集群（cluster）连接模式。</span></span><br><span class="line">    <span class="attr">SystemdClash:</span></span><br><span class="line">      <span class="attr">icon:</span> <span class="string">fa-plane</span></span><br><span class="line">      <span class="attr">iconBackground:</span> <span class="string">'linear-gradient(to bottom right, #29B6F6 0%, #1E88E5 100%)'</span></span><br><span class="line">      <span class="attr">url:</span> <span class="string">https://github.com/Sitoi/SystemdClash</span></span><br><span class="line">      <span class="attr">desc:</span> <span class="string">Clash</span> <span class="string">以</span> <span class="string">systemd</span> <span class="string">服务的方式开机自启</span></span><br></pre></td></tr></tbody></table></figure><h3 id="配置关于页技能信息"><a href="#配置关于页技能信息" class="headerlink" title="配置关于页技能信息"></a>配置关于页技能信息</h3><p>在<code>关于</code>页面配置<code>我的技能</code>信息，如果你不需要这些信息则可以将其设置为不激活或者将其删除.</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">mySkills:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">data:</span></span><br><span class="line">    <span class="attr">Python:</span></span><br><span class="line">      <span class="attr">background:</span> <span class="string">'linear-gradient(to right, #FF0066 0%, #FF00CC 100%)'</span></span><br><span class="line">      <span class="attr">percent:</span> <span class="number">80</span><span class="string">%</span></span><br><span class="line">    <span class="attr">Docker:</span></span><br><span class="line">      <span class="attr">background:</span> <span class="string">'linear-gradient(to right, #4CAF50 0%, #81C784 100%)'</span></span><br><span class="line">      <span class="attr">percent:</span> <span class="number">80</span><span class="string">%</span></span><br><span class="line">    <span class="attr">OpneShift:</span></span><br><span class="line">      <span class="attr">background:</span> <span class="string">'linear-gradient(to right, #4CAF50 0%, #81C784 100%)'</span></span><br><span class="line">      <span class="attr">percent:</span> <span class="number">70</span><span class="string">%</span></span><br><span class="line">    <span class="attr">Ambari:</span></span><br><span class="line">      <span class="attr">background:</span> <span class="string">'linear-gradient(to right, #4CAF50 0%, #81C784 100%)'</span></span><br><span class="line">      <span class="attr">percent:</span> <span class="number">60</span><span class="string">%</span></span><br><span class="line">    <span class="attr">HDFS:</span></span><br><span class="line">      <span class="attr">background:</span> <span class="string">'linear-gradient(to right, #4CAF50 0%, #81C784 100%)'</span></span><br><span class="line">      <span class="attr">percent:</span> <span class="number">65</span><span class="string">%</span></span><br><span class="line">    <span class="attr">Spark:</span></span><br><span class="line">      <span class="attr">background:</span> <span class="string">'linear-gradient(to right, #4CAF50 0%, #81C784 100%)'</span></span><br><span class="line">      <span class="attr">percent:</span> <span class="number">60</span><span class="string">%</span></span><br><span class="line">    <span class="attr">Flask:</span></span><br><span class="line">      <span class="attr">background:</span> <span class="string">'linear-gradient(to right, #4CAF50 0%, #81C784 100%)'</span></span><br><span class="line">      <span class="attr">percent:</span> <span class="number">80</span><span class="string">%</span></span><br><span class="line">    <span class="attr">MongoDB:</span></span><br><span class="line">      <span class="attr">background:</span> <span class="string">'linear-gradient(to right, #4CAF50 0%, #81C784 100%)'</span></span><br><span class="line">      <span class="attr">percent:</span> <span class="number">70</span><span class="string">%</span></span><br><span class="line">    <span class="attr">MySQL:</span></span><br><span class="line">      <span class="attr">background:</span> <span class="string">'linear-gradient(to right, #4CAF50 0%, #81C784 100%)'</span></span><br><span class="line">      <span class="attr">percent:</span> <span class="number">65</span><span class="string">%</span></span><br><span class="line">    <span class="attr">Vue:</span></span><br><span class="line">      <span class="attr">background:</span> <span class="string">'linear-gradient(to right, #FFEB3B 0%, #FFF176 100%)'</span></span><br><span class="line">      <span class="attr">percent:</span> <span class="number">35</span><span class="string">%</span></span><br></pre></td></tr></tbody></table></figure><h2 id="修改博客留言板配置"><a href="#修改博客留言板配置" class="headerlink" title="修改博客留言板配置"></a>修改博客留言板配置</h2><p><code>contact</code> 页是用来展示<strong>留言板</strong>信息的页面，如果在你的博客 <code>source</code> 目录下还没有 <code>contact/index.md</code> 文件，那么你就需要新建一个，命令如下：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page <span class="string">"contact"</span></span><br></pre></td></tr></tbody></table></figure><p>编辑你刚刚新建的页面文件 <code>/source/contact/index.md</code>，至少需要以下内容：</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">contact</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2018-09-30 17:25:30</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">"contact"</span></span><br><span class="line"><span class="attr">layout:</span> <span class="string">"contact"</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></tbody></table></figure><p><code>/source/contact/index.md</code> 中的 markdown 内容，回展示在留言板的页面上，例子如下：</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">contact</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2019-10-14 13:14:00</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">"contact"</span></span><br><span class="line"><span class="attr">layout:</span> <span class="string">"contact"</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">## 畅所欲言</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="string">在这里可以留下你的足迹，欢迎在下方留言，欢迎交换友链，一起交流学习！</span></span><br></pre></td></tr></tbody></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Sitoi/cdn/img/contact_md.png" alt="效果"></p><blockquote><p><strong>注</strong>：本留言板功能依赖于第三方评论系统，请<strong>激活</strong>你的评论系统才有效果。<br>可同时开启多个留言板~</p></blockquote><h3 id="配置-Gitalk-评论模块"><a href="#配置-Gitalk-评论模块" class="headerlink" title="配置 Gitalk 评论模块"></a>配置 Gitalk 评论模块</h3><p>默认为不激活</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">gitalk:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">owner:</span> <span class="string">sitoi</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">Sitoi.github.io</span></span><br><span class="line">  <span class="attr">oauth:</span></span><br><span class="line">    <span class="attr">clientId:</span></span><br><span class="line">    <span class="attr">clientSecret:</span></span><br><span class="line">  <span class="attr">admin:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">sitoi</span></span><br></pre></td></tr></tbody></table></figure><h3 id="获取-clientId-和-clientSecret"><a href="#获取-clientId-和-clientSecret" class="headerlink" title="获取 clientId 和 clientSecret"></a>获取 clientId 和 clientSecret</h3><p>首先，你得有一个Github账号（这个就不多说了吧），下面，打开 <a href="https://github.com/settings/applications/new">https://github.com/settings/applications/new</a>，具体填法如下：</p><p><img src="https://cdn.jsdelivr.net/gh/Sitoi/cdn/img/new_github_app.png" alt="GitHub APP"></p><ul><li><code>Application name</code>：应用名称，随便填</li><li><code>Homepage URL</code>：没有过多要求，可以填自己的博客地址</li><li><code>Application description</code>：应用描述，描述一下，无要求</li><li><code>Authorization callback URL</code>：这个就有要求了，填自己要使用 Gitalk 的博客地址，不可乱填</li></ul><p>接着，你就可以得到 Client ID 和 Client Secret</p><p><img src="https://cdn.jsdelivr.net/gh/Sitoi/cdn/img/get_app_ids.png" alt="Client ID &amp; Client Secret"></p><p>进行配置，修改配置文件：</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">gitalk:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">owner:</span> <span class="string">sitoi</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">Sitoi.github.io</span></span><br><span class="line">  <span class="attr">oauth:</span></span><br><span class="line">    <span class="attr">clientId:</span></span><br><span class="line">    <span class="attr">clientSecret:</span></span><br><span class="line">  <span class="attr">admin:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">sitoi</span></span><br></pre></td></tr></tbody></table></figure><ul><li><code>enable</code>：true           # 指的是是否开启 Gitalk</li><li><code>owner</code>：sitoi           # 这个项目名的拥有者（GitHub账号或组织）</li><li><code>repo</code>：Sitoi.github.io  # 你要存放的项目名，下文会详细再说</li><li><code>clientId</code>：xxxxxx       # 之前的 Client ID</li><li><code>ClientSecret</code>：xxxxxx   # 之前的 Client Secret</li><li><code>admin</code>：sitoi     # 管理员用户，下文也会详细讲</li></ul><p><code>repo</code>：Gitalk 是基于 GitHub 的 issues 功能的，所以，你要为他建一个库或用现成的库，我个人建议新建一个，而 repo 就是你要用的库的名称。 比如，我就为 Gitalk 专门建了一个叫 gitalk 的库，所以在 repo: 处填 gitalk。</p><p><code>admin</code>：即管理员帐号。如果你是个人账号，那么这里就填你的账户名和协作者的账户名。<strong>以数组形式</strong>。</p><h3 id="配置-Gitment-评论模块"><a href="#配置-Gitment-评论模块" class="headerlink" title="配置 Gitment 评论模块"></a>配置 Gitment 评论模块</h3><p>默认为不激活</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">gitment:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">owner:</span></span><br><span class="line">  <span class="attr">repo:</span></span><br><span class="line">  <span class="attr">oauth:</span></span><br><span class="line">    <span class="attr">clientId:</span></span><br><span class="line">    <span class="attr">clientSecret:</span></span><br></pre></td></tr></tbody></table></figure><blockquote><p>获取 clientId 和 clientSecret 教程和上文一样</p></blockquote><h3 id="配置-Disqus-评论模块"><a href="#配置-Disqus-评论模块" class="headerlink" title="配置 Disqus 评论模块"></a>配置 Disqus 评论模块</h3><h4 id="注册-Disqus-帐号"><a href="#注册-Disqus-帐号" class="headerlink" title="注册 Disqus 帐号"></a>注册 Disqus 帐号</h4><p>至 <a href="https://disqus.com/">Disqus</a> 首页注册账号并登录，接着点击首页的「GET STARTED」：</p><p><img src="https://cdn.jsdelivr.net/gh/Sitoi/cdn/img/disqus_index.png" alt="Disqus"></p><p>选择「I want to install Disqus on my site」选项：</p><p><img src="https://cdn.jsdelivr.net/gh/Sitoi/cdn/img/disqus_create.png" alt="I want to install Disqus on my site"></p><p>需要输入的栏目：</p><ul><li>Websit Name：自定义 short name，且是唯一，像我是设置为 sitoi。<code>short name</code> 会在设置 <code>Hexo</code> 時需要</li><li>Category：类别，自行选择</li><li>Language：语言，自行选择</li><li>填写后点击「Create Site」</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Sitoi/cdn/img/disqus_create_new_site.png" alt="Create Site"></p><h4 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h4><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">disqus:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">shortname:</span> <span class="string">sitoi</span>      <span class="comment"># 全部小写</span></span><br></pre></td></tr></tbody></table></figure><h3 id="配置-Livere-来必力评论模块"><a href="#配置-Livere-来必力评论模块" class="headerlink" title="配置 Livere 来必力评论模块"></a>配置 Livere 来必力评论模块</h3><h4 id="注册-LiveRe-获取-uid"><a href="#注册-LiveRe-获取-uid" class="headerlink" title="注册 LiveRe 获取 uid"></a>注册 LiveRe 获取 uid</h4><p>进入 <a href="https://livere.com/apply">LiveRe</a>，注册账号。</p><p>LiveRe 有两个版本：</p><ul><li>City 版：是一款适合所有人使用的免费版本；</li><li>Premium 版：是一款能够帮助企业实现自动化管理的多功能收费版本。</li></ul><p>我们 City 版就够了。</p><p><img src="https://cdn.jsdelivr.net/gh/Sitoi/cdn/img/livere.png" alt="LiveRe"></p><p>填写完成后，进入到 管理页面 -&gt; 代码管理 -&gt; 一般网站 代码中，data-uid 即为所需 uid。</p><h4 id="修改配置文件-1"><a href="#修改配置文件-1" class="headerlink" title="修改配置文件"></a>修改配置文件</h4><p>将获取到的 uid 填入对应的配置文件</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">livere:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">uid:</span> </span><br></pre></td></tr></tbody></table></figure><h3 id="配置-Valine-评论模块的配置"><a href="#配置-Valine-评论模块的配置" class="headerlink" title="配置 Valine 评论模块的配置"></a>配置 Valine 评论模块的配置</h3><p>获取 <code>appId</code> 和 <code>appKey</code> 请参考<a href="https://valine.js.org/quickstart.html#%E8%8E%B7%E5%8F%96APP-ID-%E5%92%8C-APP-Key">官方文档</a></p><p>默认为不激活，如要使用，就请激活该配置项，并设置 <code>appId</code> 和 <code>appKey</code>。</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">valine:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">appId:</span> <span class="string">APP_ID</span></span><br><span class="line">  <span class="attr">appKey:</span> <span class="string">APP_KEY</span></span><br><span class="line">  <span class="attr">notify:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">verify:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">visitor:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">avatar:</span> <span class="string">'mm'</span>               <span class="comment"># Gravatar style : mm/identicon/monsterid/wavatar/retro/hide</span></span><br><span class="line">  <span class="attr">pageSize:</span> <span class="number">10</span></span><br><span class="line">  <span class="attr">placeholder:</span> <span class="string">'just go go'</span>  <span class="comment"># Comment Box placeholder</span></span><br><span class="line">  <span class="attr">background:</span> <span class="string">/medias/comment_bg.png</span></span><br></pre></td></tr></tbody></table></figure><h3 id="配置-miniValine-评论模块的配置"><a href="#配置-miniValine-评论模块的配置" class="headerlink" title="配置 miniValine 评论模块的配置"></a>配置 miniValine 评论模块的配置</h3><p>获取 <code>appId</code> 和 <code>appKey</code> 请参考<a href="https://valine.js.org/quickstart.html#%E8%8E%B7%E5%8F%96APP-ID-%E5%92%8C-APP-Key">官方文档</a></p><p>默认为不激活，如要使用，就请激活该配置项，并设置 <code>appId</code> 和 <code>appKey</code>。</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">minivaline:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">appId:</span>  <span class="string">APP_ID</span></span><br><span class="line">  <span class="attr">appKey:</span>  <span class="string">APP_KEY</span></span><br><span class="line">  <span class="attr">placeholder:</span> <span class="string">'just go go'</span> <span class="comment"># Comment box placeholder</span></span><br><span class="line">  <span class="attr">adminEmailMd5:</span> <span class="comment"># The MD5 of Admin Email to show Admin Flag.</span></span><br><span class="line">  <span class="attr">math:</span> <span class="literal">true</span> <span class="comment"># Support MathJax.</span></span><br><span class="line">  <span class="attr">md:</span> <span class="literal">true</span> <span class="comment"># Support Markdown.</span></span><br><span class="line">  <span class="comment"># MiniValine's display language depends on user's browser or system environment</span></span><br><span class="line">  <span class="comment"># If you want everyone visiting your site to see a uniform language, you can set a force language value</span></span><br><span class="line">  <span class="comment"># Available values: en  | zh-CN | (and many more)</span></span><br><span class="line">  <span class="comment"># More i18n info: https://github.com/MiniValine/minivaline-i18n</span></span><br><span class="line">  <span class="attr">lang:</span> <span class="string">en</span></span><br></pre></td></tr></tbody></table></figure><h2 id="修改博客友链的配置"><a href="#修改博客友链的配置" class="headerlink" title="修改博客友链的配置"></a>修改博客友链的配置</h2><p><code>friends</code> 页是用来展示<strong>友情连接</strong>信息的页面，如果在你的博客 <code>source</code> 目录下还没有 <code>friends/index.md</code> 文件，那么你就需要新建一个，命令如下：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page <span class="string">"friends"</span></span><br></pre></td></tr></tbody></table></figure><p>编辑你刚刚新建的页面文件 <code>/source/friends/index.md</code>，至少需要以下内容：</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">friends</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2018-12-12 21:25:30</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">"friends"</span></span><br><span class="line"><span class="attr">layout:</span> <span class="string">"friends"</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></tbody></table></figure><p>同时，在你的博客 <code>source</code> 目录下新建 <code>_data</code> 目录，在 <code>_data</code> 目录中新建 <code>friends.json</code> 文件，文件内容如下所示：</p><figure class="highlight json"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  {</span><br><span class="line">    <span class="attr">"name"</span>: <span class="string">"Sitoi"</span>,</span><br><span class="line">    <span class="attr">"avatar"</span>: <span class="string">"https://sitoi.cn/medias/avatars/avatar.jpg"</span>,</span><br><span class="line">    <span class="attr">"url"</span>: <span class="string">"https://sitoi.cn/"</span>,</span><br><span class="line">    <span class="attr">"introduction"</span>: <span class="string">"活到老，学到老"</span>,</span><br><span class="line">    <span class="attr">"title"</span>: <span class="string">"访问主页"</span></span><br><span class="line">  },</span><br><span class="line">  {</span><br><span class="line">    <span class="attr">"name"</span>: <span class="string">"闪烁之狐"</span>,</span><br><span class="line">    <span class="attr">"avatar"</span>: <span class="string">"https://blinkfox.github.io/medias/avatar.jpg"</span>,</span><br><span class="line">    <span class="attr">"url"</span>: <span class="string">"https://blinkfox.github.io"</span>,</span><br><span class="line">    <span class="attr">"introduction"</span>: <span class="string">"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬"</span>,</span><br><span class="line">    <span class="attr">"title"</span>: <span class="string">"访问主页"</span></span><br><span class="line">  },</span><br><span class="line">  {</span><br><span class="line">    <span class="attr">"name"</span>: <span class="string">"Licardo"</span>,</span><br><span class="line">    <span class="attr">"avatar"</span>: <span class="string">"https://licardo.cn/medias/avatar.png"</span>,</span><br><span class="line">    <span class="attr">"url"</span>: <span class="string">"https://licardo.cn/"</span>,</span><br><span class="line">    <span class="attr">"introduction"</span>: <span class="string">"一个医学生的成才之路"</span>,</span><br><span class="line">    <span class="attr">"title"</span>: <span class="string">"访问主页"</span></span><br><span class="line">  }</span><br><span class="line">]</span><br></pre></td></tr></tbody></table></figure><h2 id="修改博客搜索的配置"><a href="#修改博客搜索的配置" class="headerlink" title="修改博客搜索的配置"></a>修改博客搜索的配置</h2><p>本主题中还使用到了 <a href="https://github.com/wzpan/hexo-generator-search">hexo-generator-search</a> 的 Hexo 插件来做内容搜索，安装命令如下：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-search --save</span><br></pre></td></tr></tbody></table></figure><p>在 Hexo 根目录下的 <code>_config.yml</code> 文件中，新增以下的配置项：</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">search:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">search.xml</span></span><br><span class="line">  <span class="attr">field:</span> <span class="string">post</span></span><br></pre></td></tr></tbody></table></figure><h2 id="配置网站各种特效"><a href="#配置网站各种特效" class="headerlink" title="配置网站各种特效"></a>配置网站各种特效</h2><h3 id="单击页面爱心效果"><a href="#单击页面爱心效果" class="headerlink" title="单击页面爱心效果"></a>单击页面爱心效果</h3><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">clicklove:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br></pre></td></tr></tbody></table></figure><h3 id="背景-canvas-nest"><a href="#背景-canvas-nest" class="headerlink" title="背景 canvas-nest"></a>背景 canvas-nest</h3><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">canvas_nest:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">color:</span> <span class="number">0</span><span class="string">,0,255</span>       <span class="comment">#线条颜色, 默认: '0,0,0' ；三个数字分别为(R,G,B)，注意用,分割</span></span><br><span class="line">  <span class="attr">pointColor:</span> <span class="number">0</span><span class="string">,0,255</span>  <span class="comment">#交点颜色, 默认: '0,0,0' ；三个数字分别为(R,G,B)，注意用,分割</span></span><br><span class="line">  <span class="attr">opacity:</span> <span class="number">0.8</span>         <span class="comment"># 线条透明度（0~1）, 默认: 0.5</span></span><br><span class="line">  <span class="attr">zIndex:</span> <span class="number">-1</span>           <span class="comment"># 背景的z-index属性，css属性用于控制所在层的位置, 默认: -1</span></span><br><span class="line">  <span class="attr">count:</span> <span class="number">150</span>           <span class="comment"># 线条的总数量, 默认: 99</span></span><br></pre></td></tr></tbody></table></figure><h2 id="配置网站统计功能"><a href="#配置网站统计功能" class="headerlink" title="配置网站统计功能"></a>配置网站统计功能</h2><h3 id="不蒜子统计"><a href="#不蒜子统计" class="headerlink" title="不蒜子统计"></a>不蒜子统计</h3><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">busuanziStatistics:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">totalTraffic:</span> <span class="literal">true</span> <span class="comment"># 总访问量</span></span><br><span class="line">  <span class="attr">totalNumberOfvisitors:</span> <span class="literal">true</span> <span class="comment"># 总人次</span></span><br></pre></td></tr></tbody></table></figure><h3 id="Google-Analytics"><a href="#Google-Analytics" class="headerlink" title="Google Analytics"></a>Google Analytics</h3><p>至 <a href="https://analytics.google.com/">Google Analytics</a> 注册账号，获取 ID</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">googleAnalytics:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">id:</span> <span class="string">GOOGLE_ID</span></span><br></pre></td></tr></tbody></table></figure><h3 id="Baidu-Analytics"><a href="#Baidu-Analytics" class="headerlink" title="Baidu Analytics"></a>Baidu Analytics</h3><p>至 <a href="https://tongji.baidu.com/">百度统计</a> 注册账号，获取 ID</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">baiduAnalytics:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">id:</span> <span class="string">BAIDU_ID</span></span><br></pre></td></tr></tbody></table></figure><h3 id="站长之家统计"><a href="#站长之家统计" class="headerlink" title="站长之家统计"></a>站长之家统计</h3><h4 id="登录并注册帐号"><a href="#登录并注册帐号" class="headerlink" title="登录并注册帐号"></a>登录并注册帐号</h4><p>至 <a href="https://www.umeng.com/">站长之家</a> 注册账号，进入工作台</p><p><img src="https://cdn.jsdelivr.net/gh/Sitoi/cdn/img/umeng_index.png" alt="友盟"></p><h4 id="点击创建新应用，选择创建-Web-应用"><a href="#点击创建新应用，选择创建-Web-应用" class="headerlink" title="点击创建新应用，选择创建 Web 应用"></a>点击创建新应用，选择创建 Web 应用</h4><p><img src="https://cdn.jsdelivr.net/gh/Sitoi/cdn/img/umeng_create.png" alt="创建应用"></p><h4 id="创建-WEB-应用，需要输入的栏目"><a href="#创建-WEB-应用，需要输入的栏目" class="headerlink" title="创建 WEB 应用，需要输入的栏目"></a>创建 WEB 应用，需要输入的栏目</h4><ul><li>网站名称：输入你的网站名称</li><li>网站域名：填入你汪涵的域名 例如：<code>sitoi.cn</code></li><li>网站首页：填写你网站的首页，注意 HTTP 还是 HTTPS</li><li>网站类型：选择网站的类型</li><li>网站地区：选择网站的地区</li><li>网站简介：填写网站的简介</li><li>点击<code>确认添加站点</code></li></ul><p><img src="https://cdn.jsdelivr.net/gh/Sitoi/cdn/img/umeng-create_site.png" alt="创建 WEB 应用"></p><h4 id="获取站长之家代码"><a href="#获取站长之家代码" class="headerlink" title="获取站长之家代码"></a>获取站长之家代码</h4><ul><li>点击获取代码</li><li>选择你喜欢的代码样式</li><li>点击复制到剪贴板</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Sitoi/cdn/img/umeng_code.png" alt="统计代码"></p><h4 id="修改-footer-ejs-代码"><a href="#修改-footer-ejs-代码" class="headerlink" title="修改 footer.ejs 代码"></a>修改 footer.ejs 代码</h4><p>代码文件：<code>themes/matery/layout/_partial/footer.ejs</code><br>代码行数：大约 28 ~ 34 行<br>代码内容如下：</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">%</span> <span class="attr">if</span> (<span class="attr">theme.cnzz</span>) { %&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> cnzz_protocol = ((<span class="string">"https:"</span> == <span class="built_in">document</span>.location.protocol) ? <span class="string">"https://"</span> : <span class="string">"http://"</span>);</span></span><br><span class="line"><span class="javascript">        <span class="built_in">document</span>.write(<span class="built_in">unescape</span>(<span class="string">"%3Cspan id='cnzz_stat_icon_1278109894'%3E%3C/span%3E%3Cscript src='"</span> + cnzz_protocol + <span class="string">"v1.cnzz.com/z_stat.php%3Fid%3D1278109894%26online%3D1%26show%3Dline' type='text/javascript'%3E%3C/script%3E"</span>));</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">%</span> } %&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>替换里面的 <code>&lt;script&gt;...&lt;/script&gt;</code> 为你复制的统计代码。</p><h4 id="修改配置文件-2"><a href="#修改配置文件-2" class="headerlink" title="修改配置文件"></a>修改配置文件</h4><p>将 配置文件中的 <code>cnzz</code> 设置为 <code>true</code> 表示启动，<code>false</code> 表示关闭</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">cnzz:</span> <span class="literal">true</span></span><br></pre></td></tr></tbody></table></figure><h2 id="配置-jsdelivr-加速"><a href="#配置-jsdelivr-加速" class="headerlink" title="配置 jsdelivr 加速"></a>配置 jsdelivr 加速</h2><p>启动 jsdelivr 的 cdn 加速，只需要添加 jsdelivr url 地址即可，url 地址获取方式请参考 <a href="https://sitoi.cn/posts/39161.html">GitHub + jsDelivr + PicGo + Imagine 打造稳定快速、高效免费图床</a></p><p>默认不启动，填空。</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">jsDelivr:</span></span><br><span class="line">  <span class="comment">#  url: https://cdn.jsdelivr.net/gh/crawlmkt/crawlmkt.github.io</span></span><br><span class="line">  <span class="attr">url:</span></span><br></pre></td></tr></tbody></table></figure><h2 id="配置每日切换背景（首页背景）"><a href="#配置每日切换背景（首页背景）" class="headerlink" title="配置每日切换背景（首页背景）"></a>配置每日切换背景（首页背景）</h2><p>banner 是否每日切换。若为 false, 则 banner 默认为 <code>/medias/banner/0.jpg</code> </p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">banner:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br></pre></td></tr></tbody></table></figure><h2 id="修改-banner-图和文章特色图"><a href="#修改-banner-图和文章特色图" class="headerlink" title="修改 banner 图和文章特色图"></a>修改 banner 图和文章特色图</h2><p>你可以直接在 <code>/source/medias/banner</code> 文件夹中更换你喜欢的 <code>banner</code> 图片，主题代码中是每天动态切换一张，只需 <code>7</code> 张即可。如果你会 <code>JavaScript</code> 代码，可以修改成你自己喜欢切换逻辑，如：随机切换等，<code>banner</code> 切换的代码位置在 <code>/layout/_partial/bg-cover-content.ejs</code> 文件的 <code>&lt;script&gt;&lt;/script&gt;</code> 代码中：</p><p>修改对应的地址即可</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;% if (theme.banner.enable) { %&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        // 每天切换 banner 图.  Switch banner image every day.</span><br><span class="line">        $('.bg-cover').css('background-image', 'url(&lt;%- theme.jsDelivr.url %&gt;&lt;%- url_for('/medias/banner/' + new Date().getDay() + '.jpg') %&gt;)');</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;% } else { %&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        $('.bg-cover').css('background-image', 'url(&lt;%- theme.jsDelivr.url %&gt;&lt;%- url_for('/medias/banner/0.jpg') %&gt;)');</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;% } %&gt;</span><br></pre></td></tr></tbody></table></figure><p>如果使用本地的图片，创建 <code>/source/medias/banner</code> 文件夹，添加图片，每个图片必须是<code>jpg</code> 结尾，使用数字进行编号，并需要在 <code>_config.yml</code> 做同步修改。</p><p>默认特色图的集合。当文章没有设置特色图时，本主题会根据文章标题的 <code>hashcode</code> 值取余，来选择展示对应的特色图。</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">featureImages:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">/medias/featureimages/0.jpg</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">/medias/featureimages/1.jpg</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">/medias/featureimages/2.jpg</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">/medias/featureimages/3.jpg</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">/medias/featureimages/4.jpg</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">/medias/featureimages/5.jpg</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">/medias/featureimages/6.jpg</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">/medias/featureimages/7.jpg</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">/medias/featureimages/8.jpg</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">/medias/featureimages/9.jpg</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">/medias/featureimages/10.jpg</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">/medias/featureimages/11.jpg</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">/medias/featureimages/12.jpg</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">/medias/featureimages/13.jpg</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">/medias/featureimages/14.jpg</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">/medias/featureimages/15.jpg</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">/medias/featureimages/16.jpg</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">/medias/featureimages/17.jpg</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">/medias/featureimages/18.jpg</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">/medias/featureimages/19.jpg</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">/medias/featureimages/20.jpg</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">/medias/featureimages/21.jpg</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">/medias/featureimages/22.jpg</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">/medias/featureimages/23.jpg</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">/medias/featureimages/24.jpg</span></span><br></pre></td></tr></tbody></table></figure><h2 id="配置网页预加载"><a href="#配置网页预加载" class="headerlink" title="配置网页预加载"></a>配置网页预加载</h2><p>本主题整体采用预加载模式，预加载就是进入项目前提前加载资源，避免在项目中加载缓慢，影响用户体验,这样可以在我们访问其他页面的时候会稍微快点。</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">instantpage:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br></pre></td></tr></tbody></table></figure><h2 id="配置图片懒加载"><a href="#配置图片懒加载" class="headerlink" title="配置图片懒加载"></a>配置图片懒加载</h2><p><code>懒加载</code>一般是当图片滚动进可视窗口内才加载图片，可视窗口之外的图片则不加载</p><p>本主题图片进行懒加载，这样做效果就是 <code>html</code>、<code>css</code>、<code>js</code> 加载之后，图片再加载。既保证了网页的打开速度，也不会因图片的庞大体积而拖累了整个页面的加载。</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">lazyload:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">onlypost:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">loadingImg:</span> <span class="string">/medias/loading/orange.square-circle-preloader.svg</span></span><br></pre></td></tr></tbody></table></figure><h2 id="配置在线聊天功能"><a href="#配置在线聊天功能" class="headerlink" title="配置在线聊天功能"></a>配置在线聊天功能</h2><h3 id="DaoVoice-在线聊天功能"><a href="#DaoVoice-在线聊天功能" class="headerlink" title="DaoVoice 在线聊天功能"></a>DaoVoice 在线聊天功能</h3><p>前往 <a href="http://www.daovoice.io/">DaoVoice</a> 官网注册并且获取 <code>app_id</code>，并将 <code>app_id</code> 填入主题的 <code>_config.yml</code> 文件中。</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">daovoice:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">app_id:</span></span><br></pre></td></tr></tbody></table></figure><h3 id="Tidio-在线聊天功能"><a href="#Tidio-在线聊天功能" class="headerlink" title="Tidio 在线聊天功能"></a>Tidio 在线聊天功能</h3><p>前往 <a href="https://www.tidio.com/">Tidio</a> 官网注册并且获取 <code>Public Key</code>，并将 <code>Public Key</code> 填入主题的 <code>_config.yml</code> 文件中。</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">tidio:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">public_key:</span></span><br></pre></td></tr></tbody></table></figure><h2 id="配置绚丽彩虹播放器"><a href="#配置绚丽彩虹播放器" class="headerlink" title="配置绚丽彩虹播放器"></a>配置绚丽彩虹播放器</h2><p>致 <a href="https://www.badapple.top/">绚丽彩虹播放器</a> 注册并登录，播放器 Key</p><p>官方教程视频：<a href="https://www.bilibili.com/video/av8153459">https://www.bilibili.com/video/av8153459</a></p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">badApplePlayer:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span>   <span class="comment"># 是否启动</span></span><br><span class="line">  <span class="attr">XlchKey:</span> <span class="string">Sitoi</span>  <span class="comment"># 播放器 Key</span></span><br></pre></td></tr></tbody></table></figure><h2 id="配置博客看板娘"><a href="#配置博客看板娘" class="headerlink" title="配置博客看板娘"></a>配置博客看板娘</h2><p>默认关闭</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 看板娘配置</span></span><br><span class="line"><span class="attr">live2d:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">scriptFrom:</span> <span class="string">local</span></span><br><span class="line">  <span class="attr">pluginRootPath:</span> <span class="string">live2dw/</span></span><br><span class="line">  <span class="attr">pluginJsPath:</span> <span class="string">lib/</span></span><br><span class="line">  <span class="attr">pluginModelPath:</span> <span class="string">assets/</span></span><br><span class="line">  <span class="attr">tagMode:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">log:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">model:</span></span><br><span class="line">    <span class="attr">use:</span> <span class="string">live2d-widget-model-shizuku</span></span><br><span class="line">  <span class="attr">display:</span></span><br><span class="line">    <span class="attr">position:</span> <span class="string">left</span></span><br><span class="line">    <span class="attr">width:</span> <span class="number">150</span></span><br><span class="line">    <span class="attr">height:</span> <span class="number">200</span></span><br><span class="line">  <span class="attr">mobile:</span></span><br><span class="line">    <span class="attr">show:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">react:</span></span><br><span class="line">    <span class="attr">opacity:</span> <span class="number">0.7</span></span><br></pre></td></tr></tbody></table></figure><h2 id="博客添加-PWA-功能"><a href="#博客添加-PWA-功能" class="headerlink" title="博客添加 PWA 功能"></a>博客添加 PWA 功能</h2><p>详细教程请阅读<a href="https://sitoi.cn/posts/49115.html">基于 Hexo GitHub 从零开始搭建个人博客（四）：让你的博客完美支持 PWA</a></p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">pwa:</span></span><br><span class="line">  <span class="attr">manifest:</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">/manifest.json</span></span><br><span class="line">    <span class="attr">body:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">Sitoi</span></span><br><span class="line">      <span class="attr">short_name:</span> <span class="string">Sitoi</span></span><br><span class="line">      <span class="attr">theme_color:</span> <span class="string">white</span></span><br><span class="line">      <span class="attr">background_color:</span> <span class="string">white</span></span><br><span class="line">      <span class="attr">display:</span> <span class="string">standalone</span></span><br><span class="line">      <span class="attr">orientation:</span> <span class="string">portrait</span></span><br><span class="line">      <span class="attr">scope:</span> <span class="string">/</span></span><br><span class="line">      <span class="attr">start_url:</span> <span class="string">/</span></span><br><span class="line">      <span class="attr">icons:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">src:</span> <span class="string">/medias/logo_48.png</span></span><br><span class="line">          <span class="attr">type:</span> <span class="string">image/png</span></span><br><span class="line">          <span class="attr">sizes:</span> <span class="string">48x48</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">src:</span> <span class="string">/medias/logo_96.png</span></span><br><span class="line">          <span class="attr">type:</span> <span class="string">image/png</span></span><br><span class="line">          <span class="attr">sizes:</span> <span class="string">96x96</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">src:</span> <span class="string">/medias/logo_128.png</span></span><br><span class="line">          <span class="attr">type:</span> <span class="string">image/png</span></span><br><span class="line">          <span class="attr">sizes:</span> <span class="string">128x128</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">src:</span> <span class="string">/medias/logo_144.png</span></span><br><span class="line">          <span class="attr">type:</span> <span class="string">image/png</span></span><br><span class="line">          <span class="attr">sizes:</span> <span class="string">144x144</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">src:</span> <span class="string">/medias/logo_180.png</span></span><br><span class="line">          <span class="attr">type:</span> <span class="string">image/png</span></span><br><span class="line">          <span class="attr">sizes:</span> <span class="string">180x180</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">src:</span> <span class="string">/medias/logo_192.png</span></span><br><span class="line">          <span class="attr">type:</span> <span class="string">image/png</span></span><br><span class="line">          <span class="attr">sizes:</span> <span class="string">192x192</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">src:</span> <span class="string">/medias/logo_512.png</span></span><br><span class="line">          <span class="attr">type:</span> <span class="string">image/png</span></span><br><span class="line">          <span class="attr">sizes:</span> <span class="string">512x512</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">src:</span> <span class="string">/apple-touch-icon.png</span></span><br><span class="line">          <span class="attr">type:</span> <span class="string">image/png</span></span><br><span class="line">          <span class="attr">sizes:</span> <span class="string">180x180</span></span><br><span class="line">  <span class="attr">serviceWorker:</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">/sw.js</span></span><br><span class="line">    <span class="attr">preload:</span></span><br><span class="line">      <span class="attr">urls:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">/</span></span><br><span class="line">      <span class="attr">posts:</span> <span class="number">12</span></span><br><span class="line">    <span class="attr">opts:</span></span><br><span class="line">      <span class="attr">networkTimeoutSeconds:</span> <span class="number">30</span></span><br><span class="line">    <span class="attr">routes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">pattern:</span> <span class="type">!!js/regexp</span> <span class="string">/hm.baidu.com/</span></span><br><span class="line">        <span class="attr">strategy:</span> <span class="string">networkOnly</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">pattern:</span> <span class="type">!!js/regexp</span> <span class="string">/www.google-analytics.com/</span></span><br><span class="line">        <span class="attr">strategy:</span> <span class="string">networkOnly</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">pattern:</span> <span class="type">!!js/regexp</span> <span class="string">/.*\.(js|css|jpg|jpeg|png|gif)$/</span></span><br><span class="line">        <span class="attr">strategy:</span> <span class="string">cacheFirst</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">pattern:</span> <span class="type">!!js/regexp</span> <span class="string">/\//</span></span><br><span class="line">        <span class="attr">strategy:</span> <span class="string">networkFirst</span></span><br><span class="line">  <span class="attr">priority:</span> <span class="number">5</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>PWA 适配苹果图标</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">appletouchicon:</span> <span class="string">/apple-touch-icon.png</span></span><br></pre></td></tr></tbody></table></figure><h2 id="修改博客样式"><a href="#修改博客样式" class="headerlink" title="修改博客样式"></a>修改博客样式</h2><h3 id="修改主题颜色"><a href="#修改主题颜色" class="headerlink" title="修改主题颜色"></a>修改主题颜色</h3><p>在主题文件的 <code>/source/css/matery.css</code> 文件中，搜索 <code>.bg-color</code> 来修改背景颜色：</p><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 整体背景颜色，包括导航、移动端的导航、页尾、标签页等的背景颜色. */</span></span><br><span class="line"><span class="selector-class">.bg-color</span> {</span><br><span class="line">    <span class="attribute">background-image</span>: <span class="built_in">linear-gradient</span>(to right, #<span class="number">4</span>cbf30 <span class="number">0%</span>, #<span class="number">0</span>f9d58 <span class="number">100%</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">@-webkit-keyframes</span> rainbow {</span><br><span class="line">   <span class="comment">/* 动态切换背景颜色. */</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">@keyframes</span> rainbow {</span><br><span class="line">    <span class="comment">/* 动态切换背景颜色. */</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="文章-Front-matter-介绍"><a href="#文章-Front-matter-介绍" class="headerlink" title="文章 Front-matter 介绍"></a>文章 Front-matter 介绍</h2><h3 id="Front-matter-选项详解"><a href="#Front-matter-选项详解" class="headerlink" title="Front-matter 选项详解"></a>Front-matter 选项详解</h3><p><code>Front-matter</code> 选项中的所有内容均为<strong>非必填</strong>的。但我仍然建议至少填写 <code>title</code> 和 <code>date</code> 的值。</p><table><thead><tr><th align="center">配置选项</th><th align="left">默认值</th><th align="left">描述</th></tr></thead><tbody><tr><td align="center">title</td><td align="left"><code>Markdown</code> 文件标题</td><td align="left">文章标题，强烈建议填写此选项</td></tr><tr><td align="center">date</td><td align="left">文件创建时的日期时间</td><td align="left">发布时间，强烈建议填写此选项，且最好保证全局唯一</td></tr><tr><td align="center">author</td><td align="left">跟 <code>_config.yml</code> 中的 <code>author</code></td><td align="left">文章作者</td></tr><tr><td align="center">img</td><td align="left"><code>featureImages</code> 中的某个值</td><td align="left">文章特征图，推荐使用图床(腾讯云、七牛云、又拍云等)来做图片的路径.如: <code>http://xxx.com/xxx.jpg</code></td></tr><tr><td align="center">top</td><td align="left"><code>true</code></td><td align="left">推荐文章（文章是否置顶），如果 <code>top</code> 值为 <code>true</code>，则会作为首页推荐文章</td></tr><tr><td align="center">cover</td><td align="left"><code>false</code></td><td align="left">表示该文章是否需要加入到首页轮播封面中</td></tr><tr><td align="center">coverImg</td><td align="left">无</td><td align="left">表示该文章在首页轮播封面需要显示的图片路径，如果没有，则默认使用文章的特色图片</td></tr><tr><td align="center">password</td><td align="left">无</td><td align="left">文章阅读密码，如果要对文章设置阅读验证密码的话，就可以设置 <code>password</code> 的值，该值必须是用 <code>SHA256</code> 加密后的密码，防止被他人识破。前提是在主题的 <code>config.yml</code> 中激活了 <code>verifyPassword</code> 选项</td></tr><tr><td align="center">toc</td><td align="left"><code>true</code></td><td align="left">是否开启 TOC，可以针对某篇文章单独关闭 TOC 的功能。前提是在主题的 <code>config.yml</code> 中激活了 <code>toc</code> 选项</td></tr><tr><td align="center">mathjax</td><td align="left"><code>false</code></td><td align="left">是否开启数学公式支持，本文章是否开启 <code>mathjax</code>，且需要在主题的 <code>_config.yml</code> 文件中也需要开启才行</td></tr><tr><td align="center">summary</td><td align="left">无</td><td align="left">文章摘要，自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要</td></tr><tr><td align="center">categories</td><td align="left">无</td><td align="left">文章分类，本主题的分类表示宏观上大的分类，只建议一篇文章一个分类</td></tr><tr><td align="center">tags</td><td align="left">无</td><td align="left">文章标签，一篇文章可以多个标签</td></tr><tr><td align="center">keywords</td><td align="left">文章标题</td><td align="left">文章关键字，SEO 时需要</td></tr><tr><td align="center">reprintPolicy</td><td align="left">cc_by</td><td align="left">文章转载规则，可以是 <code>cc_by</code>,<code>cc_by_nd</code>,<code>cc_by_sa</code>,<code>cc_by_nc</code>,<code>cc_by_nc_nd</code>,<code>cc_by_nc_sa</code>,<code>cc0</code>,<code>noreprint</code> 或 <code>pay</code> 中的一个</td></tr></tbody></table><blockquote><p><strong>注意</strong>:</p><ol><li>如果 <code>img</code> 属性不填写的话，文章特色图会根据文章标题的 <code>hashcode</code> 的值取余，然后选取主题中对应的特色图片，从而达到让所有文章都的特色图<strong>各有特色</strong>。</li><li><code>date</code> 的值尽量保证每篇文章是唯一的，因为本主题中 <code>Gitalk</code> 和 <code>Gitment</code> 识别 <code>id</code> 是通过 <code>date</code> 的值来作为唯一标识的。</li><li>如果要对文章设置阅读验证密码的功能，不仅要在 Front-matter 中设置采用了 SHA256 加密的 password 的值，还需要在主题的 <code>_config.yml</code> 中激活了配置。有些在线的 SHA256 加密的地址，可供你使用：<a href="http://tool.oschina.net/encrypt?type=2">开源中国在线工具</a>、<a href="http://encode.chahuo.com/">chahuo</a>、<a href="http://tool.chinaz.com/tools/hash.aspx">站长工具</a>。</li><li>您可以在文章md文件的 front-matter 中指定 reprintPolicy 来给单个文章配置转载规则</li></ol></blockquote><p>以下为文章的 <code>Front-matter</code> 示例。</p><h3 id="最简示例"><a href="#最简示例" class="headerlink" title="最简示例"></a>最简示例</h3><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">基于</span> <span class="string">Hexo</span> <span class="string">GitHub</span> <span class="string">从零开始搭建个人博客</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2019-12-30 09:25:00</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></tbody></table></figure><h3 id="最全示例"><a href="#最全示例" class="headerlink" title="最全示例"></a>最全示例</h3><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">基于</span> <span class="string">Hexo</span> <span class="string">GitHub</span> <span class="string">从零开始搭建个人博客</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2019-12-30 09:25:00</span></span><br><span class="line"><span class="attr">author:</span> <span class="string">Sitoi</span></span><br><span class="line"><span class="attr">img:</span> <span class="string">/source/images/xxx.jpg</span></span><br><span class="line"><span class="attr">top:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">cover:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">coverImg:</span> <span class="string">/images/1.jpg</span></span><br><span class="line"><span class="attr">password:</span> <span class="string">8d969eef6ecad3c29a3a629280e686cf0c3f5d5a86aff3ca12020c923adc6c92</span></span><br><span class="line"><span class="attr">toc:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">mathjax:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">summary:</span> <span class="string">这是你自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要</span></span><br><span class="line"><span class="attr">categories:</span> <span class="string">Hexo</span></span><br><span class="line"><span class="attr">keywords:</span> <span class="string">Hexo</span> <span class="string">GitHub</span> <span class="string">blog</span></span><br><span class="line"><span class="attr">tags:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">Hexo</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">Blog</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">GitHub</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></tbody></table></figure><h2 id="本地运行预览"><a href="#本地运行预览" class="headerlink" title="本地运行预览"></a>本地运行预览</h2><h3 id="安装依赖包"><a href="#安装依赖包" class="headerlink" title="安装依赖包"></a>安装依赖包</h3><p>运行如下命令：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i</span><br></pre></td></tr></tbody></table></figure><h3 id="启动-hexo-博客"><a href="#启动-hexo-博客" class="headerlink" title="启动 hexo 博客"></a>启动 hexo 博客</h3><p>运行如下命令：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo server</span><br></pre></td></tr></tbody></table></figure><p>输出如下：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">INFO  Start processing</span><br><span class="line">INFO  Hexo is running at http://localhost:4000 . Press Ctrl+C to stop.</span><br></pre></td></tr></tbody></table></figure><h3 id="查看博客"><a href="#查看博客" class="headerlink" title="查看博客"></a>查看博客</h3><p>打开浏览器，输入地址：<a href="http://localhost:4000/">http://localhost:4000/</a> 看到下面的效果，说明的你博客已经构建成功了</p><p><img src="https://cdn.jsdelivr.net/gh/Sitoi/cdn/img/matery_index.png" alt="BLOG"></p><h2 id="部署到-GitHub-Pages"><a href="#部署到-GitHub-Pages" class="headerlink" title="部署到 GitHub Pages"></a>部署到 GitHub Pages</h2><p>登录 GitHub 打开你的项目，获取 GitHub ssh repo 地址，替换配置中的 <code>repo github</code> 的</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 自动部署配置</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">    <span class="attr">repo:</span></span><br><span class="line">      <span class="attr">github:</span> <span class="string">git@github.com:Sitoi/Sitoi.github.io.git</span>   <span class="comment"># 修改这里为你项目的地址</span></span><br><span class="line">    <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></tbody></table></figure><p>运行 如下命令进行部署：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo generate</span><br><span class="line">hexo deploy</span><br></pre></td></tr></tbody></table></figure><p>部署成功 你就可以上你的网站查看效果啦。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol><li><p><a href="https://hexo.io/zh-cn/">https://hexo.io/zh-cn/</a></p></li><li><p><a href="https://blinkfox.github.io/2018/09/28/qian-duan/hexo-bo-ke-zhu-ti-zhi-hexo-theme-matery-de-jie-shao/">https://blinkfox.github.io/2018/09/28/qian-duan/hexo-bo-ke-zhu-ti-zhi-hexo-theme-matery-de-jie-shao/</a></p></li><li><p><a href="https://yafine-blog.cn/posts/4ab2.html">https://yafine-blog.cn/posts/4ab2.html</a></p></li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    
      
      
    <summary type="html">&lt;div class=&quot;note danger&quot;&gt;
            &lt;p&gt;遇到任何问题，优先在本页面搜索，看看是否已经有该配置教程；&lt;br&gt;不懂得可以百度或者 Google；&lt;br&gt;还有弄不明白的可以在本站点留言，或添加站长 Wechat、QQ 等&lt;/p&gt;
       </summary>
      
    
    
    
    <category term="Hexo" scheme="https://sitoi.cn/categories/Hexo/"/>
    
    
    <category term="GitHub" scheme="https://sitoi.cn/tags/GitHub/"/>
    
    <category term="Hexo" scheme="https://sitoi.cn/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>基于 Hexo GitHub 从零开始搭建个人博客（二）：搭建基础篇</title>
    <link href="https://sitoi.cn/posts/27801.html"/>
    <id>https://sitoi.cn/posts/27801.html</id>
    <published>2019-12-27T06:46:41.000Z</published>
    <updated>2020-08-19T05:45:51.882Z</updated>
    
    <content type="html"><![CDATA[<div class="note danger">            <p>遇到任何问题，优先在本页面搜索，看看是否已经有该配置教程；<br>不懂得可以百度或者 Google；<br>还有弄不明白的可以在本站点留言，或添加站长 Wechat、QQ 等</p>          </div><div class="note info">            <p>文档目录</p><p><a href="https://sitoi.cn/posts/6666.html">环境准备</a><br><a href="https://sitoi.cn/posts/27801.html">搭建基础</a><br><a href="https://sitoi.cn/posts/63466.html">主题配置</a><br><a href="https://sitoi.cn/posts/49115.html">主题优化 - 添加 PWA</a><br><a href="https://sitoi.cn/posts/15908.html">自动部署</a></p>          </div><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><div class="note primary no-icon">            <p>阅读本篇前，请确保你的电脑配置好相应的环境，参考教程请看<a href="https://sitoi.cn/posts/6666.html">基于 Hexo GitHub 从零开始搭建个人博客（一）：环境准备篇</a></p>          </div><p>在本篇教程你，你将获得一个初始的个人博客，使用 hexo 命令，创建一个属于你自己的初始化博客。并将其在本地运行起来，最后部署到 GitHub Pages 上，让你的博客在有网的地方就可以被访问。</p><h2 id="初始化-Hexo-项目"><a href="#初始化-Hexo-项目" class="headerlink" title="初始化 Hexo 项目"></a>初始化 Hexo 项目</h2><p>选择一个目录，鼠标右击，选择 <code>Git Bash here</code></p><p><img src="https://cdn.jsdelivr.net/gh/Sitoi/cdn/img/create_hexo_blog.png" alt="Open Git Bash"></p><p>在 Git Bash 输入如下命令初始化一个 Hexo 项目</p><p><code>crawlmkt.github.io</code> 表示项目的名称，即文件夹的名字，建议使用 GitHub 项目对应的名称如：crawlmkt.github.io</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init crawlmkt.github.io</span><br></pre></td></tr></tbody></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Sitoi/cdn/img/gen_hexo_blog.png" alt="HEXO INIT"></p><p>这样 <code>crawlmkt.github.io</code> 文件夹下就会出现 <code>Hexo</code> 的初始化文件，包括 <code>themes</code>、<code>scaffolds</code>、<code>source</code> 等文件夹，这些内容暂且先不用管是做什么的，我们先知道有什么，然后一步步走下去看看都发生了什么变化。</p><h3 id="安装依赖包"><a href="#安装依赖包" class="headerlink" title="安装依赖包"></a>安装依赖包</h3><p>切换到 博客 项目目录</p><p>运行如下命令：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span>  crawlmkt.github.io</span><br></pre></td></tr></tbody></table></figure><p>安装 npm 包</p><p>运行如下命令：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i</span><br></pre></td></tr></tbody></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Sitoi/cdn/img/hexo_npm_install_cmd.png" alt="npm i"></p><h2 id="启动-hexo-博客"><a href="#启动-hexo-博客" class="headerlink" title="启动 hexo 博客"></a>启动 hexo 博客</h2><p>运行如下命令：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo server</span><br></pre></td></tr></tbody></table></figure><p>输出如下：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">INFO  Start processing</span><br><span class="line">INFO  Hexo is running at http://localhost:4000 . Press Ctrl+C to stop.</span><br></pre></td></tr></tbody></table></figure><h2 id="查看博客"><a href="#查看博客" class="headerlink" title="查看博客"></a>查看博客</h2><p>打开浏览器，输入地址：<a href="http://localhost:4000/">http://localhost:4000/</a> 看到下面的效果，说明的你博客已经构建成功了</p><p><img src="https://cdn.jsdelivr.net/gh/Sitoi/cdn/img/blog_init.png" alt="BLOG"></p><h2 id="本地博客发布到-GitHub-Pages"><a href="#本地博客发布到-GitHub-Pages" class="headerlink" title="本地博客发布到 GitHub Pages"></a>本地博客发布到 GitHub Pages</h2><p>之前的步骤中，我们已经完成了对 GitHub 账户的注册以及 Github Pages 的创建，并且为 GitHub 配置了 SSH key,接下来我们来将这个初始化的博客进行一下部署，放到 GitHub Pages 上面验证一下其可用性。成功之后我们可以再进行后续的修改，比如修改主题、修改页面配置等等。</p><p>详细请参考：<a href="http://sitoi.cn/posts/6666.html">基于 Hexo GitHub 从零开始搭建个人博客（一）：环境准备篇</a></p><h3 id="安装-hexo-deployer-git-插件"><a href="#安装-hexo-deployer-git-插件" class="headerlink" title="安装 hexo-deployer-git 插件"></a>安装 hexo-deployer-git 插件</h3><p>在博客项目目录下运行：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></tbody></table></figure><h3 id="修改-config-yml-文件"><a href="#修改-config-yml-文件" class="headerlink" title="修改 _config.yml 文件"></a>修改 _config.yml 文件</h3><blockquote><p>配置站点信息</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/Sitoi/cdn/img/hexo_config.png" alt="HEXO CONFIG"></p><blockquote><p>添加部署信息</p></blockquote><p>修改内容，在 _config.yml 文件最下面</p><p><strong>修改前：</strong></p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/deployment.html</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">''</span></span><br></pre></td></tr></tbody></table></figure><p><strong>修改后：</strong></p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/deployment.html</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">git@github.com:crawlmkt/crawlmkt.github.io.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></tbody></table></figure><ul><li><code>git@github.com:crawlmkt/crawlmkt.github.io.git</code> 其中 crawlmkt 改成你的用户名即可</li></ul><h3 id="部署项目到-GitHub"><a href="#部署项目到-GitHub" class="headerlink" title="部署项目到 GitHub"></a>部署项目到 GitHub</h3><p>修改好配置后，运行如下命令，将代码部署到 GitHub</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo generate</span><br><span class="line">hexo deploy</span><br></pre></td></tr></tbody></table></figure><h3 id="查看部署情况"><a href="#查看部署情况" class="headerlink" title="查看部署情况"></a>查看部署情况</h3><p>打开浏览器访问：<a href="https://crawlmkt.github.io/">https://crawlmkt.github.io</a>，这时候我们就可以看到跟本地一模一样的博客内容了。</p><p><img src="https://cdn.jsdelivr.net/gh/Sitoi/cdn/img/hexo_deploy_success.png" alt="HEXO BLOG"></p><blockquote><p>你已经可以独自搭建一个属于自己的博客了，剩下的就是选择一个主题，当然你也可以自己开发一个主题。</p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    
      
      
    <summary type="html">&lt;div class=&quot;note danger&quot;&gt;
            &lt;p&gt;遇到任何问题，优先在本页面搜索，看看是否已经有该配置教程；&lt;br&gt;不懂得可以百度或者 Google；&lt;br&gt;还有弄不明白的可以在本站点留言，或添加站长 Wechat、QQ 等&lt;/p&gt;
       </summary>
      
    
    
    
    <category term="Hexo" scheme="https://sitoi.cn/categories/Hexo/"/>
    
    
    <category term="GitHub" scheme="https://sitoi.cn/tags/GitHub/"/>
    
    <category term="Hexo" scheme="https://sitoi.cn/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>基于 Hexo GitHub 从零开始搭建个人博客（一）：环境准备篇</title>
    <link href="https://sitoi.cn/posts/6666.html"/>
    <id>https://sitoi.cn/posts/6666.html</id>
    <published>2019-12-26T12:02:34.000Z</published>
    <updated>2020-08-19T05:45:51.882Z</updated>
    
    <content type="html"><![CDATA[<div class="note danger">            <p>遇到任何问题，优先在本页面搜索，看看是否已经有该配置教程；<br>不懂得可以百度或者 Google；<br>还有弄不明白的可以在本站点留言，或添加站长 Wechat、QQ 等</p>          </div><div class="note info">            <p>文档目录</p><p><a href="https://sitoi.cn/posts/6666.html">环境准备</a><br><a href="https://sitoi.cn/posts/27801.html">搭建基础</a><br><a href="https://sitoi.cn/posts/63466.html">主题配置</a><br><a href="https://sitoi.cn/posts/49115.html">主题优化 - 添加 PWA</a><br><a href="https://sitoi.cn/posts/15908.html">自动部署</a></p>          </div><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><img src="https://cdn.jsdelivr.net/gh/Sitoi/cdn/img/matery_index.png" alt="首页"></p><p><img src="https://cdn.jsdelivr.net/gh/Sitoi/cdn/img/matery_tuijian.png" alt="首页推荐文章"></p><p><img src="https://cdn.jsdelivr.net/gh/Sitoi/cdn/img/matery_list.png" alt="首页文章列表"></p><p><img src="https://cdn.jsdelivr.net/gh/Sitoi/cdn/img/matery_about.png" alt="关于页面"></p><p><img src="https://cdn.jsdelivr.net/gh/Sitoi/cdn/img/matery_post.png" alt="文章详细页"></p><blockquote><p>Q: 为什么要搭建一个属于自己的个人博客呢？</p></blockquote><ul><li><p>高度自由化</p><p>  用自己喜欢的域名，选择自己喜欢的主题，布局，特效等都可以自己编写代码完成</p></li><li><p>成就感 </p><p>  当网站被搜索引擎收录，输入相应关键字即可，可以小小的炫耀一番</p></li><li><p>拓展交流圈</p><p>  如果你对某类感兴趣的话，你可以通过个人博客找到一些志同道合的朋友。   </p></li><li><p><del>学会坚持</del></p><p>  刚开始搭建好属于自己的博客，那真的是三分钟热度，但是真的坚持下来的人很少</p></li><li><p>最好的个人简历</p><p>  当我们苦于该如何写一份个人简历时，当你拿出一个你坚持 3 年、5 年的个人博客时，或许你的机会就比别人大一点。</p></li><li><p>自己的空间</p><p>  在这个地方，你可以写一些自己的东西（没有朋友看）</p></li><li><p>写作水平的提高</p><p>  坚持写作，你的写作水平会得到很到的提高，对你今后的人生会有很大的帮助   </p></li><li><p><del>赚取一点钱</del></p><p>  当你的博客足够好，你可以开始尝试赚钱，当然啦，和<code>坚持</code>是离不开的。</p></li></ul><blockquote><p><code>折腾</code>中学会<code>知识</code>，<code>互访</code>中找到<code>友情</code>，<code>写作</code>中读懂<code>人生</code>，<code>坚持</code>中找到<code>方向</code>。</p></blockquote><p>本教程主要教你如何安装 <code>Node.js</code>、<code>Hexo</code>、<code>Git</code>、配置 <code>GitHub SSH key</code>，以及创建第一个 <code>GitHub Pages</code> 页面。</p><p>很多同学听到自己动手搭建一个博客就望而却步了，不得有<code>服务器</code>？不得有<code>域名</code>？不得自己写一堆<code>代码</code>？可我也不太会写代码怎么办呢？</p><p>没有服务器，没关系，GitHub 提供了 GitHub Pages 可以帮助我们搭建一个静态的网站，解决了你们担心的服务器问题。<br>其次，GitHub Pages 会根据你们注册的用户名，提供一个 <username>.github.io 的二级域名给你（当然也可以绑定你自己的域名）。<br>至于代码问题，我已将源码发布到我的 GitHub 项目上了，你只需仔仔细细阅读完本系列，可以毫无压力的搭建一个属于你自己的个人博客了。</username></p><p>所以说，基本上，先注册一个 GitHub 帐号就能搞定了，下面我们先开始配置环境，并获得第一个自己的 GitHub Pages 页面吧。</p><p>看完这个系列的教程，你会得到一个还不错的个人博客，具体效果请浏览 <a href="https://sitoi.cn/">https://sitoi.cn</a></p><h2 id="博客环境准备"><a href="#博客环境准备" class="headerlink" title="博客环境准备"></a>博客环境准备</h2><blockquote><p>本片主要面向 Windows 用户</p></blockquote><ul><li>操作系统：Windows 10</li><li>Node.js</li><li>Git</li><li>Hexo</li><li>idea（推荐使用 Webstorm）</li><li>一个 GitHub 帐号</li><li>一个云服务器（可选）</li><li>一个域名（可选）</li><li>一个 coding 帐号（可选）</li></ul><h2 id="安装-Chocolatey"><a href="#安装-Chocolatey" class="headerlink" title="安装 Chocolatey"></a>安装 Chocolatey</h2><blockquote><p>下文安装 <code>Node.js</code> 和 <code>Git</code> 都使用 <code>Chocolatey</code> 一句命令安装，请务必安装好 <code>Chocolatey</code> </p></blockquote><p>详细教程可以参考我之前写的一篇文章：<a href="https://sitoi.cn/posts/46278.html">Windows 程序包管理器 Chocolatey：一条命令装软件</a></p><h2 id="安装-Node-js"><a href="#安装-Node-js" class="headerlink" title="安装 Node.js"></a>安装 Node.js</h2><p>以<code>管理员</code>权限打开 <code>PowerShell</code>（<a href="https://sitoi.cn/posts/46278.html">Windows 程序包管理器 Chocolatey：一条命令装软件</a> 教程里有写如何以管理员权限打开 PoweShell）</p><h3 id="安装-nodejs"><a href="#安装-nodejs" class="headerlink" title="安装 nodejs"></a>安装 nodejs</h3><p>输入以下命令，其他的一律 输入 <code>y</code> 回车即可（下载太慢可以试下 <code>科</code> <code>学</code> <code>上</code> <code>网</code>）</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">choco install nodejs</span><br></pre></td></tr></tbody></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Sitoi/cdn/img/install_nodejs.png" alt="Install Node.js"></p><h3 id="检测-nodejs-是否安装成功"><a href="#检测-nodejs-是否安装成功" class="headerlink" title="检测 nodejs 是否安装成功"></a>检测 nodejs 是否安装成功</h3><blockquote><p>打开一个新的管理员权限的 PowerShell 窗口</p></blockquote><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm -v</span><br></pre></td></tr></tbody></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Sitoi/cdn/img/check_nodejs.png" alt="Check Node.js"></p><h3 id="修改-npm-源"><a href="#修改-npm-源" class="headerlink" title="修改 npm 源"></a>修改 npm 源</h3><p>由于官方 NPM 源下载 包的速度太慢，所以我们将 NPM 的源 替换成 <code>淘宝源</code>，运行如下命令即可：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config <span class="built_in">set</span> registry https://registry.npm.taobao.org</span><br></pre></td></tr></tbody></table></figure><h2 id="安装-Hexo"><a href="#安装-Hexo" class="headerlink" title="安装 Hexo"></a>安装 Hexo</h2><p>以<code>管理员</code>权限打开 <code>PowerShell</code></p><p>输入以下命令，推荐安装 4.1.1 版本：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i hexo@4.1.1 -g</span><br></pre></td></tr></tbody></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Sitoi/cdn/img/install_hexo.png" alt="Install Hexo"></p><h2 id="安装-Git"><a href="#安装-Git" class="headerlink" title="安装 Git"></a>安装 Git</h2><h3 id="安装-Git-1"><a href="#安装-Git-1" class="headerlink" title="安装 Git"></a>安装 Git</h3><p>以<code>管理员</code>权限打开 <code>PowerShell</code></p><p>输入以下命令，其他的一律 输入 <code>y</code> 回车即可（下载太慢可以试下 <code>科</code> <code>学</code> <code>上</code> <code>网</code>）</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">choco install git</span><br></pre></td></tr></tbody></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Sitoi/cdn/img/install_git.png" alt="Install Git"></p><h3 id="检测-Git-是否安装成功"><a href="#检测-Git-是否安装成功" class="headerlink" title="检测 Git 是否安装成功"></a>检测 Git 是否安装成功</h3><blockquote><p>打开一个新的管理员权限的 PowerShell 窗口</p></blockquote><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git --version</span><br></pre></td></tr></tbody></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Sitoi/cdn/img/check_git.png" alt="Check Git"></p><h2 id="注册-GitHub-帐号"><a href="#注册-GitHub-帐号" class="headerlink" title="注册 GitHub 帐号"></a>注册 GitHub 帐号</h2><p>注册地址：<a href="https://github.com/join?source=header">https://github.com/join?source=header</a></p><p>实在不会网上教程一堆，以后看心情补吧。</p><h2 id="创建仓库"><a href="#创建仓库" class="headerlink" title="创建仓库"></a>创建仓库</h2><p>找不到创建入口的，访问：<a href="https://github.com/new">https://github.com/new</a></p><p>创建一个仓库，用于托管博客代码，</p><ul><li>仓库的格式必须为：<code>&lt;用户名&gt;.github.io</code></li><li><code>Description</code>：为描述仓库（选填）</li><li>勾选 <code>Initialize this repository with a README</code> 初始化一个 README.md 文件</li><li>点击<code> Creat repository</code> 进行创建</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Sitoi/cdn/img/create_repo.png" alt="Create Repo"></p><h2 id="访问你的个人网站"><a href="#访问你的个人网站" class="headerlink" title="访问你的个人网站"></a>访问你的个人网站</h2><p>打开浏览器，输入网站：<code>&lt;用户名&gt;.github.io</code> ,例如：<code>crawlmkt.github.io</code></p><p><img src="https://cdn.jsdelivr.net/gh/Sitoi/cdn/img/github_pages.png" alt="GitHub Pages"></p><h2 id="为-GitHub-配置-SSH-Key"><a href="#为-GitHub-配置-SSH-Key" class="headerlink" title="为 GitHub 配置 SSH Key"></a>为 GitHub 配置 SSH Key</h2><p>详细教程可以参考我之前写的一篇文章：<a href="https://sitoi.cn/posts/43508.html">Windows 下利用 Git 生成 SSH KEY 并配置到 GitHub</a></p><h1 id="恭喜，到这里你的-Windows-环境已经搭建好啦"><a href="#恭喜，到这里你的-Windows-环境已经搭建好啦" class="headerlink" title="恭喜，到这里你的 Windows 环境已经搭建好啦~~"></a>恭喜，到这里你的 Windows 环境已经搭建好啦~~</h1><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    
      
      
    <summary type="html">&lt;div class=&quot;note danger&quot;&gt;
            &lt;p&gt;遇到任何问题，优先在本页面搜索，看看是否已经有该配置教程；&lt;br&gt;不懂得可以百度或者 Google；&lt;br&gt;还有弄不明白的可以在本站点留言，或添加站长 Wechat、QQ 等&lt;/p&gt;
       </summary>
      
    
    
    
    <category term="Hexo" scheme="https://sitoi.cn/categories/Hexo/"/>
    
    
    <category term="GitHub" scheme="https://sitoi.cn/tags/GitHub/"/>
    
    <category term="Hexo" scheme="https://sitoi.cn/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>Windows 下利用 Git 生成 SSH KEY 并配置到 GitHub</title>
    <link href="https://sitoi.cn/posts/43508.html"/>
    <id>https://sitoi.cn/posts/43508.html</id>
    <published>2019-12-25T04:47:35.000Z</published>
    <updated>2020-08-19T05:45:51.882Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基本环境"><a href="#基本环境" class="headerlink" title="基本环境"></a>基本环境</h2><ul><li>Windows 操作系统</li><li>本地安装了 Git</li><li>一个 GitHub 帐号</li></ul><h2 id="生成-SSH-KEY"><a href="#生成-SSH-KEY" class="headerlink" title="生成 SSH KEY"></a>生成 SSH KEY</h2><h3 id="打开-Git-Bash"><a href="#打开-Git-Bash" class="headerlink" title="打开 Git Bash"></a>打开 Git Bash</h3><p>在 Windows 桌面上，鼠标右击，选择 Git Bash here，打开 Git Bash</p><p><img src="https://cdn.jsdelivr.net/gh/Sitoi/cdn/img/git_bash.png" alt="Open Git Bash"></p><p><img src="https://cdn.jsdelivr.net/gh/Sitoi/cdn/img/git_bash2.png" alt="Git Bash"></p><h3 id="输入命令"><a href="#输入命令" class="headerlink" title="输入命令"></a>输入命令</h3><p><code>email@email.com</code> 填入一个你自己的邮箱，可以是注册 GitHub 的邮箱</p><p>输入以下命令，一直按回车：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C <span class="string">"email@email.com"</span></span><br></pre></td></tr></tbody></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Sitoi/cdn/img/gen_ssh.png" alt="Gen SSH KEY"></p><h2 id="查看-SSH-KEY"><a href="#查看-SSH-KEY" class="headerlink" title="查看 SSH KEY"></a>查看 SSH KEY</h2><p>输入以下命令查看 SSH KEY：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat ~/.ssh/id_rsa.pub</span><br></pre></td></tr></tbody></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Sitoi/cdn/img/ssh_key.png" alt="SSH KEY"></p><h2 id="将-SSH-KEY-添加到-GitHub"><a href="#将-SSH-KEY-添加到-GitHub" class="headerlink" title="将 SSH KEY 添加到 GitHub"></a>将 SSH KEY 添加到 GitHub</h2><ol><li>点击头像，选择 Settings</li><li>选择 SHH and GPG keys</li><li>点击 New SSH key</li></ol><p><img src="https://cdn.jsdelivr.net/gh/Sitoi/cdn/img/add_ssh_key.png" alt="ADD SSH KEY"></p><ol start="4"><li>填入 SSH KEY </li><li>点击 Add SSH key</li></ol><p><img src="https://cdn.jsdelivr.net/gh/Sitoi/cdn/img/add_ssh_key2.png" alt="ADD SSH KEY"></p><h2 id="测试连接"><a href="#测试连接" class="headerlink" title="测试连接"></a>测试连接</h2><p>打开 Git Bash，输入以下命令：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></tbody></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Sitoi/cdn/img/test_ssh.png" alt="TEST SSH KEY"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;基本环境&quot;&gt;&lt;a href=&quot;#基本环境&quot; class=&quot;headerlink&quot; title=&quot;基本环境&quot;&gt;&lt;/a&gt;基本环境&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Windows 操作系统&lt;/li&gt;
&lt;li&gt;本地安装了 Git&lt;/li&gt;
&lt;li&gt;一个 GitHub 帐号&lt;/l</summary>
      
    
    
    
    <category term="GitHub" scheme="https://sitoi.cn/categories/GitHub/"/>
    
    
    <category term="GitHub" scheme="https://sitoi.cn/tags/GitHub/"/>
    
    <category term="SHH KEY" scheme="https://sitoi.cn/tags/SHH-KEY/"/>
    
    <category term="Git" scheme="https://sitoi.cn/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>GitHub + jsDelivr + PicGo + Imagine 打造稳定快速、高效免费图床</title>
    <link href="https://sitoi.cn/posts/39161.html"/>
    <id>https://sitoi.cn/posts/39161.html</id>
    <published>2019-11-12T15:09:14.000Z</published>
    <updated>2020-08-19T05:45:51.882Z</updated>
    
    <content type="html"><![CDATA[<h1 id="GitHub-jsDelivr-PicGo-Imagine-打造稳定快速、高效免费图床"><a href="#GitHub-jsDelivr-PicGo-Imagine-打造稳定快速、高效免费图床" class="headerlink" title="GitHub + jsDelivr + PicGo + Imagine 打造稳定快速、高效免费图床"></a>GitHub + jsDelivr + PicGo + Imagine 打造稳定快速、高效免费图床</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>为什么要使用图床呢？</p></blockquote><p>因为在不同平台发布同一篇文章的时候，最一个痛苦的点就是，图片存储问题，各个平台的文件存储方式各不相同，无法直接 <code>Ctrl + C</code> 的方式一键搞定，为了解决这个问题，使用 <code>MarkDown + 图床</code> 的方式进行文章的写作，将图片放到一个统一的地方，在文章中引入图片外链。<br>所谓图床，就是将图片储存到第三方静态资源库中，其返回给你一个 URL 进行获取图片。<code>MarkDown</code> 支持使用 URL 的方式显示图片，我想这也是程序员为什么对其偏爱的原因之一。<br>作为程序员，你会发现，现在很多论坛和社区都开始支持使用 <code>MarkDown</code>，如果你没使用图床的情况下，你分享同一篇文章，你要在不同的平台，各自重新编辑排版一遍和上传图片一次。<br>有了图床，情况就不一样了，<code>Ctrl+C</code> 的方式就搞定了，根本不用再 Check 文章内容一遍。</p><blockquote><p>图床的选择？</p></blockquote><ol><li><code>微博图床</code>：以前用的人比较多，从 2019 年 4 月开始开启了防盗链，凉凉</li><li><code>SM.MS</code>：运营四年多了，也变得越来越慢了，到了晚上直接打不开图片，速度堪忧</li><li><code>其他小众图床</code>：随时有挂掉的风险</li><li><code>Imgur 等国外图床</code>：国内访问速度太慢，随时有被墙的风险</li><li><code>大厂储存服务</code>：例如七牛云、又拍云、腾讯云COS、阿里云OSS等，操作繁琐，又是实名认证又是域名备案的，麻烦，而且还要花钱（有钱又不怕麻烦的当我没说）</li><li><code>GitHub 图床</code>：免费，但是国内访问速度慢（不过没关系，利用 <code>jsDelivr</code> 提供的免费的 CDN 加速 速度足够了）</li></ol><h2 id="使用流程"><a href="#使用流程" class="headerlink" title="使用流程"></a>使用流程</h2><ol><li>新建 GitHub 仓库</li><li>生成一个 Token</li><li>配置 PicGo 并使用 jsdelivr 作为 CDN 加速</li><li>使用 Imagine 进行图片压缩</li><li>上传图片到 PicGo 并使用图床</li></ol><h2 id="新建-GitHub-仓库"><a href="#新建-GitHub-仓库" class="headerlink" title="新建 GitHub 仓库"></a>新建 GitHub 仓库</h2><ul><li>登录/注册 GitHub</li><li>新建一个仓库，填写好仓库名</li><li>仓库描述</li><li>将权限设置成 <code>public</code></li><li>根据需求选择是否为仓库初始化一个 <code>README.md</code> 描述文件</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Sitoi/cdn/img/tuchuang001.png" alt="新建 GitHub 仓库"></p><h2 id="生成一个-Token"><a href="#生成一个-Token" class="headerlink" title="生成一个 Token"></a>生成一个 Token</h2><ol><li>点击用户头像 -&gt; 选择 <code>Settings</code></li></ol><p><img src="https://cdn.jsdelivr.net/gh/Sitoi/cdn/img/tuchuang002.png" alt="Settings"></p><ol start="2"><li>点击 <code>Developer settings</code></li></ol><p><img src="https://cdn.jsdelivr.net/gh/Sitoi/cdn/img/tuchuang003.png" alt="Developer settings"></p><ol start="3"><li>点击 <code>Personal access tokens</code></li></ol><p><img src="https://cdn.jsdelivr.net/gh/Sitoi/cdn/img/tuchuang004.png" alt="Personal access tokens"></p><ol start="4"><li>点击 <code>Generate new token</code></li></ol><p><img src="https://cdn.jsdelivr.net/gh/Sitoi/cdn/img/tuchuang005.png" alt="Generate new token"></p><ol start="5"><li>填写 <code>Token</code> 描述，勾选 <code>repo</code>，然后点击 <code>Generate token</code> 生成一个 <code>Token</code></li></ol><p><img src="https://cdn.jsdelivr.net/gh/Sitoi/cdn/img/tuchuang006.png" alt="填写 Token 描述"></p><ol start="6"><li>获取 <code>Token</code> 密钥</li></ol><blockquote><p>注意这个 Token 只会显示一次，自己先保存下来，或者等后面配置好 PicGo 后再关闭此网页</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/Sitoi/cdn/img/tuchuang007.png" alt="获取 Token 密钥"></p><h2 id="配置-PicGo-并使用-jsdelivr-作为-CDN-加速"><a href="#配置-PicGo-并使用-jsdelivr-作为-CDN-加速" class="headerlink" title="配置 PicGo 并使用 jsdelivr 作为 CDN 加速"></a>配置 PicGo 并使用 jsdelivr 作为 CDN 加速</h2><p>前往下载 <a href="https://github.com/Molunerfinn/picgo/releases">PicGo</a>（<a href="https://github.com/Molunerfinn/picgo/releases">点击下载</a>），安装好后开始配置图床</p><ul><li><p>设定仓库名：按照 <code>用户名/图床仓库名</code> 的格式填写</p></li><li><p>设定分支名：<code>master</code></p></li><li><p>设定 Token：粘贴之前生成的 <code>Token</code></p></li><li><p>指定存储路径：填写想要储存的路径，如 <code>img/</code>，这样就会在仓库下创建一个名为 <code>img</code> 的文件夹，图片将会储存在此文件夹中</p></li><li><p>设定自定义域名：它的的作用是，在图片上传后，PicGo 会按照<code>自定义域名+上传的图片名</code>的方式生成访问链接，放到粘贴板上，因为我们要使用 <code>jsDelivr</code> 加速访问，所以可以设置为<code>https://cdn.jsdelivr.net/gh/用户名/图床仓库名</code></p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/Sitoi/cdn/img/tuchuang008.png" alt="配置 PicGo"></p><figure class="highlight text"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Q：什么是 jsdelivr ?</span><br><span class="line"></span><br><span class="line">A：jsDelivr 为开发者提供免费公共 CDN 加速服务</span><br></pre></td></tr></tbody></table></figure><h2 id="使用-Imagine-进行图片压缩"><a href="#使用-Imagine-进行图片压缩" class="headerlink" title="使用 Imagine 进行图片压缩"></a>使用 Imagine 进行图片压缩</h2><p>通常情况下，图片大小都是超过 200KB 的，所以网页加载的时候会特别慢，一般我们会对图片进行压缩，这里我推荐 <a href="https://github.com/meowtec/Imagine/releases">Imagine</a>（<a href="https://github.com/meowtec/Imagine/releases">点击下载</a>） 支持全平台。</p><p><img src="https://cdn.jsdelivr.net/gh/Sitoi/cdn/img/tuchuang009.png" alt="使用 Imagine 进行图片压缩"></p><blockquote><p>Imagine 采用的是有损压缩，介意的可以忽略这一步</p></blockquote><p>顺便推荐一个无损压缩的网站：<a href="https://tinypng.com/">https://tinypng.com/</a></p><h2 id="上传图片到-PicGo-并使用图床"><a href="#上传图片到-PicGo-并使用图床" class="headerlink" title="上传图片到 PicGo 并使用图床"></a>上传图片到 PicGo 并使用图床</h2><p>配置好 <code>PicGo</code> 后，我们就可以进行高效创作了，将<code>压缩后的图片</code>拖拽到<code>上传区</code>，将会自动上传并复制<code>访问链接</code>，将链接粘贴到博文中就行了，访问速度杠杠的</p><p><img src="https://cdn.jsdelivr.net/gh/Sitoi/cdn/img/tuchuang010.png" alt="上传图片到 PicGo 并使用图床"></p><p>此外 <code>PicGo</code> 还有相册功能，可以对已上传的图片进行删除，修改链接等快捷操作，<code>PicGo</code> 还可以生成不同格式的链接、支持批量上传、快捷键上传、自定义链接格式、上传前重命名等，更多功能自己去探索吧！</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;GitHub-jsDelivr-PicGo-Imagine-打造稳定快速、高效免费图床&quot;&gt;&lt;a href=&quot;#GitHub-jsDelivr-PicGo-Imagine-打造稳定快速、高效免费图床&quot; class=&quot;headerlink&quot; title=&quot;GitHub</summary>
      
    
    
    
    <category term="Hexo" scheme="https://sitoi.cn/categories/Hexo/"/>
    
    
    <category term="GitHub" scheme="https://sitoi.cn/tags/GitHub/"/>
    
    <category term="jsDelivr" scheme="https://sitoi.cn/tags/jsDelivr/"/>
    
    <category term="PicGo" scheme="https://sitoi.cn/tags/PicGo/"/>
    
    <category term="Imagine" scheme="https://sitoi.cn/tags/Imagine/"/>
    
  </entry>
  
  <entry>
    <title>Windows 程序包管理器 Chocolatey：一条命令装软件</title>
    <link href="https://sitoi.cn/posts/46278.html"/>
    <id>https://sitoi.cn/posts/46278.html</id>
    <published>2019-10-29T13:46:06.000Z</published>
    <updated>2020-08-19T05:45:51.882Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Windows-程序包管理器-Chocolatey：一条命令装软件"><a href="#Windows-程序包管理器-Chocolatey：一条命令装软件" class="headerlink" title="Windows 程序包管理器 Chocolatey：一条命令装软件"></a>Windows 程序包管理器 Chocolatey：一条命令装软件</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>Chocolatey 是一种<strong>软件管理</strong>解决方案，与您在 Windows 上经历过的任何其他事情都不一样。它着重于简单性，安全性和可伸缩性。您可以在 PowerShell 中为任何软件（不仅仅是安装程序）编写一次软件部署，然后可以使用任何可以管理系统（配置管理，端点管理等）并跟踪和管理该软件更新的解决方案，将其部署到 Windows 所在的任何位置。随着时间的推移。使用 Chocolatey 在本地，“云”中或 Docker 容器中管理软件。</p><blockquote><p>简而言之呢：就是类似 Liunx 下的 apt、yum、dnf 等程序包管理器。</p></blockquote><p>另外需要说明的是，Chocolatey 只是把官方下载路径封装到了 Chocolatey 中，所以下载源都是其官方路径，所以下载的一定是合法的，但是如果原软件是需要 Licence 注册的话，那么 Chocolatey 下载安装好的软件还是需要你去购买注册。不过 Chocolatey 一般还是会选用免费 Licence 可用的软件。</p><h2 id="安装要求"><a href="#安装要求" class="headerlink" title="安装要求"></a>安装要求</h2><ul><li>Windows 7+ / Windows Server 2003+</li><li>PowerShell v2+</li><li>.NET Framework 4+ (the installation will attempt to install .NET 4.0 if you do not have it installed)</li></ul><h2 id="安装-Chocolatey"><a href="#安装-Chocolatey" class="headerlink" title="安装 Chocolatey"></a>安装 Chocolatey</h2><h3 id="以管理员的方式打开-PowerShell"><a href="#以管理员的方式打开-PowerShell" class="headerlink" title="以管理员的方式打开 PowerShell"></a>以管理员的方式打开 PowerShell</h3><ul><li><code>右击</code> 左下角 <code>Windows 图标</code>，选择 <code>Windows PowerShell(管理员)(A)</code></li></ul><p><img src="https://cdn.jsdelivr.net/gh/Sitoi/cdn/img/choco-1.png" alt="Windows PowerShell(管理员)"></p><p><img src="https://cdn.jsdelivr.net/gh/Sitoi/cdn/img/choco-2.png" alt="PowerShell(管理员) 界面"></p><h3 id="输入安装命令安装-Chocolatey"><a href="#输入安装命令安装-Chocolatey" class="headerlink" title="输入安装命令安装 Chocolatey"></a>输入安装命令安装 Chocolatey</h3><ul><li>在 PowerShell 终端输入以下安装代码，后输入回车即可：</li></ul><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Set-ExecutionPolicy Bypass -Scope Process -Force; iex ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))</span><br></pre></td></tr></tbody></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Sitoi/cdn/img/choco-3.png" alt="PowerShell(管理员) 界面"></p><ul><li>等待安装完成（如果长时间没有反映，请尝试开启 <strong>科 学 上 网</strong>）</li></ul><h3 id="检测是否安装成功"><a href="#检测是否安装成功" class="headerlink" title="检测是否安装成功"></a>检测是否安装成功</h3><ul><li>在 PowerShell 终端输入 <code>choco</code> 或 <code>choco -?</code> 检测是否安装成功</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Sitoi/cdn/img/choco-4.png" alt="Choco 安装成功"></p><p>安装成功了就开始使用吧！</p><h2 id="Choco-安装软件"><a href="#Choco-安装软件" class="headerlink" title="Choco 安装软件"></a>Choco 安装软件</h2><blockquote><p>以安装 nodejs 为例</p></blockquote><h3 id="查找软件包"><a href="#查找软件包" class="headerlink" title="查找软件包"></a>查找软件包</h3><p>一、利用 choco 命令查找软件包</p><p>在终端输入 choco 搜索命令：</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">choco search nodejs</span><br></pre></td></tr></tbody></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Sitoi/cdn/img/choco-5.png" alt="Choco 命令搜索结果"></p><p>二、利用网页端查找软件包</p><ul><li><p>登录 choco 软件包网站：<a href="https://chocolatey.org/packages">https://chocolatey.org/packages</a></p></li><li><p>在搜索框搜索要安装的软件</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/Sitoi/cdn/img/choco-6.png" alt="Choco 网页搜索结果"></p><h3 id="安装软件包"><a href="#安装软件包" class="headerlink" title="安装软件包"></a>安装软件包</h3><p>在 PowerShell 终端输入安装命令</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">choco install nodejs</span><br></pre></td></tr></tbody></table></figure><p>安装命令会先下载软件包，然后再执行安装脚本，下载完成后，会询问你<code>是否希望运行安装脚本？</code>，输入 <code>Y</code> 即可。</p><p><img src="https://cdn.jsdelivr.net/gh/Sitoi/cdn/img/choco-7.png" alt="Choco 安装 nodejs"></p><p>检测 nodejs 是否安装成功，在终端输入 <code>node -v</code></p><p><img src="https://cdn.jsdelivr.net/gh/Sitoi/cdn/img/choco-8.png" alt="nodejs 安装成功"></p><p>当你想要安装 python，只需要：</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">choco install python</span><br></pre></td></tr></tbody></table></figure><p>想安装 git，只需要：</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">choco install git</span><br></pre></td></tr></tbody></table></figure><p>想安装 java，只需要：</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">choco install java</span><br></pre></td></tr></tbody></table></figure><h2 id="Choco-常用命令使用"><a href="#Choco-常用命令使用" class="headerlink" title="Choco 常用命令使用"></a>Choco 常用命令使用</h2><p>Chocolatey 的使用也很简单，使用指令如下：</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">choco search &lt;keyword&gt;  # 搜索软件</span><br><span class="line">choco list &lt;keyword&gt;    # 跟 search 命令功能类似</span><br><span class="line">choco install &lt;package1 package2 ...&gt;   # 安装软件</span><br><span class="line">choco install &lt;package&gt;  -version ***   # 安装指定版本</span><br><span class="line">choco  uninstall name   # 卸载软件</span><br><span class="line">choco version &lt;package&gt; # 查看安装包的版本情况</span><br><span class="line">choco  upgrade &lt;package&gt;    # 更新某个软件 </span><br><span class="line">choco list -localonly   # 查看一下所有安装在本地的包的列表</span><br><span class="line">choco list -lo  # 功能同上</span><br></pre></td></tr></tbody></table></figure><h3 id="包的类型"><a href="#包的类型" class="headerlink" title="包的类型"></a>包的类型</h3><p>Chocolatey 的包有不同的类型，有些包的名字里面会包含特殊的后缀，比如 .install ，.commandline，.portable ，有些包的名字不带这些后缀。</p><ul><li><p>无后缀（例：nodejs，git）</p></li><li><p>.install    （例：nodejs.install，git.install）</p><p>  .install 后缀的包，这个包会出现在系统控制面板里的 卸载或更改程序 里面，你可以把 .install 的包想成是通过安装程序（msi）安装的包。</p></li><li><p>.commandline（例：nodejs.commandline，未来会被抛弃）</p><p>  .commandline（未来会被抛弃） 与 .portable 后缀的包是压缩包（zip），安装这种后缀的包，你不能在 卸载或更改程序 里找到它们。</p></li><li><p>.portable   （例：putty.portable）</p></li></ul><p>你也可以选择不带后缀的包，这样如果系统中已经安装了这个包，就会跳过去，如果没安装，Chocolatey 就会为你安装一个，默认安装的这个包的类型应该就是 .install 后缀的包。</p><blockquote><p>软件包的推荐顺序： 无后缀 &gt; .install &gt; .portable &gt; .commandline</p></blockquote><h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><ul><li><a href="https://chocolatey.org/">Chocolatey 官网</a></li><li><a href="https://chocolatey.org/install">Chocolatey 官方安装教程</a></li><li><a href="https://chocolatey.org/packages">Chocolatey 官方包搜索</a></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Windows-程序包管理器-Chocolatey：一条命令装软件&quot;&gt;&lt;a href=&quot;#Windows-程序包管理器-Chocolatey：一条命令装软件&quot; class=&quot;headerlink&quot; title=&quot;Windows 程序包管理器 Chocolatey：</summary>
      
    
    
    
    <category term="资源" scheme="https://sitoi.cn/categories/%E8%B5%84%E6%BA%90/"/>
    
    
    <category term="Windows" scheme="https://sitoi.cn/tags/Windows/"/>
    
    <category term="资源" scheme="https://sitoi.cn/tags/%E8%B5%84%E6%BA%90/"/>
    
    <category term="chocolatey" scheme="https://sitoi.cn/tags/chocolatey/"/>
    
  </entry>
  
  <entry>
    <title>国内加速访问 GitHub</title>
    <link href="https://sitoi.cn/posts/23395.html"/>
    <id>https://sitoi.cn/posts/23395.html</id>
    <published>2019-10-29T10:55:22.000Z</published>
    <updated>2020-08-19T05:45:51.882Z</updated>
    
    <content type="html"><![CDATA[<h1 id="国内加速访问-GitHub"><a href="#国内加速访问-GitHub" class="headerlink" title="国内加速访问 GitHub"></a>国内加速访问 GitHub</h1><p>中国访问 GitHub 的速度不忍直视，那就叫一个慢！</p><figure class="highlight text"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Q: 为什么访问速度会很慢？</span><br><span class="line">A: GitHub 在国内访问速度慢的问题原因有很多，但最直接和最主要的原因是 GitHub 的分发加速网络的域名遭到 dns 污染。</span><br></pre></td></tr></tbody></table></figure><figure class="highlight text"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Q: 如何解决 DNS 污染？</span><br><span class="line">A: 通过修改 hosts 解决污染问题。</span><br></pre></td></tr></tbody></table></figure><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><blockquote><p>不需要科（）学（）上网，也不需要开代理加速器。</p></blockquote><h3 id="一、查询网址对应的-IP-地址"><a href="#一、查询网址对应的-IP-地址" class="headerlink" title="一、查询网址对应的 IP 地址"></a>一、查询网址对应的 IP 地址</h3><p>查询地址：<a href="https://www.ipaddress.com/">https://www.ipaddress.com/</a></p><p>点击下面 <code>域名</code>（domain）自动跳转到 <code>ipaddress.com</code> 查询结果页面：</p><ol><li><p><a href="https://github.com.ipaddress.com/">github.com</a></p></li><li><p><a href="https://github.com.ipaddress.com/assets-cdn.github.com">assets-cdn.github.com</a></p></li><li><p><a href="https://fastly.net.ipaddress.com/github.global.ssl.fastly.net">github.global.ssl.fastly.net</a></p></li></ol><p><img src="https://cdn.jsdelivr.net/gh/Sitoi/cdn/img/GitHub-dns0.png" alt="github.com 对应 IP 结果"></p><p><img src="https://cdn.jsdelivr.net/gh/Sitoi/cdn/img/GitHub-dns1.png" alt="assets-cdn.github.com 对应 IP 结果"></p><p><img src="https://cdn.jsdelivr.net/gh/Sitoi/cdn/img/GitHub-dns2.png" alt="github.global.ssl.fastly.net 对应 IP 结果"></p><h3 id="二、修改本地系统-hosts-文件"><a href="#二、修改本地系统-hosts-文件" class="headerlink" title="二、修改本地系统 hosts 文件"></a>二、修改本地系统 hosts 文件</h3><blockquote><p>hosts 文件路径：<code>C:\Windows\System32\drivers\etc\hosts</code></p></blockquote><ol><li>以<strong>管理员</strong>身份打开 <code>CMD</code> 终端，并输入 <code>notepad</code> ，会打开一个记事本。</li></ol><p><img src="https://cdn.jsdelivr.net/gh/Sitoi/cdn/img/GitHub-dns3.png" alt="记事本"></p><ol start="2"><li>打开文件，输入 <code>hosts</code> 文件路径，选择所有文件，最后点击 <code>hosts</code> 自动打开该文件。</li></ol><p><img src="https://cdn.jsdelivr.net/gh/Sitoi/cdn/img/GitHub-dns4.png" alt="打开 hosts 文件"></p><ol start="3"><li>修改 <code>hosts</code> 文件，将查询到的 IP 和 域名写在 <code>hosts</code> 文件的最后即可</li></ol><figure class="highlight text"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">192.30.253.112    github.com</span><br><span class="line">185.199.108.153   assets-cdn.github.com</span><br><span class="line">185.199.109.153   assets-cdn.github.com</span><br><span class="line">185.199.110.153   assets-cdn.github.com</span><br><span class="line">185.199.111.153   assets-cdn.github.com</span><br><span class="line">199.232.5.194     github.global.ssl.fastly.net</span><br></pre></td></tr></tbody></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Sitoi/cdn/img/GitHub-dns5.png" alt="修改 hosts 文件"></p><h3 id="三、刷新本地系统-dns-缓存"><a href="#三、刷新本地系统-dns-缓存" class="headerlink" title="三、刷新本地系统 dns 缓存"></a>三、刷新本地系统 dns 缓存</h3><p>用 <code>WIN + R</code> 快捷键打开运行窗口，输入命令：<code>cmd</code> 并回车进入命令行窗口。</p><p>接着输入命令：</p><figure class="highlight cmd"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ipconfig</span> /flushdns </span><br></pre></td></tr></tbody></table></figure><p>回车后执行刷新本地 dns 缓存数据即可。</p><p><img src="https://cdn.jsdelivr.net/gh/Sitoi/cdn/img/GitHub-dns6.png" alt="刷新系统 dns 缓存"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;国内加速访问-GitHub&quot;&gt;&lt;a href=&quot;#国内加速访问-GitHub&quot; class=&quot;headerlink&quot; title=&quot;国内加速访问 GitHub&quot;&gt;&lt;/a&gt;国内加速访问 GitHub&lt;/h1&gt;&lt;p&gt;中国访问 GitHub 的速度不忍直视，那就叫一个慢</summary>
      
    
    
    
    <category term="GitHub" scheme="https://sitoi.cn/categories/GitHub/"/>
    
    
    <category term="GitHub" scheme="https://sitoi.cn/tags/GitHub/"/>
    
    <category term="DNS" scheme="https://sitoi.cn/tags/DNS/"/>
    
  </entry>
  
</feed>
